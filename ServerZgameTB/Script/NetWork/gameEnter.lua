---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/11/6 16:54
---

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--- 这是每个玩家的连接接收到网络消息之后的处理， 当涉及到多人游戏的时候， 需要通过MultiThreadChannelGameManagerToPlayer 来和游戏桌子逻辑进行数据交互，因为多线程需要保证线程安全
---
--- 如果自己单人游戏就不用了， 直接把处理游戏的逻辑写在这里就好了。
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------





--MyPlayer = nil -- 这是全局的玩家句柄，因为每一个LState是一个单独的lua空间，所以每个玩家都拥有自己单独的MyPlayer句柄


----客户端申请进入游戏房间 , 玩家申请登录游戏房间， 分配桌子，坐下
function HandleEnterGameScene(userId, buf)
--    print("------------客户端申请进入游戏房间-------------")
    local msg = CMD_GameServer_pb.CMD_GF_EnterScene()
    msg:ParseFromString(buf)

    print("客户端申请进入游戏房间, frame_version:"..msg.game_type)
    --玩家登陆游戏，分配桌子
    local gameType = msg.game_type     -- 申请登录的游戏类型

    local game = GetGameByID(gameType)
    if game == nil then
        LuaNetWorkSendToUser(userId,MDM_GR_LOGON, SUB_GR_LOGON_FAILURE, nil, "请求进入游戏类型不正确", nil)
        return
    end

    local player = GetPlayerByUID(userId)
    print("player.GameType"..player.GameType)
    if player.GameType ~= GameHall then
        print("相同uid在游戏中"..player.GameType)
        LuaNetWorkSendToUser(userId, MDM_GR_LOGON, SUB_GR_LOGON_FAILURE, nil, "相同uid在游戏中", nil)
        return
    end

    game:PlayerLoginGame(player)        -- 玩家申请进入桌子

    local gameTable = game:GetTableByUID(player.TableID)
    if gameTable == nil then
        LuaNetWorkSendToUser(userId, MDM_GR_LOGON, SUB_GR_LOGON_FAILURE, nil, "没找到正确的桌子", nil)
        return
    end

    player.GameType = gameType  -- 玩家游戏类型


    -- 把玩家该房间的数据发给玩家
    local sendCmd = CMD_Game_TB_pb.CMD_GF_S_ServerUserInfo()

    sendCmd.user_id = player.User.UserId
    sendCmd.room_id =  player.GameType
    sendCmd.big_award_pool =  gameTable.JackpotAll
    sendCmd.small_award_pool =  gameTable.PointsScore
    sendCmd.remain_table_gold =  CoinGetRemainTableGold(player)
    sendCmd.user_score =  player.User.Score
    sendCmd.user_lottery =  player.User.Lottery

    for coinId,coinType in pairs(player.User.LotteryCoinList) do
        local lottery = sendCmd.user_lottery_list:add()
        lottery.coin_uid = tonumber(coinId)
        lottery.lottery_type = tonumber(coinType)
        lottery.lottery_value = tonumber(GetExcelValue(TBLotteryExcel, gameTable.RoomScore + coinType , "value"))
        --print("coinId"..coinId)
    end
    --print("-------------------------")
    local big_coin_list_max = 0
    for coinId,big_coin_data in pairs(BigCoinListGet(player)) do
        local big_coin = sendCmd.user_big_coin_list:add()
        big_coin.big_coin_uid = tonumber(coinId)
        big_coin.big_coin_value = tonumber(big_coin_data.dwValue)
        big_coin.big_coin_lottery_value =  tonumber(big_coin_data.llLotteryValue)
        big_coin.big_coin_type = tonumber(big_coin_data.eBigCoinType)
        big_coin.draw_value = 0
        --print("big coin "..coinId)
        big_coin_list_max = big_coin_list_max +1
        if big_coin_list_max > 20 then
            Logger("有玩家 "..player.User.UserId.." 大金币列表突破20")
            break
        end
    end
    sendCmd.room_score =  gameTable.RoomScore
    LuaNetWorkSendToUser(player.User.UserId, MDM_GF_GAME, SUB_GF_SERVER_USER_INFO, sendCmd, nil, nil)

    --print("*************************************************")
    --print(MySerpent.block(player.User))

    PointsSendMsgToPlayer(player,gameTable)     -- 把小奖池的信息同步给该玩家



    -- 通知其他玩家
    gameTable:NewPlayerJoin(player)     -- 通知桌子有新玩家加入，桌子可以通知其他玩家


end

-- 用户离开房间
function HandleLeaveGameScene(userId, buf)
        print("------------客户端申请离开游戏房间-------------")
    local msg = CMD_GameServer_pb.CMD_GF_C_LeaveScene()
    msg:ParseFromString(buf)
    local gameType = msg.game_type
    print("gameType"..gameType)

    local sendCmd = CMD_GameServer_pb.CMD_GF_S_LeaveScene()
    sendCmd.result = 0

    local player,game, gameTable = GetPlayer_Game_Table(userId)
    if player.GameType == gameType then
        -- 玩家离开桌子
        game:PlayerLogOutGame(player)
        sendCmd.result = 1
    end

    LuaNetWorkSendToUser(userId, MDM_GF_FRAME, SUB_GF_S_GAME_SCENE_LEAVE, sendCmd, nil, nil)
end




--- 通用函数，获取玩家的数据
function GetPlayer_Game_Table(userId)
    local player = GetPlayerByUID(userId)
    if player == nil then
        LuaNetWorkSendToUser(userId,MDM_GR_LOGON, SUB_GR_LOGON_FAILURE, nil, "玩家没有正常登录", nil)
        return nil,nil,nil
    end

    local game = GetGameByID(player.GameType)
    if game == nil then
        LuaNetWorkSendToUser(userId,MDM_GR_LOGON, SUB_GR_LOGON_FAILURE, nil, "请求进入游戏类型不正确", nil)
        return nil,nil,nil
    end

    --local player = game:PlayerLoginGame(oldPlayer)
    --result.TableID = player.TableID
    --result.ChairID = player.ChairID                 -- 把player桌子id，椅子id的数据 返回去
    local gameTable = game:GetTableByUID(player.TableID)
    if gameTable == nil then
        LuaNetWorkSendToUser(userId, MDM_GR_LOGON, SUB_GR_LOGON_FAILURE, nil, "没找到正确的桌子", nil)
        return nil,nil,nil
    end

    return player,game, gameTable
end




-- 申请房间信息
function HandleGetGameRoomInfo(userId,data)
    local player = GetPlayerByUID(userId)

    --local msg = CMD_GameServer_pb.CMD_C_GameRoomInfo()
    --msg:ParseFromString(data)

    local sendCmd = CMD_GameServer_pb.CMD_S_GameRoomInfo()

    local function deal_data(sendCmd, gameType)
        local game = GetGameByID(gameType)
        for _, gameTable in pairs(game.AllTableList) do
            sendCmd.room_type:append(gameType)
            sendCmd.jackpot:append(gameTable.JackpotAll)
            sendCmd.room_score:append(gameTable.RoomScore)
            sendCmd.player_num:append(gameTable.UserSeatArrayNumber)
            return sendCmd
        end
    end

    sendCmd = deal_data(sendCmd, GameTypeTB10)
    sendCmd = deal_data(sendCmd, GameTypeTB100)
    sendCmd = deal_data(sendCmd, GameTypeTB1000)
    sendCmd = deal_data(sendCmd, GameTypeTB10000)

    LuaNetWorkSendToUser(userId, MDM_GF_GAME_TB, SUB_S_GAME_ROOM_INFO, sendCmd, nil, nil)

end
