---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by soonyo.
--- DateTime: 2019/4/9 15:01
---

--------------------------------------------------------------------------------------
--- 投币和获得金币的协议
--------------------------------------------------------------------------------------



---------------------------投放金币--------------------------------------

-- 投币
function HandleCastCoin(userId,data)
    local msg = CMD_Game_TB_pb.CMD_C_CAST_COIN()
    msg:ParseFromString(data)
    local coinNum = msg.coin_num
    --print(userId.."收到投放金币数量  "..coinNum)

    if coinNum <= 0 then   -- 去掉负数
        LuaNetWorkSendToUser(userId,MDM_GF_GAME_TB, SUB_C_CAST_COIN, nil, "金币个数不正确".. coinNum, nil)
        return
    end

    local player,game, gameTable = GetPlayer_Game_Table(userId)
    if player ==nil or game ==nil or gameTable ==nil then
        print("player"..player)
        print("game"..game)
        print("gameTable"..gameTable)
        Logger("玩家数据："..player.."game:"..game.."table:"..gameTable)
        return
    end
    --print("player uid   --------".. player.User.UserId)

    local castScoreNow = coinNum * gameTable.RoomScore     -- 本次消耗分数
    if castScoreNow > player.User.Score  then      -- 是否充足
        print(" 金币不足")
        ScoreAdd(player, 999999999999)
        LuaNetWorkSendToUser(userId,MDM_GF_GAME_TB, SUB_C_CAST_COIN, nil, userId.."金币不足"..castScoreNow, nil)
        return
    end

    -- 统计
    gameTable.StatisticAllScoreCost = gameTable.StatisticAllScoreCost +  castScoreNow       -- 所有玩家总下注增加
    player.User.StatisticAllPlayerCostScore = player.User.StatisticAllPlayerCostScore + castScoreNow       -- 玩家总下注增加
    player.User.StatisticAllPlayerCostCoin = player.User.StatisticAllPlayerCostCoin + coinNum              -- 总投币增加


    ScoreReduce(player, castScoreNow)-- 玩家分数减少

    --player.m_llVarScore = player.m_llVarScore -castScoreNow -- 玩家分数减少
    --player:ChangeScore(-castScoreNow)  -- 玩家分数减少
    --player.m_llVarScore = player.m_llVarScore - castScoreNow;               -- 玩家分数减少
    --gameTable:ChangeStore(castScoreNow)                                              -- 修改库存


    CoinAddRemainTableGold(player,coinNum)         --  投币导致台面上金币数量增加


    -- 计算投币数目 -------------------------用来作弊检查
    player.m_dwStarRoundCoin = player.m_dwStarRoundCoin + coinNum               -- 大满贯的投币数量
    player.m_mapUserTigerLastTriggerCoinNum = player.m_mapUserTigerLastTriggerCoinNum + coinNum   -- 老虎机投币数量
    player.m_mapUserPokerLastTriggerCoinNum = player.m_mapUserPokerLastTriggerCoinNum + coinNum   -- 翻牌的投币数量

    player.m_mapUserTigerCoinNum = player.m_mapUserTigerCoinNum + coinNum;       -- 老虎机投币达到一定数量之后，下面2个判断清空
    local m_dwTigerResetCoinNum = 125     -- 老虎机投币数量达到标准，清理一下触发次数过高
    local m_dwPokerResetCoinNum = 100      -- 翻牌投币数量达到标准，清理一下触发次数过高
    if player.m_mapUserTigerCoinNum >= m_dwTigerResetCoinNum then
        player.m_mapUserTigerCoinNum = 0          -- 投币多过一定数量，清空作弊判断
        player.m_mapUserTigerTriggerTimes = 0
    end
    player.m_mapUserPokerCoinNum = player.m_mapUserPokerCoinNum + coinNum;
    if player.m_mapUserPokerCoinNum >= m_dwPokerResetCoinNum then
        player.m_mapUserPokerCoinNum = 0 -- 投币多过一定数量，清空作弊判断
        player.m_mapUserPokerTriggerTimes = 0
    end



    -- 发送消息 ---------------------------------
    local sendCmd = CMD_Game_TB_pb.CMD_S_OBTAIN_ENERGY()
    sendCmd.get_energy = 0
    sendCmd.gold_num = ScoreGet(player)
    sendCmd.lettery_num = LotteryGet(player)
    sendCmd.big_award = JackpotGet(gameTable)
    sendCmd.small_award = gameTable.PointsScore
    sendCmd.remain_gold_num =   CoinGetRemainTableGold(player)
    sendCmd.player_count = gameTable.UserSeatArrayNumber
    sendCmd.draw_value = 0
    sendCmd.draw_big_coin = 0

    LuaNetWorkSendToUser(player.User.UserId, MDM_GF_GAME_TB, SUB_S_OBTAIN_ENERGY, sendCmd, nil,nil)


    -- 保存玩家信息
    RedisSavePlayerAll(player.User)


    SqlSaveUserCostCoinLog(player,coinNum)     -- 记录玩家投币日志

    StatisticTableTopLostUser(player)        -- 记录一下输钱最多的玩家

    --print("台面金币数量"..CoinGetRemainTableGold(player) )


end

---------------------------获取金币--------------------------------------



-- 成功推币获得金币
function HandleObtainCoin(userId,data)
    local player,game, gameTable = GetPlayer_Game_Table(userId)

    local msg = CMD_Game_TB_pb.CMD_C_OBTAIN_COIN()
    msg:ParseFromString(data)


    local g_CoinNum_all = #msg.get_coin_data     -- 获取的金币信息(包含普通金币和特殊金币)
    local f_CoinNum_all = msg.fail_coin_count     --从旁边滚落的金币数目(仅仅是小金币)
    --local g_CoinNum_b = #msg.get_big_coin_data      -- 获取的大金币信息
    --local f_CoinNum_b = #msg.fail_big_coin_data     --从旁边滚落的大金币ID
    local g_CoinNum_lottery = 0                       -- 奖券数量
    local g_CoinNum_normal = 0                   -- 普通金币数量
    local g_CoinNum_bigNum = 0						--大金币等值的小金币个数__获得的
    local subTotalNum = g_CoinNum_all + f_CoinNum_all
    local lotteryAll = 0         -- 全部奖券的总面值
    local llLottery_big = 0         -- 大金币包含的奖券

    --调试输出
    --print(" 收获金币的调试输出 -----------------------------------------------------"..subTotalNum)
    --print("player.User.UserId  "..player.User.UserId)
    --print("player.User.llRemainTableGold  " .. player.User.llRemainTableGold)
    --print("player.User.lScore  " .. player.User.lScore)
    --print("桌面剩余金币数量"..CoinGetRemainTableGold(player))


    -- 如果桌面的剩余金币数量不足
    if CoinGetRemainTableGold(player) < subTotalNum then
        print("桌面剩余金币不足".. subTotalNum)
        LuaNetWorkSendToUser(userId,MDM_GF_GAME_TB, SUB_S_OBTAIN_ENERGY, nil, userId.."  "..CoinGetRemainTableGold(player).."获取金币的时候，台面金币不足"..subTotalNum, nil)
        return
    end




    -- 获取的金币信息
    for i,l_coinId in ipairs(msg.get_coin_data) do
        -- 这里只判断特殊金币
        local cbType = LotteryGetSpCoinList(player,l_coinId)
        if cbType ~= nil then
            lotteryAll = lotteryAll +   GetExcelValue(TBLotteryExcel,gameTable.RoomScore + cbType ,"value")     --这里是奖券的表，根据类型得出的数据
            g_CoinNum_lottery = g_CoinNum_lottery + 1       --统计特殊金币数量
            LotteryRemoveSpCoinList(player,l_coinId)                    --把奖券列表去掉的
        end
    end
    g_CoinNum_normal = g_CoinNum_all - g_CoinNum_lottery    -- 普通金币数量
    --print("普通金币数量"..g_CoinNum_n)

    -- 获取的大金币
    for i,l_coinId in ipairs(msg.get_big_coin_data) do
        local bigCoinTable = CoinGetBigCoinList(player,l_coinId)
        if bigCoinTable~= nil then
            g_CoinNum_bigNum = g_CoinNum_bigNum + bigCoinTable.dwValue
            lotteryAll =  lotteryAll + bigCoinTable.llLotteryValue
            llLottery_big = llLottery_big + bigCoinTable.llLotteryValue

            CoinRemoveBigCoinList(player,l_coinId)         -- 大币列表删除，因为获得了
        else
            print("不存在的大金币")
            LuaNetWorkSendToUser(userId,MDM_GF_GAME_TB, SUB_S_OBTAIN_ENERGY, nil, userId.."不存在的大金币"..l_coinId, nil)
            return
        end
    end

    -- 从旁边滚落的大金币， 跟上面一模一样啊
    for i,l_coinId in ipairs(msg.fail_big_coin_data) do
        local bigCoinTable = CoinGetBigCoinList(player,l_coinId)
        if bigCoinTable ~= nil then
            g_CoinNum_bigNum = g_CoinNum_bigNum + bigCoinTable.dwValue
            lotteryAll =  lotteryAll + bigCoinTable.llLotteryValue
            llLottery_big = llLottery_big + bigCoinTable.llLotteryValue

            CoinRemoveBigCoinList(player,l_coinId )-- 大币列表删除，因为获得了

        else
            LuaNetWorkSendToUser(userId,MDM_GF_GAME_TB, SUB_S_OBTAIN_ENERGY, nil, userId.."不存在的大金币"..l_coinId, nil)
            return
        end

    end

    -- 减少桌面金币数量
    CoinReduceRemainTableGold(player,subTotalNum )

    -- 奖券增加
    LotteryAdd(player,lotteryAll)


    -- 玩家分数增加
    local llWinScore = (g_CoinNum_normal + g_CoinNum_bigNum) * gameTable.RoomScore   -- 普通金币 + 大金币 总得分
    local failedScore = f_CoinNum_all * gameTable.RoomScore
    ScoreAdd(player,llWinScore)


    -- 玩家个人库存增加的是两边的币
    PoolAddPerson(player,failedScore)

    -- 保存统计数据 -------------------
    local llRevenue =  GetRevenueRatio(gameTable, failedScore)	--大金币不扣税 只扣小金币
    player.User.TaxTotal = player.User.TaxTotal + llRevenue           -- 总税收
    player.User.TotalWinScore = player.User.TotalWinScore + llWinScore        --总赢得分数
    player.User.TotalWinLottery = player.User.TotalWinLottery + lotteryAll     --总赢得奖券

    gameTable.StatisticAllScoreGenerate = gameTable.StatisticAllScoreGenerate +  llWinScore       -- 系统总产出增加，玩家获得

    --  公共库存增加两侧的金币
    PoolAddAll(gameTable,failedScore)


    -- 发送消息  获得能量---------------------------------
    local sendCmd = CMD_Game_TB_pb.CMD_S_OBTAIN_ENERGY()
    sendCmd.get_energy = 0
    sendCmd.gold_num = ScoreGet(player)
    sendCmd.lettery_num = LotteryGet(player)
    sendCmd.draw_value = 0
    sendCmd.draw_big_coin = 0
    sendCmd.big_gold_num = g_CoinNum_bigNum
    sendCmd.big_gold_lottery = llLottery_big
    sendCmd.player_count = gameTable.UserSeatArrayNumber

    sendCmd.big_award = JackpotGet(gameTable)
    sendCmd.small_award = gameTable.PointsScore
    sendCmd.remain_gold_num = CoinGetRemainTableGold(player)
    LuaNetWorkSendToUser(player.User.UserId, MDM_GF_GAME_TB, SUB_S_OBTAIN_ENERGY, sendCmd, nil,nil)


    --计算大奖池
    JackpotAdd(player,failedScore)

    -- 计算老虎机翻倍
    TigerDoublePoolAdd(player, failedScore)

    -- 计算小奖池
    PointsAdd(gameTable,failedScore)


    -- 发送消息  同步大奖池----------------------------------
    sendCmd = CMD_Game_TB_pb.CMD_S_SYNC_BIGAWARD()
    sendCmd.big_award = JackpotGet(gameTable)
    --sendCmd.small_award = player.User.llSmallAwardPool
    sendCmd.time = 2000
    sendCmd.last_player_name = gameTable.JackpotLastPlayerName
    sendCmd.last_player_score =  gameTable.JackpotLastGetScore
    LuaNetWorkSendToUser(player.User.UserId, MDM_GF_GAME_TB, SUB_S_SYNC_BIGAWARD, sendCmd, nil,nil)


    -- 保存玩家信息
    RedisSavePlayerAll(player.User)


    SqlSaveUserObtainCoinLog(player,g_CoinNum_normal + g_CoinNum_bigNum, lotteryAll)   -- 玩家推币日志流水记录

    StatisticTableTopWinUser(player)        -- 记录一下赢钱最多的玩家


    --print("台面金币数量"..CoinGetRemainTableGold(player) )
end




