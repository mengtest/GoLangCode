---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/10/12 14:56
---





----------------------------------------------------------------------
---发送消息
----------------------------------------------------------------------
---- 玩家自己的网络发送函数
--function LuaNetWorkSend(myServerId, msgId, subMsgId, sendCmd, err)
--    --return LuaNetWorkSendToUser(0,serverId,msgId,subMsgId,sendCmd,err)      -- userId 如果是0的话， 就是给玩家自己回消息 ，这是在go那边定义的
--    local buffer = ""
--    if sendCmd ~= nil then
--        buffer = sendCmd:SerializeToString()
--    end
--
--    if err == nil then
--        err = ""
--    end
--    return luaCallGoNetWorkSend(0, myServerId,msgId,subMsgId,buffer,err)       -- 返回结果 true 发送成功  false 发送失败
--end




-- 发送消息给其他玩家
function LuaNetWorkSendToUser(userId,msgId,subMsgId,sendCmd,err,token)
    local buffer = ""
    if sendCmd ~= nil then
        buffer = sendCmd:SerializeToString()
    end
    if token == nil then
        token = UserToken       -- 这里为了写方便， 默认nil就是玩家发来的消息的token , 否则就是硬指定的token
    end
    if err == nil then
        err = ""
    end
    --print("发消息给",userId,msgId,subMsgId, buffer,err, token)

    -- 统计消息数量
    --local now = GetOsTimeMillisecond()
    --if now - ZswLogShowSendMsgLastTime > 1000 then
    --    ZswLogShowSendMsgLastTime = now
    --    print("1秒发送消息数量", ZswLogShowSendMsgNum)
    --    -- 给服务器一分钟统计提供数据
    --    if ServerStateSendNum == 0 then
    --        ServerStateSendNum = ZswLogShowSendMsgNum   -- 赋值即可
    --    else
    --        ServerStateSendNum =  math.ceil( (ServerStateSendNum+ZswLogShowSendMsgNum)/2 )  -- 求一下平均值
    --    end
    --
    --    ZswLogShowSendMsgNum = 0
    --else11
    --    ZswLogShowSendMsgNum = ZswLogShowSendMsgNum + 1       -- 没到一秒就加数量
    --end

    return luaCallGoNetWorkSend(userId,0,msgId,subMsgId,buffer,err,token)       -- 返回结果 true 发送成功  false 发送失败
end


----------------------------------------------------------------------
---接收消息
----------------------------------------------------------------------
-- 网络接收函数
function GoCallLuaNetWorkReceive(serverId,userId, msgId, subMsgId, data, token)
    --Logger("lua收到了消息："..msgId)
    --Logger("lua收到了消息："..subMsgId)
    --Logger("lua收到了消息："..data)
    ReceiveMsg(serverId,userId,msgId,subMsgId,data, token)

    -- 统计消息数量
    --local now = GetOsTimeMillisecond()
    --if now - ZswLogShowReceiveLastTime > 1000 then
    --    ZswLogShowReceiveLastTime = now
    --    print("1秒接收消息数量", ZswLogShowReceiveMsgNum)
    --    -- 给服务器一分钟统计提供数据
    --    if ServerStateReceiveNum == 0 then
    --        ServerStateReceiveNum = ZswLogShowReceiveMsgNum   -- 赋值即可
    --    else
    --        ServerStateReceiveNum =  math.ceil(  (ServerStateReceiveNum+ZswLogShowReceiveMsgNum)/2)   -- 求一下平均值
    --    end
    --    ZswLogShowReceiveMsgNum = 0
    --else
    --    ZswLogShowReceiveMsgNum = ZswLogShowReceiveMsgNum + 1       -- 没到一秒就加数量
    --end
--    LuaNetWorkSend(msgId,subMsgId,"lua想发送消息", "")
end


-- 根据命令进行分支处理
function ReceiveMsg(serverId,userId, msgId, subMsgId, data, token)
    --print("msgId",msgId, "subMsgId",subMsgId)
    --print("data",data, "token",token)
    --print("serverId",serverId, "userId",userId)


    UserToken = token           -- 保存到全局里面，发送的时候取出来
    if msgId == MDM_GR_LOGON  then
        if subMsgId == SUB_GR_LOGON_USERID  then
            print("**************游客登录游戏服申请******************* ")     ----这里是原来的登录， 主要是返回客户端玩家的一些数据
            HandleLoginGSGuest(serverId,data)      -- 分成几次数据包返回给客户端玩家的数据
        end
    elseif msgId == MDM_GF_FRAME  then
        if subMsgId == SUB_GF_GAME_SCENE  then
            print("**************游客进入游戏房间申请***************** ",userId)      ---- 这里是玩家申请登录游戏的类型，进入游戏房间， 分配桌子坐下开始玩 , 客户端需要申请房间的类型
            HandleEnterGameScene(userId,data)
        elseif subMsgId == SUB_GF_GAME_SCENE_LEAVE  then
            print("**************游客离开游戏房间申请***************** ",userId)
            HandleLeaveGameScene(userId,data)
        end
    elseif msgId == MDM_GF_GAME  then
        -- 捕鱼系列
        --if subMsgId == SUB_C_USER_FIRE  then
        --    --print("**************客户端开火***************** ",userId)
        --    HandleUserFire(userId,data)
        --elseif subMsgId == SUB_C_CATCH_FISH  then
        --    --print("*************客户端抓鱼***************** ",userId)
        --    HandleCatchFish(userId,data)
        --
        --elseif subMsgId == SUB_S_BOSS_COME  then
        --    --print("*************暂时用来统计消息的返回时间***************** ",userId)
        --    --HandleStaticsNetWorkTime(userId)


    elseif msgId == MDM_GF_GAME_TB  then
        -- 推币系列
        if subMsgId == SUB_C_CAST_COIN  then
            --print("-----------------投币-------------------")
            HandleCastCoin(userId,data)
        elseif subMsgId == SUB_C_OBTAIN_COIN then
            --print("-------------------收获金币------------------")
            HandleObtainCoin(userId,data)
        elseif subMsgId == SUB_C_GAME_CARD then
            --print("-------------------翻牌游戏------------------")
            HandleGameCard(userId,data)
        elseif subMsgId == SUB_C_GAME_TIGER then
            --print("-------------------老虎机游戏------------------")
            HandleGameTiger(userId,data)
        elseif subMsgId == SUB_C_GAME_WHEELPLATE then
            --print("-------------------轮盘游戏------------------")
            HandleGameWheel(userId,data)
        elseif subMsgId == SUB_C_GAME_WHEEL_DOUBLE then
            --print("-------------------轮盘游戏的翻倍------------------")
            HandleGameWheelDouble(userId,data)
        elseif subMsgId == SUB_C_BLOOD_MODE then
            --print("-------------------热血模式进入------------------")
            HandleGameBlood(userId,data)
        elseif subMsgId == SUB_C_BLOOD_MODE_GOLD_PASS then
            --print("-------------------热血模式金币结算------------------")
            HandleGameBloodPass(userId,data)
        elseif subMsgId == SUB_C_MAIL then
            --print("-------------------请求邮件列表------------------")
            HandleMail(userId,data)
        elseif subMsgId == SUB_C_DEL_MAIL then
            --print("-------------------删除邮件------------------")
            HandleDelMail(userId,data)
        elseif subMsgId == SUB_C_GET_GIFT_MAIL then
            --print("-------------------收取邮件道具------------------")
            HandleGetMailGift(userId,data)

        elseif subMsgId == SUB_C_CLOCK_GOLD then
            print("-------------------整点领取金币------------------")
            HandleGetClockScore(userId,data)
        elseif subMsgId == SUB_C_SIGN_IN then
            print("-------------------签到------------------")
            HandleGetSignInScore(userId,data)
        elseif subMsgId == SUB_C_GAME_ROOM_INFO then
            print("-------------------申请房间信息------------------")
            HandleGetGameRoomInfo(userId,data)
        elseif subMsgId == SUB_C_LUCKY_WHEEL then
            print("-------------------申请幸运轮盘------------------")
            HandleLuckyWheel(userId,data)



        end
    end
end




--- go通知lua玩家掉线了
function GoCallLuaPlayerNetworkBroken(uid)
    Logger("go 通知："..uid .. "  掉线了")
    local player = GetPlayerByUID(uid)

    if player ~= nil then
        local game = GetGameByID(player.GameType)
        --printTable(game)
        if game ~= nil then         -- 如果玩家在游戏房间里面， 那么通知游戏房间，这个玩家离开房间
            game:PlayerLogOutGame(player)
            SetAllPlayerList(player.User.UserId, nil)         -- 清理掉游戏管理的玩家总列表
            --player.NetWorkState = false
            --player.NetWorkCloseTimer = GetOsTimeMillisecond()
        end
        -- 保存玩家的数据

    end
end

-- lua 主动踢掉玩家的网络连接
function LuaNetWorkClose(uid)
    print("服务器主动踢掉玩家UID：  "..uid)
    luaCallGoNetWorkClose(uid)
end