---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by soonyo.
--- DateTime: 2019/4/25 10:33
---

--------------------------------------------------------------------------------------
--- 登录部分，会判断新增， 日活，月活， 回归， 留存
--- 会采用redis的高并发， 然后存mysql数据库
--------------------------------------------------------------------------------------



----------------------------redis操作-----------------------------

-- 这里也可以使用redis的cJson库， 但是好像需要安装，用的地方也不多， 暂时先用字符串分割来处理一下，缺点是没有json直观
-- 返回也偷懒了， 其实可以返回字符串， 但是使用的地方太少了， 就不返回了， 再取一次吧，反正速度快，可劲造
local function RedisMultiProcessSaveStatisticAllPlayerLogin(today, isNewPlayer, isDAU, isMAU, retain2, retain3, retain7, retain30, returnPlayer)

    local dir = RedisDirStatisticAllPlayerLogin .. today
    local key = today
    local redis_lua_str = [[
    local r = redis.call('hget',"%s","%s")
       if r ~= false then
            local result = ""
            local index = 1
            for words in string.gmatch(r,"%s") do
                local word = tonumber(words)
                if index == 1 then
                    word = word + %d
                    result = result..word.." "
                elseif index == 2 then
                    word = word + %d
                    result = result..word.." "
                elseif index == 3 then
                    word = word + %d
                    result = result..word.." "
                elseif index == 4 then
                    word = word + %d
                    result = result..word.." "
                elseif index == 5 then
                    word = word + %d
                    result = result..word.." "
                elseif index == 6 then
                    word = word + %d
                    result = result..word.." "
                elseif index == 7 then
                    word = word + %d
                    result = result..word.." "
                elseif index == 8 then
                    word = word + %d
                    result = result..word
                end
                index = index + 1
            end
            r = result
       else
            r = "%d %d %d %d %d %d %d %d"
       end
    redis.call('hset',"%s","%s", r)
    return 1
    ]]
    redis_lua_str = string.format(redis_lua_str, dir, key, "%d+", isNewPlayer, isDAU, isMAU, retain2, retain3, retain7, retain30, returnPlayer, isNewPlayer, isDAU, isMAU, retain2, retain3, retain7, retain30, returnPlayer, dir, key)

    --print(redis_lua_str)
    return RedisRunLuaScript(redis_lua_str, "RedisMultiProcessSaveStatisticAllPlayerLogin")

end

local function RedisGetStatisticAllPlayerLogin(today)
    return RedisGetString(RedisDirStatisticAllPlayerLogin .. today, today)
end

-----------------------------------mysql操作----------------------------------------------------
local function saveStatisticLoginSql(todayString, statisticToday)
    local key = todayString
    local sql_str = [[
    insert into player_login_statistic (day,new_player,dau,mau,retain2,retain3,retain7,retain30,returnPlayer)
    values ('%s',%d,%d, %d,%d,%d,%d,%d,%d)
    on DUPLICATE key update new_player = %d ,dau = %d ,mau= %d ,retain2= %d ,retain3= %d ,retain7= %d ,retain30= %d ,returnPlayer= %d
    ]]
    local duplicate = string.format(sql_str, key,
            statisticToday[1], statisticToday[2], statisticToday[3], statisticToday[4], statisticToday[5], statisticToday[6], statisticToday[7], statisticToday[8],
            statisticToday[1], statisticToday[2], statisticToday[3], statisticToday[4], statisticToday[5], statisticToday[6], statisticToday[7], statisticToday[8])
    ZMySqlExec(duplicate)
end



-----------------------------------------------登录部分的统计----------------------------------------
-- 关于登录部分的统计
-- 这里使用了redis进行数值的统计， 然后给mysql进行更新， 这是因为使用redis的脚本进行高并发的数据同步，效率也高一些
function SqlSaveStatisticLogin(User)
    local todayString = GetOsDayNow()
    --print("todayString"..todayString)
    --print("os.time"..os.time())
    local timeCreateAccount = GetTimeFromString(User.TimeCreateAccount)     -- 玩家创建时间时间值
    --print("玩家创建时间时间值"..timeCreateAccount)
    local timeLastLoginT = User.TimeLastLogin        -- 玩家最后一次登录时间
    local Y, M, D, H, MM, SS, lastLoginTime, lastLoginMonth, lastLoginDay
    if timeLastLoginT ~= "" then
        Y, M, D, H, MM, SS, lastLoginTime, lastLoginMonth, lastLoginDay = GetAllTimeFormString(timeLastLoginT)   -- 玩家最后一次登录时间
    end
    --print("lastLoginDay"..lastLoginDay)

    local isNewPlayer = 0    -- 新增
    local isDAU = 0         -- 日活跃
    local isMAU = 0         -- 月活跃
    local retain2 = 0       -- 次日留存
    local retain3 = 0       -- 三日留存
    local retain7 = 0       -- 七日留存
    local retain30 = 0      -- 30日留存
    local returnPlayer = 0      --回归玩家

    if timeLastLoginT == "" then
        -- 新玩家
        --print("新玩家")
        isDAU = 1       -- 今天日活跃 +1
        isMAU = 1       -- 月活跃 +1
        isNewPlayer = 1     -- 新增
    else
        -- 老玩家
        --print("老玩家")
        -- 判断一下是否是今天第一次登录，如果是第一次登录， 那么会记录一下统计信息 ， 如果不是第一次登录，那么不会记录
        if todayString ~= lastLoginDay then
            -- 上一次登录不是今天， 那么说明是今天第一次登录， 记录统计信息
            isDAU = 1       -- 今天日活跃 +1

            -- 今日首次登录，判断留存
            local createDaysDiff = GetTwoTimesDays(timeCreateAccount, os.time())      -- 创建时间到今天是第几天
            --print("创建时间间隔  " .. createDaysDiff)
            if createDaysDiff == 1 then
                -- 间隔1天是次日留存
                retain2 = 1
            elseif createDaysDiff == 2 then
                -- 间隔2天是三日留存
                retain3 = 1
            elseif createDaysDiff == 6 then
                -- 间隔6天是七日留存
                retain7 = 1
            elseif createDaysDiff == 29 then
                -- 间隔29天是三十日留存
                retain30 = 1
            end

        end

        -- 判断上次登录是不是本月， 如果不是本月，月活跃+1
        if GetOsMonthNow() ~= lastLoginMonth then
            isMAU = 1       -- 月活跃 +1
        end

        -- 回归
        --print("回归")
        if GetTwoTimesDays(lastLoginTime, os.time()) > 30 then
            -- 如果上次登录跟今天差30天以上，那么算回归
            returnPlayer = 1        --回归 +1
        end
    end


    -- 如果这里有任意一个值不为0， 那么我们需要保存
    if isNewPlayer + isDAU + isMAU + retain2 + retain3 + retain7 + retain30 + returnPlayer > 0 then
        -- 把该玩家数据增加到全局的redis数据库中，支持高并发
        RedisMultiProcessSaveStatisticAllPlayerLogin(todayString, isNewPlayer, isDAU, isMAU, retain2, retain3, retain7, retain30, returnPlayer)

        -- 把今天的数据取出来
        local saveString = RedisGetStatisticAllPlayerLogin(todayString)
        --print("redis 数据  "..saveString)
        local statisticToday = {}       -- 保存当天的数据
        for words in string.gmatch(saveString, "%d+") do
            table.insert(statisticToday, tonumber(words))
        end

        --printTable(statisticToday)

        -- 把这些数据更新到mysql中
        saveStatisticLoginSql(todayString, statisticToday)
    end

end