---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by soonyo.
--- DateTime: 2019/4/29 13:56
---

local list_max = 5      -- 数组最大上限

-- 对列表进行由大到小排序
local function tableTopListSort(tableList)
    table.sort(tableList, function (a,b)   return a.score > b.score      end)
    --print("排序完成---------------")
    --printTable(tableList)
end
-- 对列表进行由小到大排序
local function tableBottomListSort(tableList)
    table.sort(tableList, function (a,b)   return a.score < b.score      end)
    --print("排序完成---------------")
    --printTable(tableList)
end

-- 记录当前桌子，赢钱最高的几个玩家数据
function StatisticTableTopWinUser(player)
    local gameTable = player:GetTable()
    local poolPerson = PoolGetPerson(player)    -- 个人库存值
    local PlayerWinTopList = gameTable.PlayerWinTopList
    --print("排序前----------")
    --printTable(gameTable.PlayerWinTopList)

    -- 如果数组里面存在这个玩家，那么需要更新，不是添加
    for i=1,list_max do
        if PlayerWinTopList[i].uid == player.User.UserId then
            if poolPerson > PlayerWinTopList[i].score then
                PlayerWinTopList[i].score = poolPerson
                tableTopListSort(PlayerWinTopList)        -- 重新排序，最大的排上面
            end
            return      --存在这个玩家，要么更新，要么不做
        end
    end


    -- 如果数组里面没有这个玩家，新增加的
    if poolPerson > PlayerWinTopList[list_max].score then
        -- 如果当前玩家库存小于最高的几个人中最大的一个，那么替换掉那个人
        PlayerWinTopList[list_max].score = poolPerson
        PlayerWinTopList[list_max].uid = player.User.UserId
        tableTopListSort(PlayerWinTopList)        -- 重新排序，最大的排上面
    end

end

-- 记录当前桌子，输钱最高的几个玩家数据
function StatisticTableTopLostUser(player)
    local gameTable = player:GetTable()
    local poolPerson = PoolGetPerson(player)    -- 个人库存值
    local PlayerLostTopList = gameTable.PlayerLostTopList

    --print("排序前----------")
    --printTable(gameTable.PlayerLostTopList)

    -- 如果数组里面存在这个玩家，那么需要更新，不是添加，不然每次都添加会让列表都是这个玩家的数据
    for i=1,list_max do
        if PlayerLostTopList[i].uid == player.User.UserId then
            if poolPerson < PlayerLostTopList[i].score then       -- 如果更小，那么就更新
                PlayerLostTopList[i].score = poolPerson
                tableBottomListSort(PlayerLostTopList)        -- 重新排序，最小的排上面
            end
            return      --存在这个玩家，要么更新，要么不做
        end
    end

    if poolPerson < PlayerLostTopList[list_max].score then
        -- 如果当前玩家库存小于最高的几个人中最大的一个，那么替换掉那个人
        PlayerLostTopList[list_max].score = poolPerson
        PlayerLostTopList[list_max].uid = player.User.UserId
        tableBottomListSort(PlayerLostTopList)        -- 重新排序，最小的排上面
    end

end
