---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by soonyo.
--- DateTime: 2019/4/20 16:08
---


--------------------------------------------------------------------
--- 奖券
--------------------------------------------------------------------




------------------------------获得奖券----------------------------------

-- 奖券的UUID
function LotteryCreateSpCoinUID(player)
    player.User.LotteryCoinUUID = player.User.LotteryCoinUUID + 1
    return player.User.LotteryCoinUUID
end


-- 按照几率获取奖券
function LotteryGetSpCoin(player, multi)
    local gameTable = player:GetTable()
    -- multi 是中奖的倍率， 因为可能会生成多个倍率的
    if LotteryGetBingo(player,multi) == false then
        -- 没有中奖

        -- 调试 debug
        --return 0,0,0
    end

    -- 中了奖券，看是哪种奖券
    local dwUID = LotteryCreateSpCoinUID(player)   -- coin id
    local cbType = LotteryGetWhichOneType(player)    -- coin type

    LotteryAddSpCoinList(player, dwUID, cbType)       -- 产生了特殊金币，并且加入到特殊金币的列表中

    return dwUID,cbType,GetExcelValue(TBLotteryExcel, gameTable.RoomScore + cbType , "value")

end



-- 奖券获取几率 , 返回true就是中了
function LotteryGetBingo(player,multi)
    --获得初始中奖值，根据水位进行计算
    for lotteryPersonIndex =1,10 do
        local rateMin = GetExcelValue(TBLotteryPersonPoolExcel , lotteryPersonIndex , "min")
        local rateMax = GetExcelValue(TBLotteryPersonPoolExcel , lotteryPersonIndex , "max")
        local nowLotteryPool = LotteryGet(player)/ LotteryPoolMax * 10000   -- 当前的奖券水位
        if nowLotteryPool>= rateMin and nowLotteryPool <rateMax then
            -- 找到合适的水位范围
            local rate = GetExcelValue(TBLotteryPersonPoolExcel , lotteryPersonIndex , "rate")
            --print("奖券中奖几率"..rate)
            --print("倍率"..multi)
            -- 计算是否中奖卷
            local result =  ZRandomMillionRate(rate * multi)        -- 根据水位确定的中奖几率计算是否中奖 , 乘以倍率，因为有多个倍率的金币
            return result
        end
    end
    print("没有找到合适的奖券范围。。。。。。。。。。。。。。")
    return false
end

-- 随机看中的那种奖券
function LotteryGetWhichOneType(player)
    local gameTable = player:GetTable()
    local rand = GetRandom(1,10000)
    for lotteryType =1,4 do
        local rate = GetExcelValue(TBLotteryExcel , lotteryType + gameTable.RoomScore , "rate")
        if rand <=   rate then
            -- 符合该档位条件 ，那么就是这个类型了
            return lotteryType    -- 返回奖券类型
        end
    end

    print("没有找到那种奖券类型。。。。。。。。。。。。。。")
end


----------------------------------奖券值-------------------------------------

-- 获取玩家当前奖券
function LotteryGet(player)
    return player.User.Lottery
end

-- 玩家奖券增加
function LotteryAdd(player ,addValue)
    player.User.Lottery = player.User.Lottery + addValue
end

-- 玩家奖券减少
function LotteryReduce(player ,reduceValue)
    player.User.Lottery = player.User.Lottery - reduceValue
end



-- 获取奖券库存
function LotteryGetPool(player)
    return player.User.LotteryPool
end

--------------------------------奖券库存值---------------------------------------

-- 奖券库存增加， 这个主要是在充值的时候， 会增加奖券的库存
function LotteryAddPool(player, rechargeValue)
    -- 充值的时候，增加的奖券值得计算
    local lotteryValueAdd = rechargeValue * LotteryRechargeRMBRate *  LotteryRechargeGiveRate  --  奖券返奖率
    player.User.LotteryPool = player.User.LotteryPool + lotteryValueAdd
end

-- 奖券库存减少， 这个主要是玩家获得奖券之后， 库存就减少了
function LotteryReducePool(player, value)
    player.User.LotteryPool = player.User.LotteryPool -  value
end




-------------------------------------------------------------------------------
--- 奖券的数组, 每生成一个就加入到list中去，做校验
-------------------------------------------------------------------------------
function LotteryGetSpCoinList(player, coin_uid)
    return player.User.LotteryCoinList[tostring(coin_uid)]
end

-- 把新创建的奖券加入到奖券的列表中， 为了推下来的时候做校验
function LotteryAddSpCoinList(player, coin_uid, lotteryCoin)
    player.User.LotteryCoinList[tostring(coin_uid)] = lotteryCoin
end

-- 奖券表删除，因为获得了
function LotteryRemoveSpCoinList(player, coin_uid)
    player.User.LotteryCoinList[tostring(coin_uid)] = nil
end

