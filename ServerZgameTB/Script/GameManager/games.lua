---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/11/1 13:32
---
----------------------------------------------------------------
-----------------------------game管理桌子和玩家-----------------
----------------------------------------------------------------



Game = {}
function Game:New(name,gameTypeId, switch)
    local c = {
        Name = name,
        GameTypeID = gameTypeId,
        Switch = switch,    -- 游戏是否开启

        AllTableList = {},  -- 所有桌子列表       key tableUid  ,value table          --- 要注意， key 不能用数字，因为占用内存太大， goperlua的问题
        AllTableListNumber = 0 ,  -- 所有该游戏的桌子数量
        TableUUID = 1 ,     -- tableUid 从1开始

        --GoRunTableAllList = {},   -- 桌子的run函数在里面                --- 要注意， key 不能用数字，因为占用内存太大， goperlua的问题
        GameScore = 0 ,     --  游戏倍率
        AllCurrentGamePlayerNumber = 0 ,       -- 当前游戏的玩家数量
    }
    setmetatable(c,self)
    self.__index = self
    return c
end

function Game:Reload(c)
    setmetatable(c, self)
    self.__index = self
    -- 如果热更新有改动成员变量的定义的话， 下面需要进行成员变量的处理
    -- 比如 1 增加了字段， 那么你需要将老数据进行， 新字段的初始化
    -- 比如 2 删除了字段， 那么你需要将老数据进行， 老字段=nil
    -- 比如 3 修改了字段， 那么你需要将老数据进行， 老字段=nil， 新字段初始化或者进行赋值处理
end
----------------------------------------------------------------
-----------------------------管理桌子---------------------------
----------------------------------------------------------------

--- 创建桌子，并启动它， 参数带底分的， 不同底分的房间可以在一起管理，因为逻辑一样的，进入的时候判断一下，引导玩家进入不同底分的桌子
function Game:CreateTable(gameType,gameScore)
    local table_t
    if gameType == GameTypeBY or gameType == GameTypeBY30 then
        --table_t =  ByTable:New(self.TableUUID, gameType)        --捕鱼的桌子
        --printTable(table_t)
    elseif gameType == GameTypeBY2 then

    elseif gameType == GameTypeBY3 then


    -- 推币系列
    elseif gameType == GameTypeTB10 or gameType == GameTypeTB100 or gameType == GameTypeTB1000 or gameType == GameTypeTB10000 then
        table_t =  TbTable:New(self.TableUUID, gameType)    -- 推币的桌子
    end

    if table_t == nil then
        Logger("CreateTable error , gameType"..gameType)
        return nil
    end
    table_t.RoomScore = gameScore
--    Logger("创建了一个新的桌子,type:"..gameType)

    --增加该桌子到总列表中
    self.AllTableList[tostring(self.TableUUID)] = table_t
    self.AllTableListNumber = self.AllTableListNumber + 1
    self.TableUUID = self.TableUUID + 1     -- table uuid 自增

    -- 桌子开始自行启动计算
    table_t:StartTable()

    return table_t

end

--- 根据桌子uid 返回桌子的句柄
function Game:GetTableByUID(tableId)
    return self.AllTableList[tostring(tableId)]
end

--- 桌子回收
function Game:ReleaseTableByUID(tableId)
    if tableId ~= 1 then
        self.AllTableList[tostring(tableId)] = nil
        self.AllTableListNumber = self.AllTableListNumber - 1
        --self.GoRunTableAllList[tostring(tableId)] = nil
        SqlDelGameState(self.GameTypeID, tableId)   -- 把记录桌子状态的redis删掉
        Logger("清理掉桌子"..tableId)
    else
        -- 第一个桌子是保留着的，只是清理一下

        -- 如果是空桌子，是不更新桌子状态的，所以最后一个玩家离开的时候，更新最后一次
        local gameTable = self:GetTableByUID(tableId)
        local state ={}
        state["PoolAll"] = gameTable.PoolAllScore
        state["Jackpot"] = gameTable.JackpotAll
        state["SeatArray"] = 0
        state["RewardRate"] =  gameTable:GetRewardRate()
        SqlSaveGameState(self.GameTypeID, tableId, state)       -- mysql桌子状态修改一下
    end
    collectgarbage()        -- 强制gc
end


----- 然后注册TableRun
--function Game:FindGoRoutineAndRegisterTableRun(tableId,func)
--    self.GoRunTableAllList[tostring(tableId)] = func  --注册TableRun函数
--end


----------------------------------------------------------------
-----------------------------管理玩家---------------------------
----------------------------------------------------------------


--- 有玩家登陆游戏，想进入对应分数的房间
function Game:PlayerLoginGame(player)

    self.AllCurrentGamePlayerNumber = self.AllCurrentGamePlayerNumber + 1   -- 当前游戏在线玩家数量增加

    --然后找一个有空位的桌子让玩家加入游戏
    for TableUUID, table in pairs(self.AllTableList) do
        if table.RoomScore == self.GameScore then    -- 进入底分一致的桌子
            local seatId = table:GetEmptySeatInTable()
            if seatId > 0 then
                --print("有空座位")
                table:InitTable()    -- 看看是不是空桌子，如果是，需要初始化
                table:PlayerSeat(seatId,player)
                player.TableID = table.TableID
                player.ChairID = seatId

                --self:SendYouLoginToOthers(player,table)-- 发消息给同桌子的其他玩家，告诉他们你登录了
                return player
            end
        else
            Logger("有底分不一致的情况？".. TableUUID)
        end
    end

    --没有空座位的房间了，创建一个
--    print("没有空座位的房间了，创建一个吧,  score".. self.GameTypeID)
    local gameType = self.AllTableList["1"].GameID
    local table = self:CreateTable(gameType, self.GameScore)
    local seatId = table:GetEmptySeatInTable()  --获取空椅位
    table:InitTable()
    table:PlayerSeat(seatId,player)     --让玩家坐下.
    player.TableID = table.TableID
    player.ChairID = seatId
    --self:SendYouLoginToOthers(player,table)-- 发消息给同桌子的其他玩家，告诉他们你登录了
    return player

end


--- 发消息给同桌子的其他玩家，告诉他们你登录了
function Game:SendYouLoginToOthers(player,table)
--    print("玩家",player.User.UserId, "桌子",table.TableID,"椅子",player.ChairID)

    local sendCmd = CMD_Game_pb.CMD_S_OTHER_ENTER_SCENE()
    sendCmd.user_info.user_id = player.User.UserId
    sendCmd.user_info.chair_id = player.ChairID
    sendCmd.user_info.table_id = player.TableID
    table:SendMsgToOtherUsers(player.User.UserId, sendCmd, MDM_GF_GAME, SUB_S_OTHER_ENTER_SCENE)
end



----玩家登出
function Game:PlayerLogOutGame(player)
    --Logger("玩家登出 "..player.User.UserId.. "    桌子 "..player.TableID)
    local table = self:GetTableByUID(player.TableID)
    if table ~= nil then
        table:PlayerStandUp(player.ChairID, player)        -- 玩家离开桌子
        self.AllCurrentGamePlayerNumber = self.AllCurrentGamePlayerNumber - 1   -- 当前游戏在线玩家数量减少
        --Logger("玩家"..player.User.UserId.."离开桌子 "..player.TableID.."椅子"..player.ChairID)
    end
end
