---
--- Generated by EmmyLua(https:--github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/11/2 16:18
---
--------------------------------------------------------------------------------------
--- User 的数据是玩家的游戏中永久数据，需要保存的数据
------ 这里直接定义成员变量， 但是不写成员函数， 这样不用reload
--------------------------------------------------------------------------------------

User = {}
function User:New(uid,openId)
    local c = {
        UserId = uid, --  # 用户id
        OpenId = openId,  -- # 玩家的渠道账号，或者mac地址
        GameId = 0, --  # 游戏id

        FaceId = 0, -- # 头像id
        Gender = 0, --  # 性别
        Exp = 0, --  # 经验
        Loveliness = 0, --  # 魅力
        NickName = "玩家"..uid, --  # 昵称
        Level = 1, --  # 等级
        AccountLevel = 0, --  # 账号等级
        SiteLevel = 0, --  # 炮等级
        CurLevelExp = 0, --  # 当前等级经验
        NextLevelExp = 0, --  # 下一等级经验
        Diamond = 0, --  # 钻石数量


        -- Vip类
        VipLevel = 7, --  # vip等级
        PayTotal = 0, --  # 充值总金额
        VipDoleGetTime = "",    -- 最后一次领取金币时间


        -- 金币类
        GoldRemainTable10 = 0, --台面剩余小金币数量
        GoldRemainTable100 = 0, --台面剩余小金币数量
        GoldRemainTable1000 = 0, --台面剩余小金币数量
        GoldRemainTable10000 = 0, --台面剩余小金币数量

        GoldBigCoinUUID = 0, -- 大金币UUID

        GoldBigCoinList10 = {},  --  大金币的列表              key : coinId   value: {}  dwValue , eBigCoinType, llLotteryValue， 注意，table 的 key 不能是数字，因为占内存
        GoldBigCoinList100 = {},  --  大金币的列表              key : coinId   value: {}  dwValue , eBigCoinType, llLotteryValue， 注意，table 的 key 不能是数字，因为占内存
        GoldBigCoinList1000 = {},  --  大金币的列表              key : coinId   value: {}  dwValue , eBigCoinType, llLotteryValue， 注意，table 的 key 不能是数字，因为占内存
        GoldBigCoinList10000 = {},  --  大金币的列表              key : coinId   value: {}  dwValue , eBigCoinType, llLotteryValue， 注意，table 的 key 不能是数字，因为占内存


        --llSmallAwardPool = 0 ,      -- 小奖池

        -- 奖券类
        Lottery = 0,		-- 玩家奖券数量
        LotteryPool = LotteryPoolInit ,   -- 玩家奖券的库存， 充值增加库存， 获得奖券之后，库存减少
        LotteryCoinUUID = 0 ,  -- 奖券UUID
        LotteryCoinList = {},    -- 这里保存的奖券列表      key : coinId   value: coinType   ， 注意，table 的 key 不能是数字，因为占内存

        -- 幸运轮盘类
        LuckyWheelNum = 0 ,     -- 可以转轮盘的次数
        LuckyWheelTime = "",    -- 上次转轮盘的时间

        -- 邮件类
        MailList = {} , -- 这里保存玩家的邮件列表, key 是 uuid 是邮件的唯一编码的字符串，value是 type 分别是邮件的 普通状态，已经领取状态， 删除状态

        -- 签到类
        SignInLastTime = "" ,   -- 最后一次签到时间
        SignInIndex = 0 ,       -- 已经签到的位置
        SignInAllTimes = 0 ,   -- 连续签到次数

        -- 整点领取金币
        GoldByClockLastTime = "" ,  -- 最后一次领取金币时间
        GoldByClockRecordList = {},  -- 保存领取金币的记录


        -- 分数
        Score = 9000, --  # 分数
        ScorePoolPerson = 0 ,  -- 个人的库存值


        -- 统计总数
        TaxTotal = 0,   -- 总税收
        StatisticAllPlayerCostScore = 0, --总下注
        StatisticAllPlayerCostCoin = 0, --总投币数
        TotalWinScore = 0, --总赢的分数
        TotalWinLottery = 0, --总赢的奖券


        -- 统计充值类
        RechargeAllRMB = 0 ,  -- 总充值RMB金额
        RechargeLastTime = "", -- 最近充值时间

        -- 统计分数类
        ScoreByRecharge = 0,    -- 充值获得的分数
        ScoreByActivity = 0 ,   -- 活动获得的分数
        ScoreByGift = 0 ,   -- 后台赠送的分数

        -- 统计奖券类
        LotteryByRecharge = 0 ,   -- 充值获得的奖券
        LotteryByActivity = 0 ,   -- 活动获得的奖券
        LotteryByGift = 0 ,   -- 后台赠送的奖券

        -- 统计时间类
        TimeCreateAccount = "",  -- 创建时间
        TimeLastLogin    = "",  -- 最后一次登录时间
        TimeLastLogout   =  "",  -- 最后一次离线时间


        --iGetAlmsCount = 0, --获取救济金次数
        --llGetAlmsScore = 0, --获取救济金总分数
        --llLastGetAlmsTime = 0, --最后获取救济金时间
        --iGetRedEnvelopeCount = 0, --红包次数
        --
        --llChipInCount = 0, --下注总数
        --llQValueMax = 0, --竞技赛最高积分

        -- 黑名单
        ConfineLevel   = 0,     -- 用户的限制等级， 黑名单用
        cbConfineLottery = 0 ,  -- 用户限制不能得奖券
    }
    --printTable(c)

    setmetatable(c, self)
    self.__index = self
    return c
end


function User:Reload(c)
    setmetatable(c, self)
    self.__index = self

    -- 如果热更新有改动成员变量的定义的话， 下面需要进行成员变量的处理
    -- 比如 1 增加了字段， 那么你需要将老数据进行， 新字段的初始化
    -- 比如 2 删除了字段， 那么你需要将老数据进行， 老字段=nil
    -- 比如 3 修改了字段， 那么你需要将老数据进行， 老字段=nil， 新字段初始化或者进行赋值处理
end


