// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CMD_BSMC_Game.CMD

/*
Package CMD_BSMC is a generated protocol buffer package.

Namespace: MESSAGE

It is generated from these files:
	CMD_BSMC_Game.CMD

It has these top-level messages:
	CMD_SUB_S_CONFIG
	CMD_UserInfo_S
	CMD_GameInfo_S
	CMD_SUB_C_BET
	MSG_DropGemInfo
	MSG_GemLink
	MSG_GemLinks
	MSG_GemData
	CMD_SUB_S_BET
	CMD_SUB_C_AWARD
	MSG_AWARD
	CMD_SUB_S_AWARD
	CMD_SysMessage_S
*/
package CMD_BSMC

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the CMD package it is being compiled against.
// A compilation error at this line likely means your copy of the
// CMD package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the CMD package

// 游戏配置数据
type CMD_SUB_S_CONFIG struct {
	// 下注金额列表
	CoinList []int32 `protobuf:"varint,1,rep,name=coin_list,json=coinList" json:"coin_list,omitempty"`
	// 每关的砖数量
	BrickList        []int32 `protobuf:"varint,2,rep,name=brick_list,json=brickList" json:"brick_list,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SUB_S_CONFIG) Reset()                    { *m = CMD_SUB_S_CONFIG{} }
func (m *CMD_SUB_S_CONFIG) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_S_CONFIG) ProtoMessage()               {}
func (*CMD_SUB_S_CONFIG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CMD_SUB_S_CONFIG) GetCoinList() []int32 {
	if m != nil {
		return m.CoinList
	}
	return nil
}

func (m *CMD_SUB_S_CONFIG) GetBrickList() []int32 {
	if m != nil {
		return m.BrickList
	}
	return nil
}

// 用户基本信息
type CMD_UserInfo_S struct {
	// 当前金币数量
	Score            *int64 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	NickName         []byte `protobuf:"bytes,2,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_UserInfo_S) Reset()                    { *m = CMD_UserInfo_S{} }
func (m *CMD_UserInfo_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_UserInfo_S) ProtoMessage()               {}
func (*CMD_UserInfo_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CMD_UserInfo_S) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMD_UserInfo_S) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

// 游戏数据
type CMD_GameInfo_S struct {
	// 当前关卡,level 从 0开始(0,1,2) 当level>= 3表示通关,应该进入抽奖环节
	Level *int32 `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	// 当前关卡剩余的砖数
	Brick *int32 `protobuf:"varint,2,opt,name=brick" json:"brick,omitempty"`
	// 个人奖池
	PrivatePrizePool *int32 `protobuf:"varint,3,opt,name=private_prize_pool,json=privatePrizePool" json:"private_prize_pool,omitempty"`
	// 个人奖池上限
	PrivatePrizePoolUp *int32 `protobuf:"varint,4,opt,name=private_prize_pool_up,json=privatePrizePoolUp" json:"private_prize_pool_up,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *CMD_GameInfo_S) Reset()                    { *m = CMD_GameInfo_S{} }
func (m *CMD_GameInfo_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_GameInfo_S) ProtoMessage()               {}
func (*CMD_GameInfo_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CMD_GameInfo_S) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMD_GameInfo_S) GetBrick() int32 {
	if m != nil && m.Brick != nil {
		return *m.Brick
	}
	return 0
}

func (m *CMD_GameInfo_S) GetPrivatePrizePool() int32 {
	if m != nil && m.PrivatePrizePool != nil {
		return *m.PrivatePrizePool
	}
	return 0
}

func (m *CMD_GameInfo_S) GetPrivatePrizePoolUp() int32 {
	if m != nil && m.PrivatePrizePoolUp != nil {
		return *m.PrivatePrizePoolUp
	}
	return 0
}

// 下注
type CMD_SUB_C_BET struct {
	BetScore         *int32 `protobuf:"varint,1,opt,name=bet_score,json=betScore" json:"bet_score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_SUB_C_BET) Reset()                    { *m = CMD_SUB_C_BET{} }
func (m *CMD_SUB_C_BET) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_C_BET) ProtoMessage()               {}
func (*CMD_SUB_C_BET) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CMD_SUB_C_BET) GetBetScore() int32 {
	if m != nil && m.BetScore != nil {
		return *m.BetScore
	}
	return 0
}

// 掉落的宝石信息
type MSG_DropGemInfo struct {
	// 列
	Col *int32 `protobuf:"varint,1,opt,name=col" json:"col,omitempty"`
	// 宝石id
	GemId            *int32 `protobuf:"varint,2,opt,name=gem_id,json=gemId" json:"gem_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MSG_DropGemInfo) Reset()                    { *m = MSG_DropGemInfo{} }
func (m *MSG_DropGemInfo) String() string            { return proto.CompactTextString(m) }
func (*MSG_DropGemInfo) ProtoMessage()               {}
func (*MSG_DropGemInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MSG_DropGemInfo) GetCol() int32 {
	if m != nil && m.Col != nil {
		return *m.Col
	}
	return 0
}

func (m *MSG_DropGemInfo) GetGemId() int32 {
	if m != nil && m.GemId != nil {
		return *m.GemId
	}
	return 0
}

// 宝石消除链条
type MSG_GemLink struct {
	GemId *int32 `protobuf:"varint,1,opt,name=gem_id,json=gemId" json:"gem_id,omitempty"`
	// 获得积分
	Score *int32 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	// 消除位置
	PosList          []int32 `protobuf:"varint,3,rep,name=pos_list,json=posList" json:"pos_list,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MSG_GemLink) Reset()                    { *m = MSG_GemLink{} }
func (m *MSG_GemLink) String() string            { return proto.CompactTextString(m) }
func (*MSG_GemLink) ProtoMessage()               {}
func (*MSG_GemLink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MSG_GemLink) GetGemId() int32 {
	if m != nil && m.GemId != nil {
		return *m.GemId
	}
	return 0
}

func (m *MSG_GemLink) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *MSG_GemLink) GetPosList() []int32 {
	if m != nil {
		return m.PosList
	}
	return nil
}

// 一次宝石消除数据,可能包含多组
type MSG_GemLinks struct {
	Score            *int32         `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	Links            []*MSG_GemLink `protobuf:"bytes,2,rep,name=links" json:"links,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *MSG_GemLinks) Reset()                    { *m = MSG_GemLinks{} }
func (m *MSG_GemLinks) String() string            { return proto.CompactTextString(m) }
func (*MSG_GemLinks) ProtoMessage()               {}
func (*MSG_GemLinks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MSG_GemLinks) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *MSG_GemLinks) GetLinks() []*MSG_GemLink {
	if m != nil {
		return m.Links
	}
	return nil
}

// 宝石阵列数据
type MSG_GemData struct {
	// 下注金币数量
	BetScore *int32 `protobuf:"varint,1,opt,name=bet_score,json=betScore" json:"bet_score,omitempty"`
	// 阵列尺寸,nSize*nSize
	Size *int32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	// 本次获得总计分
	GetScore *int32 `protobuf:"varint,3,opt,name=get_score,json=getScore" json:"get_score,omitempty"`
	// 初始阵列数据,长度为size*szie
	InitData []int32 `protobuf:"varint,4,rep,name=init_data,json=initData" json:"init_data,omitempty"`
	// 所有消除记录
	Links []*MSG_GemLinks `protobuf:"bytes,5,rep,name=links" json:"links,omitempty"`
	// 本次需要的掉落宝石列表
	Drops            []*MSG_DropGemInfo `protobuf:"bytes,6,rep,name=drops" json:"drops,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *MSG_GemData) Reset()                    { *m = MSG_GemData{} }
func (m *MSG_GemData) String() string            { return proto.CompactTextString(m) }
func (*MSG_GemData) ProtoMessage()               {}
func (*MSG_GemData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MSG_GemData) GetBetScore() int32 {
	if m != nil && m.BetScore != nil {
		return *m.BetScore
	}
	return 0
}

func (m *MSG_GemData) GetSize() int32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *MSG_GemData) GetGetScore() int32 {
	if m != nil && m.GetScore != nil {
		return *m.GetScore
	}
	return 0
}

func (m *MSG_GemData) GetInitData() []int32 {
	if m != nil {
		return m.InitData
	}
	return nil
}

func (m *MSG_GemData) GetLinks() []*MSG_GemLinks {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *MSG_GemData) GetDrops() []*MSG_DropGemInfo {
	if m != nil {
		return m.Drops
	}
	return nil
}

// 下注结果
type CMD_SUB_S_BET struct {
	// 下注结果,true-下注成功,false-下注失败,失败原因通过err_msg返回
	Result *bool `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	// 下注失败原因,金币不足?
	ErrMsg []byte `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	// 下注成功后的宝石数据
	Data *MSG_GemData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	// 个人奖池
	PrivatePrizePool *int32 `protobuf:"varint,4,opt,name=private_prize_pool,json=privatePrizePool" json:"private_prize_pool,omitempty"`
	// 消息类型 （ 0-普通消息 ）
	SysType          *uint32 `protobuf:"varint,5,opt,name=sys_type,json=sysType" json:"sys_type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SUB_S_BET) Reset()                    { *m = CMD_SUB_S_BET{} }
func (m *CMD_SUB_S_BET) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_S_BET) ProtoMessage()               {}
func (*CMD_SUB_S_BET) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CMD_SUB_S_BET) GetResult() bool {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return false
}

func (m *CMD_SUB_S_BET) GetErrMsg() []byte {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *CMD_SUB_S_BET) GetData() *MSG_GemData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CMD_SUB_S_BET) GetPrivatePrizePool() int32 {
	if m != nil && m.PrivatePrizePool != nil {
		return *m.PrivatePrizePool
	}
	return 0
}

func (m *CMD_SUB_S_BET) GetSysType() uint32 {
	if m != nil && m.SysType != nil {
		return *m.SysType
	}
	return 0
}

// 通关请求摇奖
type CMD_SUB_C_AWARD struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_SUB_C_AWARD) Reset()                    { *m = CMD_SUB_C_AWARD{} }
func (m *CMD_SUB_C_AWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_C_AWARD) ProtoMessage()               {}
func (*CMD_SUB_C_AWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// 奖品结构体
type MSG_AWARD struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Count            *int32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MSG_AWARD) Reset()                    { *m = MSG_AWARD{} }
func (m *MSG_AWARD) String() string            { return proto.CompactTextString(m) }
func (*MSG_AWARD) ProtoMessage()               {}
func (*MSG_AWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MSG_AWARD) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MSG_AWARD) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// 通关请求摇奖数据
type CMD_SUB_S_AWARD struct {
	Result           *bool        `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ErrMsg           []byte       `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	AwardIdx         *int32       `protobuf:"varint,3,opt,name=award_idx,json=awardIdx" json:"award_idx,omitempty"`
	Awards           []*MSG_AWARD `protobuf:"bytes,4,rep,name=awards" json:"awards,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CMD_SUB_S_AWARD) Reset()                    { *m = CMD_SUB_S_AWARD{} }
func (m *CMD_SUB_S_AWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_S_AWARD) ProtoMessage()               {}
func (*CMD_SUB_S_AWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CMD_SUB_S_AWARD) GetResult() bool {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return false
}

func (m *CMD_SUB_S_AWARD) GetErrMsg() []byte {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *CMD_SUB_S_AWARD) GetAwardIdx() int32 {
	if m != nil && m.AwardIdx != nil {
		return *m.AwardIdx
	}
	return 0
}

func (m *CMD_SUB_S_AWARD) GetAwards() []*MSG_AWARD {
	if m != nil {
		return m.Awards
	}
	return nil
}

type CMD_SysMessage_S struct {
	SysType          *uint32 `protobuf:"varint,1,opt,name=sys_type,json=sysType" json:"sys_type,omitempty"`
	SysMessage       []byte  `protobuf:"bytes,2,opt,name=sys_message,json=sysMessage" json:"sys_message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SysMessage_S) Reset()                    { *m = CMD_SysMessage_S{} }
func (m *CMD_SysMessage_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_SysMessage_S) ProtoMessage()               {}
func (*CMD_SysMessage_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CMD_SysMessage_S) GetSysType() uint32 {
	if m != nil && m.SysType != nil {
		return *m.SysType
	}
	return 0
}

func (m *CMD_SysMessage_S) GetSysMessage() []byte {
	if m != nil {
		return m.SysMessage
	}
	return nil
}

func init() {
	proto.RegisterType((*CMD_SUB_S_CONFIG)(nil), "CMD_BSMC.CMD_SUB_S_CONFIG")
	proto.RegisterType((*CMD_UserInfo_S)(nil), "CMD_BSMC.CMD_UserInfo_S")
	proto.RegisterType((*CMD_GameInfo_S)(nil), "CMD_BSMC.CMD_GameInfo_S")
	proto.RegisterType((*CMD_SUB_C_BET)(nil), "CMD_BSMC.CMD_SUB_C_BET")
	proto.RegisterType((*MSG_DropGemInfo)(nil), "CMD_BSMC.MSG_DropGemInfo")
	proto.RegisterType((*MSG_GemLink)(nil), "CMD_BSMC.MSG_GemLink")
	proto.RegisterType((*MSG_GemLinks)(nil), "CMD_BSMC.MSG_GemLinks")
	proto.RegisterType((*MSG_GemData)(nil), "CMD_BSMC.MSG_GemData")
	proto.RegisterType((*CMD_SUB_S_BET)(nil), "CMD_BSMC.CMD_SUB_S_BET")
	proto.RegisterType((*CMD_SUB_C_AWARD)(nil), "CMD_BSMC.CMD_SUB_C_AWARD")
	proto.RegisterType((*MSG_AWARD)(nil), "CMD_BSMC.MSG_AWARD")
	proto.RegisterType((*CMD_SUB_S_AWARD)(nil), "CMD_BSMC.CMD_SUB_S_AWARD")
	proto.RegisterType((*CMD_SysMessage_S)(nil), "CMD_BSMC.CMD_SysMessage_S")
}

func init() { proto.RegisterFile("CMD_BSMC_Game.CMD", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdb, 0x4e, 0xdb, 0x4c,
	0x10, 0x96, 0x93, 0x38, 0x38, 0x13, 0x4e, 0xff, 0xf2, 0x43, 0x8d, 0x50, 0xd5, 0xc8, 0x57, 0xa9,
	0x40, 0x54, 0x70, 0xd9, 0x3b, 0x92, 0xb4, 0x69, 0x24, 0x42, 0xe9, 0x9a, 0xa8, 0x97, 0x2b, 0x13,
	0x6f, 0xad, 0x15, 0xb6, 0xd7, 0xda, 0x75, 0x28, 0xe1, 0x19, 0xfa, 0x0a, 0x7d, 0x8b, 0xbe, 0x4b,
	0x5f, 0xa7, 0xda, 0xb1, 0x9d, 0x43, 0x0b, 0x95, 0x7a, 0xb7, 0x33, 0xf3, 0x7d, 0x73, 0xfa, 0x46,
	0x0b, 0x7b, 0xfd, 0xf1, 0x80, 0xf5, 0xfc, 0x71, 0x9f, 0x0d, 0x83, 0x84, 0x9f, 0x66, 0x4a, 0xe6,
	0x92, 0x38, 0x95, 0xd3, 0xbb, 0x82, 0x5d, 0xf3, 0xf6, 0x27, 0x3d, 0xe6, 0xb3, 0xfe, 0xc7, 0xab,
	0xf7, 0xa3, 0x21, 0x39, 0x82, 0xd6, 0x54, 0x8a, 0x94, 0xc5, 0x42, 0xe7, 0xae, 0xd5, 0xa9, 0x77,
	0x6d, 0xea, 0x18, 0xc7, 0xa5, 0xd0, 0x39, 0x79, 0x09, 0x70, 0xab, 0xc4, 0xf4, 0xae, 0x88, 0xd6,
	0x30, 0xda, 0x42, 0x8f, 0x09, 0x7b, 0x7d, 0xd8, 0x36, 0xf9, 0x26, 0x9a, 0xab, 0x51, 0xfa, 0x45,
	0x32, 0x9f, 0xfc, 0x0f, 0xb6, 0x9e, 0x4a, 0xc5, 0x5d, 0xab, 0x63, 0x75, 0xeb, 0xb4, 0x30, 0x4c,
	0x8d, 0xd4, 0x64, 0x49, 0x83, 0x84, 0xbb, 0xb5, 0x8e, 0xd5, 0xdd, 0xa4, 0x8e, 0x71, 0x5c, 0x05,
	0x09, 0xf7, 0xbe, 0x5b, 0x45, 0x16, 0xd3, 0xf1, 0x32, 0x4b, 0xcc, 0xef, 0x79, 0x8c, 0x59, 0x6c,
	0x5a, 0x18, 0xc6, 0x8b, 0xa5, 0x31, 0x83, 0x4d, 0x0b, 0x83, 0x9c, 0x00, 0xc9, 0x94, 0xb8, 0x0f,
	0x72, 0xce, 0x32, 0x25, 0x1e, 0x39, 0xcb, 0xa4, 0x8c, 0xdd, 0x3a, 0x42, 0x76, 0xcb, 0xc8, 0xb5,
	0x09, 0x5c, 0x4b, 0x19, 0x93, 0x33, 0xd8, 0xff, 0x13, 0xcd, 0x66, 0x99, 0xdb, 0x40, 0x02, 0xf9,
	0x9d, 0x30, 0xc9, 0xbc, 0x13, 0xd8, 0xaa, 0x96, 0xd6, 0x67, 0xbd, 0x77, 0x37, 0x66, 0x9a, 0x5b,
	0x9e, 0xb3, 0xe5, 0x9c, 0x36, 0x75, 0x6e, 0x79, 0xee, 0x1b, 0xdb, 0x7b, 0x0b, 0x3b, 0x63, 0x7f,
	0xc8, 0x06, 0x4a, 0x66, 0x43, 0x9e, 0x98, 0x79, 0xc8, 0x2e, 0xd4, 0xa7, 0xb2, 0x9a, 0xc5, 0x3c,
	0xc9, 0x3e, 0x34, 0x23, 0x9e, 0x30, 0x11, 0x56, 0xa3, 0x44, 0x3c, 0x19, 0x85, 0xde, 0x04, 0xda,
	0x86, 0x3b, 0xe4, 0xc9, 0xa5, 0x48, 0xef, 0x56, 0x50, 0xd6, 0x0a, 0x6a, 0xb9, 0xe2, 0x92, 0x5b,
	0xac, 0xf8, 0x10, 0x9c, 0x4c, 0xea, 0x42, 0xa7, 0x3a, 0xea, 0xb4, 0x91, 0x49, 0x8d, 0x2a, 0x7d,
	0x82, 0xcd, 0x95, 0xb4, 0x7a, 0x5d, 0xa3, 0x45, 0x82, 0x63, 0xb0, 0x63, 0x13, 0x46, 0x95, 0xdb,
	0xe7, 0xfb, 0xa7, 0xd5, 0xd5, 0x9c, 0xae, 0x90, 0x69, 0x81, 0xf1, 0x7e, 0x5a, 0x8b, 0x56, 0x07,
	0x41, 0x1e, 0xfc, 0x75, 0x25, 0x84, 0x40, 0x43, 0x8b, 0xc7, 0xaa, 0x5f, 0x7c, 0x1b, 0x42, 0xb4,
	0x20, 0x14, 0x62, 0x39, 0x51, 0x45, 0x38, 0x82, 0x96, 0x48, 0x45, 0xce, 0xc2, 0x20, 0x0f, 0xdc,
	0x46, 0x71, 0x92, 0xc6, 0x81, 0xa5, 0x4e, 0xaa, 0x3e, 0x6d, 0xec, 0xf3, 0xe0, 0xc9, 0x3e, 0x75,
	0xd9, 0x28, 0x79, 0x03, 0x76, 0xa8, 0x64, 0xa6, 0xdd, 0x26, 0xa2, 0x0f, 0xd7, 0xd1, 0x2b, 0x2a,
	0xd1, 0x02, 0xe7, 0xfd, 0xb0, 0x96, 0x72, 0xfb, 0x28, 0xf7, 0x01, 0x34, 0x15, 0xd7, 0xb3, 0x38,
	0xc7, 0xc1, 0x1c, 0x5a, 0x5a, 0xe4, 0x05, 0x6c, 0x70, 0xa5, 0x58, 0xa2, 0xa3, 0xf2, 0xa4, 0x9b,
	0x5c, 0xa9, 0xb1, 0x8e, 0xc8, 0x6b, 0x68, 0x60, 0xe7, 0x66, 0xac, 0xa7, 0x16, 0x69, 0xc6, 0xa0,
	0x08, 0x79, 0xe6, 0x78, 0x1b, 0xcf, 0x1c, 0xef, 0x21, 0x38, 0x7a, 0xae, 0x59, 0x3e, 0xcf, 0xb8,
	0x6b, 0x77, 0xac, 0xee, 0x16, 0xdd, 0xd0, 0x73, 0x7d, 0x33, 0xcf, 0xb8, 0xf7, 0x1f, 0xec, 0x2c,
	0x8f, 0xf4, 0xe2, 0xf3, 0x05, 0x1d, 0x78, 0x67, 0xd0, 0x32, 0x05, 0xd1, 0x20, 0xdb, 0x50, 0x5b,
	0xdc, 0x51, 0x4d, 0xe0, 0x11, 0x4d, 0xe5, 0x2c, 0xcd, 0xab, 0x23, 0x42, 0xc3, 0xfb, 0x66, 0x2d,
	0xd3, 0xf8, 0x25, 0xf3, 0x9f, 0xc7, 0x3f, 0x82, 0x56, 0xf0, 0x35, 0x50, 0x21, 0x13, 0xe1, 0x43,
	0x25, 0x2d, 0x3a, 0x46, 0xe1, 0x03, 0x39, 0x86, 0x26, 0xbe, 0x35, 0xea, 0xda, 0x3e, 0xdf, 0x5b,
	0xdf, 0x0e, 0x96, 0xa4, 0x25, 0x64, 0xf1, 0x5d, 0xcd, 0xf5, 0x98, 0x6b, 0x1d, 0x44, 0x9c, 0xf9,
	0x6b, 0x3b, 0xb0, 0xd6, 0x76, 0x40, 0x5e, 0x41, 0xdb, 0x84, 0x92, 0x02, 0x5b, 0x76, 0x05, 0x7a,
	0xc1, 0xee, 0xd5, 0x3e, 0xd4, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x3d, 0x4f, 0x7d, 0x22,
	0x05, 0x00, 0x00,
}
