// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CMD_GlobalServer_Inner.proto

/*
Package CMD_GLOBAL is a generated protocol buffer package.

Namespace: MESSAGE

It is generated from these files:
	CMD_GlobalServer_Inner.proto

It has these top-level messages:
	CMD_C_UP_WORLD_BOSS_HURT
	WorldBossAttacker
	CMD_C_UP_WORLD_BOSS_ATTACKER
	CMD_S_UP_WORLD_BOSS_ACTIVE_ATTACKER
	CMD_SS_WORLD_BOSS_ACTIVITY_INFO
	CMD_SS_CUR_WORLD_BOSS_INFO
	CMD_SS_WORLD_BOSS_DO_SKILL
	CMD_SS_CALL_FISH_MONSTER
	CMD_SS_STOP_PLAYER_TIME
	CMD_SS_WEANKEN_PLAYER_TIME
	CMD_SS_BOSS_SKILL_SHIELD_VALUE
	CMD_SS_EXPOSE_WEAKNESS
	CMD_SS_CLASSIC_PRIZE_POOL_UPDATE_CONTROL_INFO
	CMD_C_ADD_CLASSIC_PRIZE_POOL
	CMD_SC_REGISTER
	CMD_SS_REGISTER
	CMD_SC_PUSH_TOKEN
	CMD_SC_UPDATE_USER_INFO
	CMD_SC_TOKEN_USER_INFO
	FantasyLotteryInfo
	CMD_C_FANTASY_DROP_LOTTERY
	CMD_S_FANTASY_LOTTERY_LIST
	CMD_SS_FANTASY_LOTTERY_ACTIVITY_INFO
	RoomTaskFish
	RoomTask
	CMD_SS_ROOM_TASK_START
	CMD_SS_WEAK_STATUS_END
	RoomOnlineCount
	CMD_L2C_OnlineInfo
	CMD_C_RequestEnter
	CMD_S_RequestEnter
	CMD_C_UserEnter
	CMD_C_UserEnter_Fail
	CMD_C_UserLeave
	CMD_C_UserOffline
	GlobalUserState
	CMD_C_SYNC_USERSTATE
	CMD_C_KICKUSER
	CMD_C_KICKUSER_RESP
	CMD_SS_LOGIN_SERVER_LOCK
	CMD_SS_REDIRECT_CONNECT
	ServerInfo
	CMD_SC_ONE_SERVER_INOUT
	CMD_SC_SYNC_SERVER_LIST
	CMD_SC_C_SYNC_USER_STATE
	CMD_SC_S_SYNC_USER_STATE
*/
package CMD_GLOBAL

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
//import CMD_GLOBAL1 "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CMD_C_UP_WORLD_BOSS_HURT_WorldBossName int32

const (
	CMD_C_UP_WORLD_BOSS_HURT_WBN_SIREN    CMD_C_UP_WORLD_BOSS_HURT_WorldBossName = 0
	CMD_C_UP_WORLD_BOSS_HURT_WBN_POSEIDON CMD_C_UP_WORLD_BOSS_HURT_WorldBossName = 1
)

var CMD_C_UP_WORLD_BOSS_HURT_WorldBossName_name = map[int32]string{
	0: "WBN_SIREN",
	1: "WBN_POSEIDON",
}
var CMD_C_UP_WORLD_BOSS_HURT_WorldBossName_value = map[string]int32{
	"WBN_SIREN":    0,
	"WBN_POSEIDON": 1,
}

func (x CMD_C_UP_WORLD_BOSS_HURT_WorldBossName) Enum() *CMD_C_UP_WORLD_BOSS_HURT_WorldBossName {
	p := new(CMD_C_UP_WORLD_BOSS_HURT_WorldBossName)
	*p = x
	return p
}
func (x CMD_C_UP_WORLD_BOSS_HURT_WorldBossName) String() string {
	return proto.EnumName(CMD_C_UP_WORLD_BOSS_HURT_WorldBossName_name, int32(x))
}
func (x *CMD_C_UP_WORLD_BOSS_HURT_WorldBossName) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_C_UP_WORLD_BOSS_HURT_WorldBossName_value, data, "CMD_C_UP_WORLD_BOSS_HURT_WorldBossName")
	if err != nil {
		return err
	}
	*x = CMD_C_UP_WORLD_BOSS_HURT_WorldBossName(value)
	return nil
}
func (CMD_C_UP_WORLD_BOSS_HURT_WorldBossName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type CMD_SC_TOKEN_USER_INFO_UserInfoType int32

const (
	CMD_SC_TOKEN_USER_INFO_UIT_FACEID CMD_SC_TOKEN_USER_INFO_UserInfoType = 0
	CMD_SC_TOKEN_USER_INFO_UIT_VIPLV  CMD_SC_TOKEN_USER_INFO_UserInfoType = 1
)

var CMD_SC_TOKEN_USER_INFO_UserInfoType_name = map[int32]string{
	0: "UIT_FACEID",
	1: "UIT_VIPLV",
}
var CMD_SC_TOKEN_USER_INFO_UserInfoType_value = map[string]int32{
	"UIT_FACEID": 0,
	"UIT_VIPLV":  1,
}

func (x CMD_SC_TOKEN_USER_INFO_UserInfoType) Enum() *CMD_SC_TOKEN_USER_INFO_UserInfoType {
	p := new(CMD_SC_TOKEN_USER_INFO_UserInfoType)
	*p = x
	return p
}
func (x CMD_SC_TOKEN_USER_INFO_UserInfoType) String() string {
	return proto.EnumName(CMD_SC_TOKEN_USER_INFO_UserInfoType_name, int32(x))
}
func (x *CMD_SC_TOKEN_USER_INFO_UserInfoType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_SC_TOKEN_USER_INFO_UserInfoType_value, data, "CMD_SC_TOKEN_USER_INFO_UserInfoType")
	if err != nil {
		return err
	}
	*x = CMD_SC_TOKEN_USER_INFO_UserInfoType(value)
	return nil
}
func (CMD_SC_TOKEN_USER_INFO_UserInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18, 0}
}

type CMD_SS_LOGIN_SERVER_LOCK_Opt int32

const (
	CMD_SS_LOGIN_SERVER_LOCK_LOCK   CMD_SS_LOGIN_SERVER_LOCK_Opt = 0
	CMD_SS_LOGIN_SERVER_LOCK_UNLOCK CMD_SS_LOGIN_SERVER_LOCK_Opt = 1
)

var CMD_SS_LOGIN_SERVER_LOCK_Opt_name = map[int32]string{
	0: "LOCK",
	1: "UNLOCK",
}
var CMD_SS_LOGIN_SERVER_LOCK_Opt_value = map[string]int32{
	"LOCK":   0,
	"UNLOCK": 1,
}

func (x CMD_SS_LOGIN_SERVER_LOCK_Opt) Enum() *CMD_SS_LOGIN_SERVER_LOCK_Opt {
	p := new(CMD_SS_LOGIN_SERVER_LOCK_Opt)
	*p = x
	return p
}
func (x CMD_SS_LOGIN_SERVER_LOCK_Opt) String() string {
	return proto.EnumName(CMD_SS_LOGIN_SERVER_LOCK_Opt_name, int32(x))
}
func (x *CMD_SS_LOGIN_SERVER_LOCK_Opt) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_SS_LOGIN_SERVER_LOCK_Opt_value, data, "CMD_SS_LOGIN_SERVER_LOCK_Opt")
	if err != nil {
		return err
	}
	*x = CMD_SS_LOGIN_SERVER_LOCK_Opt(value)
	return nil
}
func (CMD_SS_LOGIN_SERVER_LOCK_Opt) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{39, 0}
}

// 上传世界BOSS数据
type CMD_C_UP_WORLD_BOSS_HURT struct {
	Cost             *uint64 `protobuf:"varint,1,opt,name=cost" json:"cost,omitempty"`
	Drop             *uint64 `protobuf:"varint,2,opt,name=drop" json:"drop,omitempty"`
	Addition         *uint64 `protobuf:"varint,3,opt,name=addition" json:"addition,omitempty"`
	BossName         *uint32 `protobuf:"varint,4,opt,name=boss_name,json=bossName" json:"boss_name,omitempty"`
	LastUser         *uint32 `protobuf:"varint,5,opt,name=last_user,json=lastUser" json:"last_user,omitempty"`
	CannonMulti      *uint32 `protobuf:"varint,6,opt,name=cannon_multi,json=cannonMulti" json:"cannon_multi,omitempty"`
	KillerNick       []byte  `protobuf:"bytes,7,opt,name=killer_nick,json=killerNick" json:"killer_nick,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_UP_WORLD_BOSS_HURT) Reset()                    { *m = CMD_C_UP_WORLD_BOSS_HURT{} }
func (m *CMD_C_UP_WORLD_BOSS_HURT) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_UP_WORLD_BOSS_HURT) ProtoMessage()               {}
func (*CMD_C_UP_WORLD_BOSS_HURT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CMD_C_UP_WORLD_BOSS_HURT) GetCost() uint64 {
	if m != nil && m.Cost != nil {
		return *m.Cost
	}
	return 0
}

func (m *CMD_C_UP_WORLD_BOSS_HURT) GetDrop() uint64 {
	if m != nil && m.Drop != nil {
		return *m.Drop
	}
	return 0
}

func (m *CMD_C_UP_WORLD_BOSS_HURT) GetAddition() uint64 {
	if m != nil && m.Addition != nil {
		return *m.Addition
	}
	return 0
}

func (m *CMD_C_UP_WORLD_BOSS_HURT) GetBossName() uint32 {
	if m != nil && m.BossName != nil {
		return *m.BossName
	}
	return 0
}

func (m *CMD_C_UP_WORLD_BOSS_HURT) GetLastUser() uint32 {
	if m != nil && m.LastUser != nil {
		return *m.LastUser
	}
	return 0
}

func (m *CMD_C_UP_WORLD_BOSS_HURT) GetCannonMulti() uint32 {
	if m != nil && m.CannonMulti != nil {
		return *m.CannonMulti
	}
	return 0
}

func (m *CMD_C_UP_WORLD_BOSS_HURT) GetKillerNick() []byte {
	if m != nil {
		return m.KillerNick
	}
	return nil
}

// 活动参与者信息
type WorldBossAttacker struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Attact           *uint64 `protobuf:"varint,2,opt,name=attact" json:"attact,omitempty"`
	Nick             []byte  `protobuf:"bytes,3,opt,name=nick" json:"nick,omitempty"`
	Cannon           *uint32 `protobuf:"varint,4,opt,name=cannon" json:"cannon,omitempty"`
	FaceId           *uint32 `protobuf:"varint,5,opt,name=faceId" json:"faceId,omitempty"`
	Pay              *uint32 `protobuf:"varint,6,opt,name=pay" json:"pay,omitempty"`
	DropGold         *uint32 `protobuf:"varint,7,opt,name=dropGold" json:"dropGold,omitempty"`
	VipLev           *uint32 `protobuf:"varint,8,opt,name=vipLev" json:"vipLev,omitempty"`
	BActive          *bool   `protobuf:"varint,9,opt,name=bActive" json:"bActive,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WorldBossAttacker) Reset()                    { *m = WorldBossAttacker{} }
func (m *WorldBossAttacker) String() string            { return proto.CompactTextString(m) }
func (*WorldBossAttacker) ProtoMessage()               {}
func (*WorldBossAttacker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WorldBossAttacker) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *WorldBossAttacker) GetAttact() uint64 {
	if m != nil && m.Attact != nil {
		return *m.Attact
	}
	return 0
}

func (m *WorldBossAttacker) GetNick() []byte {
	if m != nil {
		return m.Nick
	}
	return nil
}

func (m *WorldBossAttacker) GetCannon() uint32 {
	if m != nil && m.Cannon != nil {
		return *m.Cannon
	}
	return 0
}

func (m *WorldBossAttacker) GetFaceId() uint32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

func (m *WorldBossAttacker) GetPay() uint32 {
	if m != nil && m.Pay != nil {
		return *m.Pay
	}
	return 0
}

func (m *WorldBossAttacker) GetDropGold() uint32 {
	if m != nil && m.DropGold != nil {
		return *m.DropGold
	}
	return 0
}

func (m *WorldBossAttacker) GetVipLev() uint32 {
	if m != nil && m.VipLev != nil {
		return *m.VipLev
	}
	return 0
}

func (m *WorldBossAttacker) GetBActive() bool {
	if m != nil && m.BActive != nil {
		return *m.BActive
	}
	return false
}

// 上传用户攻击
type CMD_C_UP_WORLD_BOSS_ATTACKER struct {
	UserAttact       []*WorldBossAttacker `protobuf:"bytes,1,rep,name=user_attact,json=userAttact" json:"user_attact,omitempty"`
	IsEndOfHurt      *bool                `protobuf:"varint,2,opt,name=is_end_of_hurt,json=isEndOfHurt" json:"is_end_of_hurt,omitempty"`
	BossName         *uint32              `protobuf:"varint,3,opt,name=boss_name,json=bossName" json:"boss_name,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *CMD_C_UP_WORLD_BOSS_ATTACKER) Reset()                    { *m = CMD_C_UP_WORLD_BOSS_ATTACKER{} }
func (m *CMD_C_UP_WORLD_BOSS_ATTACKER) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_UP_WORLD_BOSS_ATTACKER) ProtoMessage()               {}
func (*CMD_C_UP_WORLD_BOSS_ATTACKER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CMD_C_UP_WORLD_BOSS_ATTACKER) GetUserAttact() []*WorldBossAttacker {
	if m != nil {
		return m.UserAttact
	}
	return nil
}

func (m *CMD_C_UP_WORLD_BOSS_ATTACKER) GetIsEndOfHurt() bool {
	if m != nil && m.IsEndOfHurt != nil {
		return *m.IsEndOfHurt
	}
	return false
}

func (m *CMD_C_UP_WORLD_BOSS_ATTACKER) GetBossName() uint32 {
	if m != nil && m.BossName != nil {
		return *m.BossName
	}
	return 0
}

// 通知上传有效攻击用户(间隔500ms)
type CMD_S_UP_WORLD_BOSS_ACTIVE_ATTACKER struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_UP_WORLD_BOSS_ACTIVE_ATTACKER) Reset()         { *m = CMD_S_UP_WORLD_BOSS_ACTIVE_ATTACKER{} }
func (m *CMD_S_UP_WORLD_BOSS_ACTIVE_ATTACKER) String() string { return proto.CompactTextString(m) }
func (*CMD_S_UP_WORLD_BOSS_ACTIVE_ATTACKER) ProtoMessage()    {}
func (*CMD_S_UP_WORLD_BOSS_ACTIVE_ATTACKER) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3}
}

// 下发世界boss活动开放信息
type CMD_SS_WORLD_BOSS_ACTIVITY_INFO struct {
	OpenLog          []*CMD_SS_WORLD_BOSS_ACTIVITY_INFO_OpenLog `protobuf:"bytes,1,rep,name=open_log,json=openLog" json:"open_log,omitempty"`
	Rank             []*WorldBossUserRank           `protobuf:"bytes,2,rep,name=rank" json:"rank,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMD_SS_WORLD_BOSS_ACTIVITY_INFO) Reset()                    { *m = CMD_SS_WORLD_BOSS_ACTIVITY_INFO{} }
func (m *CMD_SS_WORLD_BOSS_ACTIVITY_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_SS_WORLD_BOSS_ACTIVITY_INFO) ProtoMessage()               {}
func (*CMD_SS_WORLD_BOSS_ACTIVITY_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CMD_SS_WORLD_BOSS_ACTIVITY_INFO) GetOpenLog() []*CMD_SS_WORLD_BOSS_ACTIVITY_INFO_OpenLog {
	if m != nil {
		return m.OpenLog
	}
	return nil
}

func (m *CMD_SS_WORLD_BOSS_ACTIVITY_INFO) GetRank() []*WorldBossUserRank {
	if m != nil {
		return m.Rank
	}
	return nil
}

// 开放日志
type CMD_SS_WORLD_BOSS_ACTIVITY_INFO_OpenLog struct {
	OpenTime         *uint32 `protobuf:"varint,1,opt,name=open_time,json=openTime" json:"open_time,omitempty"`
	IssueReward      *uint64 `protobuf:"varint,2,opt,name=Issue_reward,json=IssueReward" json:"Issue_reward,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SS_WORLD_BOSS_ACTIVITY_INFO_OpenLog) Reset() {
	*m = CMD_SS_WORLD_BOSS_ACTIVITY_INFO_OpenLog{}
}
func (m *CMD_SS_WORLD_BOSS_ACTIVITY_INFO_OpenLog) String() string { return proto.CompactTextString(m) }
func (*CMD_SS_WORLD_BOSS_ACTIVITY_INFO_OpenLog) ProtoMessage()    {}
func (*CMD_SS_WORLD_BOSS_ACTIVITY_INFO_OpenLog) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0}
}

func (m *CMD_SS_WORLD_BOSS_ACTIVITY_INFO_OpenLog) GetOpenTime() uint32 {
	if m != nil && m.OpenTime != nil {
		return *m.OpenTime
	}
	return 0
}

func (m *CMD_SS_WORLD_BOSS_ACTIVITY_INFO_OpenLog) GetIssueReward() uint64 {
	if m != nil && m.IssueReward != nil {
		return *m.IssueReward
	}
	return 0
}

// 当前世界boss活动信息
type CMD_SS_CUR_WORLD_BOSS_INFO struct {
	ActivityId       *uint32 `protobuf:"varint,1,opt,name=activity_id,json=activityId" json:"activity_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SS_CUR_WORLD_BOSS_INFO) Reset()                    { *m = CMD_SS_CUR_WORLD_BOSS_INFO{} }
func (m *CMD_SS_CUR_WORLD_BOSS_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_SS_CUR_WORLD_BOSS_INFO) ProtoMessage()               {}
func (*CMD_SS_CUR_WORLD_BOSS_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CMD_SS_CUR_WORLD_BOSS_INFO) GetActivityId() uint32 {
	if m != nil && m.ActivityId != nil {
		return *m.ActivityId
	}
	return 0
}

// 世界BOSS放技能
type CMD_SS_WORLD_BOSS_DO_SKILL struct {
	BossName         *uint32 `protobuf:"varint,1,opt,name=boss_name,json=bossName" json:"boss_name,omitempty"`
	SkillId          *uint32 `protobuf:"varint,2,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SS_WORLD_BOSS_DO_SKILL) Reset()                    { *m = CMD_SS_WORLD_BOSS_DO_SKILL{} }
func (m *CMD_SS_WORLD_BOSS_DO_SKILL) String() string            { return proto.CompactTextString(m) }
func (*CMD_SS_WORLD_BOSS_DO_SKILL) ProtoMessage()               {}
func (*CMD_SS_WORLD_BOSS_DO_SKILL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CMD_SS_WORLD_BOSS_DO_SKILL) GetBossName() uint32 {
	if m != nil && m.BossName != nil {
		return *m.BossName
	}
	return 0
}

func (m *CMD_SS_WORLD_BOSS_DO_SKILL) GetSkillId() uint32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

type CMD_SS_CALL_FISH_MONSTER struct {
	Num              *int32 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_SS_CALL_FISH_MONSTER) Reset()                    { *m = CMD_SS_CALL_FISH_MONSTER{} }
func (m *CMD_SS_CALL_FISH_MONSTER) String() string            { return proto.CompactTextString(m) }
func (*CMD_SS_CALL_FISH_MONSTER) ProtoMessage()               {}
func (*CMD_SS_CALL_FISH_MONSTER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CMD_SS_CALL_FISH_MONSTER) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

type CMD_SS_STOP_PLAYER_TIME struct {
	StartTime        *int64 `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EffectTime       *int32 `protobuf:"varint,2,opt,name=effect_time,json=effectTime" json:"effect_time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_SS_STOP_PLAYER_TIME) Reset()                    { *m = CMD_SS_STOP_PLAYER_TIME{} }
func (m *CMD_SS_STOP_PLAYER_TIME) String() string            { return proto.CompactTextString(m) }
func (*CMD_SS_STOP_PLAYER_TIME) ProtoMessage()               {}
func (*CMD_SS_STOP_PLAYER_TIME) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CMD_SS_STOP_PLAYER_TIME) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMD_SS_STOP_PLAYER_TIME) GetEffectTime() int32 {
	if m != nil && m.EffectTime != nil {
		return *m.EffectTime
	}
	return 0
}

type CMD_SS_WEANKEN_PLAYER_TIME struct {
	StartTime        *int64 `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EffectTime       *int32 `protobuf:"varint,2,opt,name=effect_time,json=effectTime" json:"effect_time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_SS_WEANKEN_PLAYER_TIME) Reset()                    { *m = CMD_SS_WEANKEN_PLAYER_TIME{} }
func (m *CMD_SS_WEANKEN_PLAYER_TIME) String() string            { return proto.CompactTextString(m) }
func (*CMD_SS_WEANKEN_PLAYER_TIME) ProtoMessage()               {}
func (*CMD_SS_WEANKEN_PLAYER_TIME) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CMD_SS_WEANKEN_PLAYER_TIME) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMD_SS_WEANKEN_PLAYER_TIME) GetEffectTime() int32 {
	if m != nil && m.EffectTime != nil {
		return *m.EffectTime
	}
	return 0
}

type CMD_SS_BOSS_SKILL_SHIELD_VALUE struct {
	Value            *int64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_SS_BOSS_SKILL_SHIELD_VALUE) Reset()                    { *m = CMD_SS_BOSS_SKILL_SHIELD_VALUE{} }
func (m *CMD_SS_BOSS_SKILL_SHIELD_VALUE) String() string            { return proto.CompactTextString(m) }
func (*CMD_SS_BOSS_SKILL_SHIELD_VALUE) ProtoMessage()               {}
func (*CMD_SS_BOSS_SKILL_SHIELD_VALUE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CMD_SS_BOSS_SKILL_SHIELD_VALUE) GetValue() int64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// BOSS暴露弱点
type CMD_SS_EXPOSE_WEAKNESS struct {
	Weaknesses       []int32 `protobuf:"varint,1,rep,name=weaknesses" json:"weaknesses,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SS_EXPOSE_WEAKNESS) Reset()                    { *m = CMD_SS_EXPOSE_WEAKNESS{} }
func (m *CMD_SS_EXPOSE_WEAKNESS) String() string            { return proto.CompactTextString(m) }
func (*CMD_SS_EXPOSE_WEAKNESS) ProtoMessage()               {}
func (*CMD_SS_EXPOSE_WEAKNESS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CMD_SS_EXPOSE_WEAKNESS) GetWeaknesses() []int32 {
	if m != nil {
		return m.Weaknesses
	}
	return nil
}

// 推送更新
type CMD_SS_CLASSIC_PRIZE_POOL_UPDATE_CONTROL_INFO struct {
	GuessWinRatio    []uint32 `protobuf:"varint,1,rep,name=guess_win_ratio,json=guessWinRatio" json:"guess_win_ratio,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_SS_CLASSIC_PRIZE_POOL_UPDATE_CONTROL_INFO) Reset() {
	*m = CMD_SS_CLASSIC_PRIZE_POOL_UPDATE_CONTROL_INFO{}
}
func (m *CMD_SS_CLASSIC_PRIZE_POOL_UPDATE_CONTROL_INFO) String() string {
	return proto.CompactTextString(m)
}
func (*CMD_SS_CLASSIC_PRIZE_POOL_UPDATE_CONTROL_INFO) ProtoMessage() {}
func (*CMD_SS_CLASSIC_PRIZE_POOL_UPDATE_CONTROL_INFO) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12}
}

func (m *CMD_SS_CLASSIC_PRIZE_POOL_UPDATE_CONTROL_INFO) GetGuessWinRatio() []uint32 {
	if m != nil {
		return m.GuessWinRatio
	}
	return nil
}

// 累积奖池金额
type CMD_C_ADD_CLASSIC_PRIZE_POOL struct {
	Amount           *int64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_ADD_CLASSIC_PRIZE_POOL) Reset()                    { *m = CMD_C_ADD_CLASSIC_PRIZE_POOL{} }
func (m *CMD_C_ADD_CLASSIC_PRIZE_POOL) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_ADD_CLASSIC_PRIZE_POOL) ProtoMessage()               {}
func (*CMD_C_ADD_CLASSIC_PRIZE_POOL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CMD_C_ADD_CLASSIC_PRIZE_POOL) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

// 注册连接
type CMD_SC_REGISTER struct {
	ServerType       *uint32 `protobuf:"varint,1,opt,name=server_type,json=serverType" json:"server_type,omitempty"`
	ServerToken      *string `protobuf:"bytes,2,opt,name=server_token,json=serverToken" json:"server_token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SC_REGISTER) Reset()                    { *m = CMD_SC_REGISTER{} }
func (m *CMD_SC_REGISTER) String() string            { return proto.CompactTextString(m) }
func (*CMD_SC_REGISTER) ProtoMessage()               {}
func (*CMD_SC_REGISTER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CMD_SC_REGISTER) GetServerType() uint32 {
	if m != nil && m.ServerType != nil {
		return *m.ServerType
	}
	return 0
}

func (m *CMD_SC_REGISTER) GetServerToken() string {
	if m != nil && m.ServerToken != nil {
		return *m.ServerToken
	}
	return ""
}

// 注册连接
type CMD_SS_REGISTER struct {
	Result           *ReplyResult `protobuf:"varint,1,opt,name=result,enum=CMD_GLOBAL.ReplyResult" json:"result,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *CMD_SS_REGISTER) Reset()                    { *m = CMD_SS_REGISTER{} }
func (m *CMD_SS_REGISTER) String() string            { return proto.CompactTextString(m) }
func (*CMD_SS_REGISTER) ProtoMessage()               {}
func (*CMD_SS_REGISTER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CMD_SS_REGISTER) GetResult() ReplyResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ReplyResult_Successful
}

// 推送token
type CMD_SC_PUSH_TOKEN struct {
	Token            []byte                      `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	UserInfo         *FriendUserInfo `protobuf:"bytes,2,opt,name=user_info,json=userInfo" json:"user_info,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *CMD_SC_PUSH_TOKEN) Reset()                    { *m = CMD_SC_PUSH_TOKEN{} }
func (m *CMD_SC_PUSH_TOKEN) String() string            { return proto.CompactTextString(m) }
func (*CMD_SC_PUSH_TOKEN) ProtoMessage()               {}
func (*CMD_SC_PUSH_TOKEN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CMD_SC_PUSH_TOKEN) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *CMD_SC_PUSH_TOKEN) GetUserInfo() *FriendUserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

// 更新玩家信息
type CMD_SC_UPDATE_USER_INFO struct {
	Info             *FriendUserInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *CMD_SC_UPDATE_USER_INFO) Reset()                    { *m = CMD_SC_UPDATE_USER_INFO{} }
func (m *CMD_SC_UPDATE_USER_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_SC_UPDATE_USER_INFO) ProtoMessage()               {}
func (*CMD_SC_UPDATE_USER_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CMD_SC_UPDATE_USER_INFO) GetInfo() *FriendUserInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 推送玩家信息
type CMD_SC_TOKEN_USER_INFO struct {
	UserId           *uint32                              `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Info             *CMD_SC_TOKEN_USER_INFO_UserInfoType `protobuf:"varint,2,opt,name=info,enum=CMD_GLOBAL.CMD_SC_TOKEN_USER_INFO_UserInfoType" json:"info,omitempty"`
	Date             *uint32                              `protobuf:"varint,3,opt,name=date" json:"date,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *CMD_SC_TOKEN_USER_INFO) Reset()                    { *m = CMD_SC_TOKEN_USER_INFO{} }
func (m *CMD_SC_TOKEN_USER_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_SC_TOKEN_USER_INFO) ProtoMessage()               {}
func (*CMD_SC_TOKEN_USER_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CMD_SC_TOKEN_USER_INFO) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_SC_TOKEN_USER_INFO) GetInfo() CMD_SC_TOKEN_USER_INFO_UserInfoType {
	if m != nil && m.Info != nil {
		return *m.Info
	}
	return CMD_SC_TOKEN_USER_INFO_UIT_FACEID
}

func (m *CMD_SC_TOKEN_USER_INFO) GetDate() uint32 {
	if m != nil && m.Date != nil {
		return *m.Date
	}
	return 0
}

// ********** 梦幻展览相关 ***********
type FantasyLotteryInfo struct {
	UserId           *uint32  `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Number           []uint32 `protobuf:"varint,2,rep,name=number" json:"number,omitempty"`
	Reward           *uint32  `protobuf:"varint,3,opt,name=reward" json:"reward,omitempty"`
	NumId            *uint32  `protobuf:"varint,4,opt,name=numId" json:"numId,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FantasyLotteryInfo) Reset()                    { *m = FantasyLotteryInfo{} }
func (m *FantasyLotteryInfo) String() string            { return proto.CompactTextString(m) }
func (*FantasyLotteryInfo) ProtoMessage()               {}
func (*FantasyLotteryInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *FantasyLotteryInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *FantasyLotteryInfo) GetNumber() []uint32 {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *FantasyLotteryInfo) GetReward() uint32 {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return 0
}

func (m *FantasyLotteryInfo) GetNumId() uint32 {
	if m != nil && m.NumId != nil {
		return *m.NumId
	}
	return 0
}

// 用户请求掉落展品
type CMD_C_FANTASY_DROP_LOTTERY struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Contribute       *uint64 `protobuf:"varint,2,opt,name=contribute" json:"contribute,omitempty"`
	Multiple         *uint32 `protobuf:"varint,3,opt,name=multiple" json:"multiple,omitempty"`
	Jointimes        *uint32 `protobuf:"varint,4,opt,name=jointimes" json:"jointimes,omitempty"`
	Ipaytotal        *uint32 `protobuf:"varint,5,opt,name=ipaytotal" json:"ipaytotal,omitempty"`
	Viplev           *uint32 `protobuf:"varint,6,opt,name=viplev" json:"viplev,omitempty"`
	Faceid           *uint32 `protobuf:"varint,7,opt,name=faceid" json:"faceid,omitempty"`
	Nick             []byte  `protobuf:"bytes,8,opt,name=nick" json:"nick,omitempty"`
	Costpool         *uint32 `protobuf:"varint,9,opt,name=costpool" json:"costpool,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_FANTASY_DROP_LOTTERY) Reset()                    { *m = CMD_C_FANTASY_DROP_LOTTERY{} }
func (m *CMD_C_FANTASY_DROP_LOTTERY) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_FANTASY_DROP_LOTTERY) ProtoMessage()               {}
func (*CMD_C_FANTASY_DROP_LOTTERY) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CMD_C_FANTASY_DROP_LOTTERY) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_C_FANTASY_DROP_LOTTERY) GetContribute() uint64 {
	if m != nil && m.Contribute != nil {
		return *m.Contribute
	}
	return 0
}

func (m *CMD_C_FANTASY_DROP_LOTTERY) GetMultiple() uint32 {
	if m != nil && m.Multiple != nil {
		return *m.Multiple
	}
	return 0
}

func (m *CMD_C_FANTASY_DROP_LOTTERY) GetJointimes() uint32 {
	if m != nil && m.Jointimes != nil {
		return *m.Jointimes
	}
	return 0
}

func (m *CMD_C_FANTASY_DROP_LOTTERY) GetIpaytotal() uint32 {
	if m != nil && m.Ipaytotal != nil {
		return *m.Ipaytotal
	}
	return 0
}

func (m *CMD_C_FANTASY_DROP_LOTTERY) GetViplev() uint32 {
	if m != nil && m.Viplev != nil {
		return *m.Viplev
	}
	return 0
}

func (m *CMD_C_FANTASY_DROP_LOTTERY) GetFaceid() uint32 {
	if m != nil && m.Faceid != nil {
		return *m.Faceid
	}
	return 0
}

func (m *CMD_C_FANTASY_DROP_LOTTERY) GetNick() []byte {
	if m != nil {
		return m.Nick
	}
	return nil
}

func (m *CMD_C_FANTASY_DROP_LOTTERY) GetCostpool() uint32 {
	if m != nil && m.Costpool != nil {
		return *m.Costpool
	}
	return 0
}

// 梦幻展览展品列表
type CMD_S_FANTASY_LOTTERY_LIST struct {
	Info             []*FantasyLotteryInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
	InfoType         *uint32               `protobuf:"varint,2,opt,name=infoType" json:"infoType,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CMD_S_FANTASY_LOTTERY_LIST) Reset()                    { *m = CMD_S_FANTASY_LOTTERY_LIST{} }
func (m *CMD_S_FANTASY_LOTTERY_LIST) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_FANTASY_LOTTERY_LIST) ProtoMessage()               {}
func (*CMD_S_FANTASY_LOTTERY_LIST) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CMD_S_FANTASY_LOTTERY_LIST) GetInfo() []*FantasyLotteryInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *CMD_S_FANTASY_LOTTERY_LIST) GetInfoType() uint32 {
	if m != nil && m.InfoType != nil {
		return *m.InfoType
	}
	return 0
}

// 下发梦幻展览活动开放信息
type CMD_SS_FANTASY_LOTTERY_ACTIVITY_INFO struct {
	Rank             []*FantasyExhibitionUserRank `protobuf:"bytes,1,rep,name=rank" json:"rank,omitempty"`
	XXX_unrecognized []byte                                   `json:"-"`
}

func (m *CMD_SS_FANTASY_LOTTERY_ACTIVITY_INFO) Reset()         { *m = CMD_SS_FANTASY_LOTTERY_ACTIVITY_INFO{} }
func (m *CMD_SS_FANTASY_LOTTERY_ACTIVITY_INFO) String() string { return proto.CompactTextString(m) }
func (*CMD_SS_FANTASY_LOTTERY_ACTIVITY_INFO) ProtoMessage()    {}
func (*CMD_SS_FANTASY_LOTTERY_ACTIVITY_INFO) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22}
}

func (m *CMD_SS_FANTASY_LOTTERY_ACTIVITY_INFO) GetRank() []*FantasyExhibitionUserRank {
	if m != nil {
		return m.Rank
	}
	return nil
}

// 房间任务鱼
type RoomTaskFish struct {
	FishId           *uint32 `protobuf:"varint,1,opt,name=fish_id,json=fishId" json:"fish_id,omitempty"`
	FishNum          *uint32 `protobuf:"varint,2,opt,name=fish_num,json=fishNum" json:"fish_num,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RoomTaskFish) Reset()                    { *m = RoomTaskFish{} }
func (m *RoomTaskFish) String() string            { return proto.CompactTextString(m) }
func (*RoomTaskFish) ProtoMessage()               {}
func (*RoomTaskFish) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RoomTaskFish) GetFishId() uint32 {
	if m != nil && m.FishId != nil {
		return *m.FishId
	}
	return 0
}

func (m *RoomTaskFish) GetFishNum() uint32 {
	if m != nil && m.FishNum != nil {
		return *m.FishNum
	}
	return 0
}

// 房间任务
type RoomTask struct {
	RoomType         *uint32         `protobuf:"varint,1,opt,name=room_type,json=roomType" json:"room_type,omitempty"`
	Fish             []*RoomTaskFish `protobuf:"bytes,2,rep,name=fish" json:"fish,omitempty"`
	Id               *uint64         `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *RoomTask) Reset()                    { *m = RoomTask{} }
func (m *RoomTask) String() string            { return proto.CompactTextString(m) }
func (*RoomTask) ProtoMessage()               {}
func (*RoomTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RoomTask) GetRoomType() uint32 {
	if m != nil && m.RoomType != nil {
		return *m.RoomType
	}
	return 0
}

func (m *RoomTask) GetFish() []*RoomTaskFish {
	if m != nil {
		return m.Fish
	}
	return nil
}

func (m *RoomTask) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// 随机任务开启
type CMD_SS_ROOM_TASK_START struct {
	CountDwon        *uint32     `protobuf:"varint,1,opt,name=count_dwon,json=countDwon" json:"count_dwon,omitempty"`
	Task             []*RoomTask `protobuf:"bytes,2,rep,name=task" json:"task,omitempty"`
	IsStart          *bool       `protobuf:"varint,3,opt,name=is_start,json=isStart" json:"is_start,omitempty"`
	TodayCountMax    *uint32     `protobuf:"varint,4,opt,name=today_count_max,json=todayCountMax" json:"today_count_max,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMD_SS_ROOM_TASK_START) Reset()                    { *m = CMD_SS_ROOM_TASK_START{} }
func (m *CMD_SS_ROOM_TASK_START) String() string            { return proto.CompactTextString(m) }
func (*CMD_SS_ROOM_TASK_START) ProtoMessage()               {}
func (*CMD_SS_ROOM_TASK_START) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CMD_SS_ROOM_TASK_START) GetCountDwon() uint32 {
	if m != nil && m.CountDwon != nil {
		return *m.CountDwon
	}
	return 0
}

func (m *CMD_SS_ROOM_TASK_START) GetTask() []*RoomTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *CMD_SS_ROOM_TASK_START) GetIsStart() bool {
	if m != nil && m.IsStart != nil {
		return *m.IsStart
	}
	return false
}

func (m *CMD_SS_ROOM_TASK_START) GetTodayCountMax() uint32 {
	if m != nil && m.TodayCountMax != nil {
		return *m.TodayCountMax
	}
	return 0
}

// 虚弱状态结束
type CMD_SS_WEAK_STATUS_END struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_SS_WEAK_STATUS_END) Reset()                    { *m = CMD_SS_WEAK_STATUS_END{} }
func (m *CMD_SS_WEAK_STATUS_END) String() string            { return proto.CompactTextString(m) }
func (*CMD_SS_WEAK_STATUS_END) ProtoMessage()               {}
func (*CMD_SS_WEAK_STATUS_END) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

// 房间在线信息
type RoomOnlineCount struct {
	KindId           *uint32 `protobuf:"varint,1,opt,name=kind_id,json=kindId" json:"kind_id,omitempty"`
	ServerId         *uint32 `protobuf:"varint,2,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	AndroidCount     *uint32 `protobuf:"varint,3,opt,name=android_count,json=androidCount" json:"android_count,omitempty"`
	IosCount         *uint32 `protobuf:"varint,4,opt,name=ios_count,json=iosCount" json:"ios_count,omitempty"`
	H5Count          *uint32 `protobuf:"varint,5,opt,name=h5_count,json=h5Count" json:"h5_count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RoomOnlineCount) Reset()                    { *m = RoomOnlineCount{} }
func (m *RoomOnlineCount) String() string            { return proto.CompactTextString(m) }
func (*RoomOnlineCount) ProtoMessage()               {}
func (*RoomOnlineCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *RoomOnlineCount) GetKindId() uint32 {
	if m != nil && m.KindId != nil {
		return *m.KindId
	}
	return 0
}

func (m *RoomOnlineCount) GetServerId() uint32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *RoomOnlineCount) GetAndroidCount() uint32 {
	if m != nil && m.AndroidCount != nil {
		return *m.AndroidCount
	}
	return 0
}

func (m *RoomOnlineCount) GetIosCount() uint32 {
	if m != nil && m.IosCount != nil {
		return *m.IosCount
	}
	return 0
}

func (m *RoomOnlineCount) GetH5Count() uint32 {
	if m != nil && m.H5Count != nil {
		return *m.H5Count
	}
	return 0
}

// 每组服务器在线信息
type CMD_L2C_OnlineInfo struct {
	Infos            []*RoomOnlineCount `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CMD_L2C_OnlineInfo) Reset()                    { *m = CMD_L2C_OnlineInfo{} }
func (m *CMD_L2C_OnlineInfo) String() string            { return proto.CompactTextString(m) }
func (*CMD_L2C_OnlineInfo) ProtoMessage()               {}
func (*CMD_L2C_OnlineInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CMD_L2C_OnlineInfo) GetInfos() []*RoomOnlineCount {
	if m != nil {
		return m.Infos
	}
	return nil
}

// 请求登录
type CMD_C_RequestEnter struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ServerKind       *uint32 `protobuf:"varint,2,opt,name=server_kind,json=serverKind" json:"server_kind,omitempty"`
	ServerId         *int64  `protobuf:"varint,3,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	NickName         []byte  `protobuf:"bytes,4,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	MachineId        []byte  `protobuf:"bytes,5,opt,name=machine_id,json=machineId" json:"machine_id,omitempty"`
	Channel          *uint32 `protobuf:"varint,6,opt,name=channel" json:"channel,omitempty"`
	Socket           *uint32 `protobuf:"varint,7,opt,name=socket" json:"socket,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_RequestEnter) Reset()                    { *m = CMD_C_RequestEnter{} }
func (m *CMD_C_RequestEnter) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_RequestEnter) ProtoMessage()               {}
func (*CMD_C_RequestEnter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CMD_C_RequestEnter) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_C_RequestEnter) GetServerKind() uint32 {
	if m != nil && m.ServerKind != nil {
		return *m.ServerKind
	}
	return 0
}

func (m *CMD_C_RequestEnter) GetServerId() int64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *CMD_C_RequestEnter) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *CMD_C_RequestEnter) GetMachineId() []byte {
	if m != nil {
		return m.MachineId
	}
	return nil
}

func (m *CMD_C_RequestEnter) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *CMD_C_RequestEnter) GetSocket() uint32 {
	if m != nil && m.Socket != nil {
		return *m.Socket
	}
	return 0
}

type CMD_S_RequestEnter struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Result           *uint32 `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_RequestEnter) Reset()                    { *m = CMD_S_RequestEnter{} }
func (m *CMD_S_RequestEnter) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_RequestEnter) ProtoMessage()               {}
func (*CMD_S_RequestEnter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CMD_S_RequestEnter) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_RequestEnter) GetResult() uint32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

type CMD_C_UserEnter struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GameId           *uint32 `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	NickName         []byte  `protobuf:"bytes,3,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	Gender           *uint32 `protobuf:"varint,4,opt,name=gender" json:"gender,omitempty"`
	MemberOrder      *uint32 `protobuf:"varint,5,opt,name=member_order,json=memberOrder" json:"member_order,omitempty"`
	MasterOrder      *uint32 `protobuf:"varint,6,opt,name=master_order,json=masterOrder" json:"master_order,omitempty"`
	ServerId         *int64  `protobuf:"varint,7,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerKind       *uint32 `protobuf:"varint,8,opt,name=server_kind,json=serverKind" json:"server_kind,omitempty"`
	Socket           *uint32 `protobuf:"varint,9,opt,name=socket" json:"socket,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_UserEnter) Reset()                    { *m = CMD_C_UserEnter{} }
func (m *CMD_C_UserEnter) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_UserEnter) ProtoMessage()               {}
func (*CMD_C_UserEnter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *CMD_C_UserEnter) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_C_UserEnter) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *CMD_C_UserEnter) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *CMD_C_UserEnter) GetGender() uint32 {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return 0
}

func (m *CMD_C_UserEnter) GetMemberOrder() uint32 {
	if m != nil && m.MemberOrder != nil {
		return *m.MemberOrder
	}
	return 0
}

func (m *CMD_C_UserEnter) GetMasterOrder() uint32 {
	if m != nil && m.MasterOrder != nil {
		return *m.MasterOrder
	}
	return 0
}

func (m *CMD_C_UserEnter) GetServerId() int64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *CMD_C_UserEnter) GetServerKind() uint32 {
	if m != nil && m.ServerKind != nil {
		return *m.ServerKind
	}
	return 0
}

func (m *CMD_C_UserEnter) GetSocket() uint32 {
	if m != nil && m.Socket != nil {
		return *m.Socket
	}
	return 0
}

type CMD_C_UserEnter_Fail struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ServerId         *int64  `protobuf:"varint,2,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerKind       *uint32 `protobuf:"varint,3,opt,name=server_kind,json=serverKind" json:"server_kind,omitempty"`
	Socket           *uint32 `protobuf:"varint,4,opt,name=socket" json:"socket,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_UserEnter_Fail) Reset()                    { *m = CMD_C_UserEnter_Fail{} }
func (m *CMD_C_UserEnter_Fail) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_UserEnter_Fail) ProtoMessage()               {}
func (*CMD_C_UserEnter_Fail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *CMD_C_UserEnter_Fail) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_C_UserEnter_Fail) GetServerId() int64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *CMD_C_UserEnter_Fail) GetServerKind() uint32 {
	if m != nil && m.ServerKind != nil {
		return *m.ServerKind
	}
	return 0
}

func (m *CMD_C_UserEnter_Fail) GetSocket() uint32 {
	if m != nil && m.Socket != nil {
		return *m.Socket
	}
	return 0
}

type CMD_C_UserLeave struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ServerId         *int64  `protobuf:"varint,2,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerKind       *uint32 `protobuf:"varint,3,opt,name=server_kind,json=serverKind" json:"server_kind,omitempty"`
	Socket           *uint32 `protobuf:"varint,4,opt,name=socket" json:"socket,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_UserLeave) Reset()                    { *m = CMD_C_UserLeave{} }
func (m *CMD_C_UserLeave) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_UserLeave) ProtoMessage()               {}
func (*CMD_C_UserLeave) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *CMD_C_UserLeave) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_C_UserLeave) GetServerId() int64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *CMD_C_UserLeave) GetServerKind() uint32 {
	if m != nil && m.ServerKind != nil {
		return *m.ServerKind
	}
	return 0
}

func (m *CMD_C_UserLeave) GetSocket() uint32 {
	if m != nil && m.Socket != nil {
		return *m.Socket
	}
	return 0
}

type CMD_C_UserOffline struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ServerId         *int64  `protobuf:"varint,2,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerKind       *uint32 `protobuf:"varint,3,opt,name=server_kind,json=serverKind" json:"server_kind,omitempty"`
	Socket           *uint32 `protobuf:"varint,4,opt,name=socket" json:"socket,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_UserOffline) Reset()                    { *m = CMD_C_UserOffline{} }
func (m *CMD_C_UserOffline) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_UserOffline) ProtoMessage()               {}
func (*CMD_C_UserOffline) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *CMD_C_UserOffline) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_C_UserOffline) GetServerId() int64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *CMD_C_UserOffline) GetServerKind() uint32 {
	if m != nil && m.ServerKind != nil {
		return *m.ServerKind
	}
	return 0
}

func (m *CMD_C_UserOffline) GetSocket() uint32 {
	if m != nil && m.Socket != nil {
		return *m.Socket
	}
	return 0
}

type GlobalUserState struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GameId           *uint32 `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	NickName         []byte  `protobuf:"bytes,3,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	Gender           *uint32 `protobuf:"varint,4,opt,name=gender" json:"gender,omitempty"`
	MemberOrder      *uint32 `protobuf:"varint,5,opt,name=member_order,json=memberOrder" json:"member_order,omitempty"`
	MasterOrder      *uint32 `protobuf:"varint,6,opt,name=master_order,json=masterOrder" json:"master_order,omitempty"`
	MachineId        []byte  `protobuf:"bytes,7,opt,name=machine_id,json=machineId" json:"machine_id,omitempty"`
	Channel          *uint32 `protobuf:"varint,8,opt,name=channel" json:"channel,omitempty"`
	Socket           *uint32 `protobuf:"varint,9,opt,name=socket" json:"socket,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GlobalUserState) Reset()                    { *m = GlobalUserState{} }
func (m *GlobalUserState) String() string            { return proto.CompactTextString(m) }
func (*GlobalUserState) ProtoMessage()               {}
func (*GlobalUserState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *GlobalUserState) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *GlobalUserState) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *GlobalUserState) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *GlobalUserState) GetGender() uint32 {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return 0
}

func (m *GlobalUserState) GetMemberOrder() uint32 {
	if m != nil && m.MemberOrder != nil {
		return *m.MemberOrder
	}
	return 0
}

func (m *GlobalUserState) GetMasterOrder() uint32 {
	if m != nil && m.MasterOrder != nil {
		return *m.MasterOrder
	}
	return 0
}

func (m *GlobalUserState) GetMachineId() []byte {
	if m != nil {
		return m.MachineId
	}
	return nil
}

func (m *GlobalUserState) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *GlobalUserState) GetSocket() uint32 {
	if m != nil && m.Socket != nil {
		return *m.Socket
	}
	return 0
}

// 向中心服同步游戏/登录服玩家状态,分批同步
type CMD_C_SYNC_USERSTATE struct {
	First            *uint32            `protobuf:"varint,1,opt,name=first" json:"first,omitempty"`
	End              *uint32            `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	ServerId         *int64             `protobuf:"varint,3,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerKind       *uint32            `protobuf:"varint,4,opt,name=server_kind,json=serverKind" json:"server_kind,omitempty"`
	Users            []*GlobalUserState `protobuf:"bytes,5,rep,name=users" json:"users,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CMD_C_SYNC_USERSTATE) Reset()                    { *m = CMD_C_SYNC_USERSTATE{} }
func (m *CMD_C_SYNC_USERSTATE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_SYNC_USERSTATE) ProtoMessage()               {}
func (*CMD_C_SYNC_USERSTATE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *CMD_C_SYNC_USERSTATE) GetFirst() uint32 {
	if m != nil && m.First != nil {
		return *m.First
	}
	return 0
}

func (m *CMD_C_SYNC_USERSTATE) GetEnd() uint32 {
	if m != nil && m.End != nil {
		return *m.End
	}
	return 0
}

func (m *CMD_C_SYNC_USERSTATE) GetServerId() int64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *CMD_C_SYNC_USERSTATE) GetServerKind() uint32 {
	if m != nil && m.ServerKind != nil {
		return *m.ServerKind
	}
	return 0
}

func (m *CMD_C_SYNC_USERSTATE) GetUsers() []*GlobalUserState {
	if m != nil {
		return m.Users
	}
	return nil
}

type CMD_C_KICKUSER struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Socket           *uint32 `protobuf:"varint,2,opt,name=socket" json:"socket,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_KICKUSER) Reset()                    { *m = CMD_C_KICKUSER{} }
func (m *CMD_C_KICKUSER) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_KICKUSER) ProtoMessage()               {}
func (*CMD_C_KICKUSER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *CMD_C_KICKUSER) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_C_KICKUSER) GetSocket() uint32 {
	if m != nil && m.Socket != nil {
		return *m.Socket
	}
	return 0
}

type CMD_C_KICKUSER_RESP struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ServerId         *int64  `protobuf:"varint,2,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_KICKUSER_RESP) Reset()                    { *m = CMD_C_KICKUSER_RESP{} }
func (m *CMD_C_KICKUSER_RESP) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_KICKUSER_RESP) ProtoMessage()               {}
func (*CMD_C_KICKUSER_RESP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *CMD_C_KICKUSER_RESP) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_C_KICKUSER_RESP) GetServerId() int64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

// 锁定/解锁指定连接（数据安全）
type CMD_SS_LOGIN_SERVER_LOCK struct {
	UserId           *uint32                       `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Socket           *uint32                       `protobuf:"varint,2,opt,name=socket" json:"socket,omitempty"`
	Opt              *CMD_SS_LOGIN_SERVER_LOCK_Opt `protobuf:"varint,3,opt,name=opt,enum=CMD_GLOBAL.CMD_SS_LOGIN_SERVER_LOCK_Opt" json:"opt,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *CMD_SS_LOGIN_SERVER_LOCK) Reset()                    { *m = CMD_SS_LOGIN_SERVER_LOCK{} }
func (m *CMD_SS_LOGIN_SERVER_LOCK) String() string            { return proto.CompactTextString(m) }
func (*CMD_SS_LOGIN_SERVER_LOCK) ProtoMessage()               {}
func (*CMD_SS_LOGIN_SERVER_LOCK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *CMD_SS_LOGIN_SERVER_LOCK) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_SS_LOGIN_SERVER_LOCK) GetSocket() uint32 {
	if m != nil && m.Socket != nil {
		return *m.Socket
	}
	return 0
}

func (m *CMD_SS_LOGIN_SERVER_LOCK) GetOpt() CMD_SS_LOGIN_SERVER_LOCK_Opt {
	if m != nil && m.Opt != nil {
		return *m.Opt
	}
	return CMD_SS_LOGIN_SERVER_LOCK_LOCK
}

// 通知玩家重定向连接
type CMD_SS_REDIRECT_CONNECT struct {
	UserId           *uint32  `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SocketId         *uint32  `protobuf:"varint,2,opt,name=socket_id,json=socketId" json:"socket_id,omitempty"`
	ServerId         *uint32  `protobuf:"varint,3,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	Addrs            [][]byte `protobuf:"bytes,4,rep,name=addrs" json:"addrs,omitempty"`
	Port             *uint32  `protobuf:"varint,5,opt,name=port" json:"port,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_SS_REDIRECT_CONNECT) Reset()                    { *m = CMD_SS_REDIRECT_CONNECT{} }
func (m *CMD_SS_REDIRECT_CONNECT) String() string            { return proto.CompactTextString(m) }
func (*CMD_SS_REDIRECT_CONNECT) ProtoMessage()               {}
func (*CMD_SS_REDIRECT_CONNECT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *CMD_SS_REDIRECT_CONNECT) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_SS_REDIRECT_CONNECT) GetSocketId() uint32 {
	if m != nil && m.SocketId != nil {
		return *m.SocketId
	}
	return 0
}

func (m *CMD_SS_REDIRECT_CONNECT) GetServerId() uint32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *CMD_SS_REDIRECT_CONNECT) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *CMD_SS_REDIRECT_CONNECT) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

type ServerInfo struct {
	Type             *int32   `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	ServerId         *int64   `protobuf:"varint,2,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	KindId           *int32   `protobuf:"varint,3,opt,name=kind_id,json=kindId" json:"kind_id,omitempty"`
	CellScore        *int32   `protobuf:"varint,4,opt,name=cell_score,json=cellScore" json:"cell_score,omitempty"`
	Addrs            [][]byte `protobuf:"bytes,5,rep,name=addrs" json:"addrs,omitempty"`
	Port             *uint32  `protobuf:"varint,6,opt,name=port" json:"port,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ServerInfo) Reset()                    { *m = ServerInfo{} }
func (m *ServerInfo) String() string            { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()               {}
func (*ServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *ServerInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ServerInfo) GetServerId() int64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *ServerInfo) GetKindId() int32 {
	if m != nil && m.KindId != nil {
		return *m.KindId
	}
	return 0
}

func (m *ServerInfo) GetCellScore() int32 {
	if m != nil && m.CellScore != nil {
		return *m.CellScore
	}
	return 0
}

func (m *ServerInfo) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *ServerInfo) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

// 服务器注册/注销
type CMD_SC_ONE_SERVER_INOUT struct {
	IsIn             *bool       `protobuf:"varint,1,opt,name=is_in,json=isIn" json:"is_in,omitempty"`
	Server           *ServerInfo `protobuf:"bytes,2,opt,name=server" json:"server,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMD_SC_ONE_SERVER_INOUT) Reset()                    { *m = CMD_SC_ONE_SERVER_INOUT{} }
func (m *CMD_SC_ONE_SERVER_INOUT) String() string            { return proto.CompactTextString(m) }
func (*CMD_SC_ONE_SERVER_INOUT) ProtoMessage()               {}
func (*CMD_SC_ONE_SERVER_INOUT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *CMD_SC_ONE_SERVER_INOUT) GetIsIn() bool {
	if m != nil && m.IsIn != nil {
		return *m.IsIn
	}
	return false
}

func (m *CMD_SC_ONE_SERVER_INOUT) GetServer() *ServerInfo {
	if m != nil {
		return m.Server
	}
	return nil
}

// 同步服务器列表
type CMD_SC_SYNC_SERVER_LIST struct {
	Servers          []*ServerInfo `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *CMD_SC_SYNC_SERVER_LIST) Reset()                    { *m = CMD_SC_SYNC_SERVER_LIST{} }
func (m *CMD_SC_SYNC_SERVER_LIST) String() string            { return proto.CompactTextString(m) }
func (*CMD_SC_SYNC_SERVER_LIST) ProtoMessage()               {}
func (*CMD_SC_SYNC_SERVER_LIST) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *CMD_SC_SYNC_SERVER_LIST) GetServers() []*ServerInfo {
	if m != nil {
		return m.Servers
	}
	return nil
}

// 同步服务器列表
type CMD_SC_C_SYNC_USER_STATE struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SC_C_SYNC_USER_STATE) Reset()                    { *m = CMD_SC_C_SYNC_USER_STATE{} }
func (m *CMD_SC_C_SYNC_USER_STATE) String() string            { return proto.CompactTextString(m) }
func (*CMD_SC_C_SYNC_USER_STATE) ProtoMessage()               {}
func (*CMD_SC_C_SYNC_USER_STATE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *CMD_SC_C_SYNC_USER_STATE) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 向中心服同步游戏/登录服玩家状态,单个
type CMD_SC_S_SYNC_USER_STATE struct {
	ServerId         *int64           `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerKind       *uint32          `protobuf:"varint,2,opt,name=server_kind,json=serverKind" json:"server_kind,omitempty"`
	Users            *GlobalUserState `protobuf:"bytes,3,opt,name=users" json:"users,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_SC_S_SYNC_USER_STATE) Reset()                    { *m = CMD_SC_S_SYNC_USER_STATE{} }
func (m *CMD_SC_S_SYNC_USER_STATE) String() string            { return proto.CompactTextString(m) }
func (*CMD_SC_S_SYNC_USER_STATE) ProtoMessage()               {}
func (*CMD_SC_S_SYNC_USER_STATE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *CMD_SC_S_SYNC_USER_STATE) GetServerId() int64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *CMD_SC_S_SYNC_USER_STATE) GetServerKind() uint32 {
	if m != nil && m.ServerKind != nil {
		return *m.ServerKind
	}
	return 0
}

func (m *CMD_SC_S_SYNC_USER_STATE) GetUsers() *GlobalUserState {
	if m != nil {
		return m.Users
	}
	return nil
}

var E_UserLv = &proto.ExtensionDesc{
	ExtendedType:  (*FriendUserInfo)(nil),
	ExtensionType: (*uint32)(nil),
	Field:         50,
	Name:          "CMD_GLOBAL.user_lv",
	Tag:           "varint,50,opt,name=user_lv,json=userLv",
	Filename:      "CMD_GlobalServer_Inner.proto",
}

var E_GunLv = &proto.ExtensionDesc{
	ExtendedType:  (*FriendUserInfo)(nil),
	ExtensionType: (*uint32)(nil),
	Field:         51,
	Name:          "CMD_GLOBAL.gun_lv",
	Tag:           "varint,51,opt,name=gun_lv,json=gunLv",
	Filename:      "CMD_GlobalServer_Inner.proto",
}

var E_OnlineTime = &proto.ExtensionDesc{
	ExtendedType:  (*FriendUserInfo)(nil),
	ExtensionType: (*uint32)(nil),
	Field:         52,
	Name:          "CMD_GLOBAL.online_time",
	Tag:           "varint,52,opt,name=online_time,json=onlineTime",
	Filename:      "CMD_GlobalServer_Inner.proto",
}

func init() {
	proto.RegisterType((*CMD_C_UP_WORLD_BOSS_HURT)(nil), "CMD_GLOBAL.CMD_C_UP_WORLD_BOSS_HURT")
	proto.RegisterType((*WorldBossAttacker)(nil), "CMD_GLOBAL.WorldBossAttacker")
	proto.RegisterType((*CMD_C_UP_WORLD_BOSS_ATTACKER)(nil), "CMD_GLOBAL.CMD_C_UP_WORLD_BOSS_ATTACKER")
	proto.RegisterType((*CMD_S_UP_WORLD_BOSS_ACTIVE_ATTACKER)(nil), "CMD_GLOBAL.CMD_S_UP_WORLD_BOSS_ACTIVE_ATTACKER")
	proto.RegisterType((*CMD_SS_WORLD_BOSS_ACTIVITY_INFO)(nil), "CMD_GLOBAL.CMD_SS_WORLD_BOSS_ACTIVITY_INFO")
	proto.RegisterType((*CMD_SS_WORLD_BOSS_ACTIVITY_INFO_OpenLog)(nil), "CMD_GLOBAL.CMD_SS_WORLD_BOSS_ACTIVITY_INFO.OpenLog")
	proto.RegisterType((*CMD_SS_CUR_WORLD_BOSS_INFO)(nil), "CMD_GLOBAL.CMD_SS_CUR_WORLD_BOSS_INFO")
	proto.RegisterType((*CMD_SS_WORLD_BOSS_DO_SKILL)(nil), "CMD_GLOBAL.CMD_SS_WORLD_BOSS_DO_SKILL")
	proto.RegisterType((*CMD_SS_CALL_FISH_MONSTER)(nil), "CMD_GLOBAL.CMD_SS_CALL_FISH_MONSTER")
	proto.RegisterType((*CMD_SS_STOP_PLAYER_TIME)(nil), "CMD_GLOBAL.CMD_SS_STOP_PLAYER_TIME")
	proto.RegisterType((*CMD_SS_WEANKEN_PLAYER_TIME)(nil), "CMD_GLOBAL.CMD_SS_WEANKEN_PLAYER_TIME")
	proto.RegisterType((*CMD_SS_BOSS_SKILL_SHIELD_VALUE)(nil), "CMD_GLOBAL.CMD_SS_BOSS_SKILL_SHIELD_VALUE")
	proto.RegisterType((*CMD_SS_EXPOSE_WEAKNESS)(nil), "CMD_GLOBAL.CMD_SS_EXPOSE_WEAKNESS")
	proto.RegisterType((*CMD_SS_CLASSIC_PRIZE_POOL_UPDATE_CONTROL_INFO)(nil), "CMD_GLOBAL.CMD_SS_CLASSIC_PRIZE_POOL_UPDATE_CONTROL_INFO")
	proto.RegisterType((*CMD_C_ADD_CLASSIC_PRIZE_POOL)(nil), "CMD_GLOBAL.CMD_C_ADD_CLASSIC_PRIZE_POOL")
	proto.RegisterType((*CMD_SC_REGISTER)(nil), "CMD_GLOBAL.CMD_SC_REGISTER")
	proto.RegisterType((*CMD_SS_REGISTER)(nil), "CMD_GLOBAL.CMD_SS_REGISTER")
	proto.RegisterType((*CMD_SC_PUSH_TOKEN)(nil), "CMD_GLOBAL.CMD_SC_PUSH_TOKEN")
	proto.RegisterType((*CMD_SC_UPDATE_USER_INFO)(nil), "CMD_GLOBAL.CMD_SC_UPDATE_USER_INFO")
	proto.RegisterType((*CMD_SC_TOKEN_USER_INFO)(nil), "CMD_GLOBAL.CMD_SC_TOKEN_USER_INFO")
	proto.RegisterType((*FantasyLotteryInfo)(nil), "CMD_GLOBAL.FantasyLotteryInfo")
	proto.RegisterType((*CMD_C_FANTASY_DROP_LOTTERY)(nil), "CMD_GLOBAL.CMD_C_FANTASY_DROP_LOTTERY")
	proto.RegisterType((*CMD_S_FANTASY_LOTTERY_LIST)(nil), "CMD_GLOBAL.CMD_S_FANTASY_LOTTERY_LIST")
	proto.RegisterType((*CMD_SS_FANTASY_LOTTERY_ACTIVITY_INFO)(nil), "CMD_GLOBAL.CMD_SS_FANTASY_LOTTERY_ACTIVITY_INFO")
	proto.RegisterType((*RoomTaskFish)(nil), "CMD_GLOBAL.RoomTaskFish")
	proto.RegisterType((*RoomTask)(nil), "CMD_GLOBAL.RoomTask")
	proto.RegisterType((*CMD_SS_ROOM_TASK_START)(nil), "CMD_GLOBAL.CMD_SS_ROOM_TASK_START")
	proto.RegisterType((*CMD_SS_WEAK_STATUS_END)(nil), "CMD_GLOBAL.CMD_SS_WEAK_STATUS_END")
	proto.RegisterType((*RoomOnlineCount)(nil), "CMD_GLOBAL.RoomOnlineCount")
	proto.RegisterType((*CMD_L2C_OnlineInfo)(nil), "CMD_GLOBAL.CMD_L2C_OnlineInfo")
	proto.RegisterType((*CMD_C_RequestEnter)(nil), "CMD_GLOBAL.CMD_C_RequestEnter")
	proto.RegisterType((*CMD_S_RequestEnter)(nil), "CMD_GLOBAL.CMD_S_RequestEnter")
	proto.RegisterType((*CMD_C_UserEnter)(nil), "CMD_GLOBAL.CMD_C_UserEnter")
	proto.RegisterType((*CMD_C_UserEnter_Fail)(nil), "CMD_GLOBAL.CMD_C_UserEnter_Fail")
	proto.RegisterType((*CMD_C_UserLeave)(nil), "CMD_GLOBAL.CMD_C_UserLeave")
	proto.RegisterType((*CMD_C_UserOffline)(nil), "CMD_GLOBAL.CMD_C_UserOffline")
	proto.RegisterType((*GlobalUserState)(nil), "CMD_GLOBAL.GlobalUserState")
	proto.RegisterType((*CMD_C_SYNC_USERSTATE)(nil), "CMD_GLOBAL.CMD_C_SYNC_USERSTATE")
	proto.RegisterType((*CMD_C_KICKUSER)(nil), "CMD_GLOBAL.CMD_C_KICKUSER")
	proto.RegisterType((*CMD_C_KICKUSER_RESP)(nil), "CMD_GLOBAL.CMD_C_KICKUSER_RESP")
	proto.RegisterType((*CMD_SS_LOGIN_SERVER_LOCK)(nil), "CMD_GLOBAL.CMD_SS_LOGIN_SERVER_LOCK")
	proto.RegisterType((*CMD_SS_REDIRECT_CONNECT)(nil), "CMD_GLOBAL.CMD_SS_REDIRECT_CONNECT")
	proto.RegisterType((*ServerInfo)(nil), "CMD_GLOBAL.ServerInfo")
	proto.RegisterType((*CMD_SC_ONE_SERVER_INOUT)(nil), "CMD_GLOBAL.CMD_SC_ONE_SERVER_INOUT")
	proto.RegisterType((*CMD_SC_SYNC_SERVER_LIST)(nil), "CMD_GLOBAL.CMD_SC_SYNC_SERVER_LIST")
	proto.RegisterType((*CMD_SC_C_SYNC_USER_STATE)(nil), "CMD_GLOBAL.CMD_SC_C_SYNC_USER_STATE")
	proto.RegisterType((*CMD_SC_S_SYNC_USER_STATE)(nil), "CMD_GLOBAL.CMD_SC_S_SYNC_USER_STATE")
	proto.RegisterEnum("CMD_GLOBAL.CMD_C_UP_WORLD_BOSS_HURT_WorldBossName", CMD_C_UP_WORLD_BOSS_HURT_WorldBossName_name, CMD_C_UP_WORLD_BOSS_HURT_WorldBossName_value)
	proto.RegisterEnum("CMD_GLOBAL.CMD_SC_TOKEN_USER_INFO_UserInfoType", CMD_SC_TOKEN_USER_INFO_UserInfoType_name, CMD_SC_TOKEN_USER_INFO_UserInfoType_value)
	proto.RegisterEnum("CMD_GLOBAL.CMD_SS_LOGIN_SERVER_LOCK_Opt", CMD_SS_LOGIN_SERVER_LOCK_Opt_name, CMD_SS_LOGIN_SERVER_LOCK_Opt_value)
	proto.RegisterExtension(E_UserLv)
	proto.RegisterExtension(E_GunLv)
	proto.RegisterExtension(E_OnlineTime)
}

func init() { proto.RegisterFile("CMD_GlobalServer_Inner.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 2268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x5f, 0x6f, 0xe4, 0x48,
	0x11, 0x3f, 0xcf, 0x64, 0x32, 0x33, 0x35, 0x99, 0x6c, 0xce, 0xb7, 0xca, 0xce, 0x65, 0xef, 0x76,
	0x17, 0x2f, 0x87, 0xf2, 0x70, 0x97, 0xbb, 0xcd, 0x72, 0x07, 0x2c, 0x02, 0x69, 0xe2, 0x71, 0x36,
	0xd6, 0x38, 0x76, 0xd4, 0xf6, 0xec, 0x12, 0x84, 0x68, 0x39, 0xe3, 0x4e, 0x62, 0xe2, 0xb1, 0x07,
	0xdb, 0x93, 0xdd, 0xbc, 0x21, 0x24, 0x9e, 0x40, 0xf0, 0x82, 0x78, 0x85, 0x07, 0xde, 0x79, 0xe5,
	0xab, 0xf0, 0x09, 0x78, 0xe4, 0x2b, 0xa0, 0xea, 0x6e, 0x7b, 0xfe, 0x25, 0xb3, 0x07, 0x42, 0x27,
	0xf1, 0xe6, 0xaa, 0xae, 0xae, 0xae, 0xaa, 0xae, 0xaa, 0x5f, 0xb5, 0xe1, 0x23, 0xfd, 0xb8, 0x47,
	0x5f, 0x46, 0xc9, 0x99, 0x1f, 0xb9, 0x2c, 0xbd, 0x66, 0x29, 0x35, 0xe3, 0x98, 0xa5, 0x7b, 0xe3,
	0x34, 0xc9, 0x13, 0x15, 0xf8, 0xaa, 0xe5, 0x1c, 0x74, 0xad, 0x9d, 0xed, 0x45, 0x49, 0x21, 0xa3,
	0xfd, 0xbe, 0x02, 0x1d, 0x5c, 0xd2, 0xe9, 0xe0, 0x84, 0xbe, 0x76, 0x88, 0xd5, 0xa3, 0x07, 0x8e,
	0xeb, 0xd2, 0xa3, 0x01, 0xf1, 0x54, 0x15, 0xd6, 0x86, 0x49, 0x96, 0x77, 0x94, 0x27, 0xca, 0xee,
	0x1a, 0xe1, 0xdf, 0xc8, 0x0b, 0xd2, 0x64, 0xdc, 0xa9, 0x08, 0x1e, 0x7e, 0xab, 0x3b, 0xd0, 0xf0,
	0x83, 0x20, 0xcc, 0xc3, 0x24, 0xee, 0x54, 0x39, 0xbf, 0xa4, 0xd5, 0x87, 0xd0, 0x3c, 0x4b, 0xb2,
	0x8c, 0xc6, 0xfe, 0x88, 0x75, 0xd6, 0x9e, 0x28, 0xbb, 0x6d, 0xd2, 0x40, 0x86, 0xed, 0x8f, 0x18,
	0x2e, 0x46, 0x7e, 0x96, 0xd3, 0x49, 0xc6, 0xd2, 0x4e, 0x4d, 0x2c, 0x22, 0x63, 0x90, 0xb1, 0x54,
	0xfd, 0x16, 0x6c, 0x0c, 0xfd, 0x38, 0x4e, 0x62, 0x3a, 0x9a, 0x44, 0x79, 0xd8, 0x59, 0xe7, 0xeb,
	0x2d, 0xc1, 0x3b, 0x46, 0x96, 0xfa, 0x18, 0x5a, 0x57, 0x61, 0x14, 0xb1, 0x94, 0xc6, 0xe1, 0xf0,
	0xaa, 0x53, 0x7f, 0xa2, 0xec, 0x6e, 0x10, 0x10, 0x2c, 0x3b, 0x1c, 0x5e, 0x69, 0x5f, 0x40, 0xfb,
	0x75, 0x92, 0x46, 0xc1, 0x41, 0x71, 0x62, 0x1b, 0x9a, 0xaf, 0x0f, 0x6c, 0xea, 0x9a, 0xc4, 0xb0,
	0xb7, 0xde, 0x53, 0xb7, 0x60, 0x03, 0xc9, 0x13, 0xc7, 0x35, 0xcc, 0x9e, 0x63, 0x6f, 0x29, 0xda,
	0x3f, 0x15, 0x78, 0xbf, 0xdc, 0xd2, 0xcd, 0x73, 0x7f, 0x78, 0xc5, 0x52, 0x75, 0x1b, 0xd6, 0xd1,
	0x46, 0x33, 0xe0, 0xb1, 0x68, 0x13, 0x49, 0x21, 0xdf, 0x47, 0x99, 0x5c, 0xc6, 0x43, 0x52, 0x18,
	0x25, 0x6e, 0x51, 0x95, 0x5b, 0xc4, 0xbf, 0x51, 0x56, 0xd8, 0x2e, 0xc3, 0x20, 0x29, 0xe4, 0x9f,
	0xfb, 0x43, 0x66, 0x06, 0x32, 0x02, 0x92, 0x52, 0xb7, 0xa0, 0x3a, 0xf6, 0x6f, 0xa4, 0xdb, 0xf8,
	0x89, 0x71, 0xc6, 0x78, 0xbf, 0x4c, 0xa2, 0x80, 0xfb, 0xda, 0x26, 0x25, 0x8d, 0x5a, 0xae, 0xc3,
	0xb1, 0xc5, 0xae, 0x3b, 0x0d, 0xa1, 0x45, 0x50, 0x6a, 0x07, 0xea, 0x67, 0xdd, 0x61, 0x1e, 0x5e,
	0xb3, 0x4e, 0xf3, 0x89, 0xb2, 0xdb, 0x20, 0x05, 0xa9, 0xfd, 0x45, 0x11, 0xf9, 0xb3, 0x78, 0xf5,
	0x5d, 0xcf, 0xeb, 0xea, 0x7d, 0x83, 0xa8, 0x3f, 0x86, 0x16, 0xba, 0x49, 0xa5, 0x87, 0xca, 0x93,
	0xea, 0x6e, 0x6b, 0xff, 0xe3, 0xbd, 0x69, 0x56, 0xed, 0x2d, 0x05, 0x8a, 0x00, 0xee, 0xe8, 0x8a,
	0x20, 0x3c, 0x85, 0xcd, 0x30, 0xa3, 0x2c, 0x0e, 0x68, 0x72, 0x4e, 0x2f, 0x27, 0xa9, 0x08, 0x52,
	0x83, 0xb4, 0xc2, 0xcc, 0x88, 0x03, 0xe7, 0xfc, 0x68, 0x92, 0xe6, 0xf3, 0xf9, 0x51, 0x9d, 0xcf,
	0x0f, 0xed, 0x13, 0x78, 0x8a, 0xa7, 0xb9, 0x8b, 0x16, 0xea, 0x9e, 0xf9, 0xca, 0x28, 0x0d, 0xd5,
	0xfe, 0xa5, 0xc0, 0x63, 0x2e, 0xe7, 0x2e, 0x49, 0x99, 0xde, 0x29, 0x35, 0xed, 0x43, 0x47, 0xb5,
	0xa1, 0x91, 0x8c, 0x59, 0x4c, 0xa3, 0xe4, 0x42, 0x7a, 0xf2, 0x7c, 0xd6, 0x93, 0x77, 0x6c, 0xdf,
	0x73, 0xc6, 0x2c, 0xb6, 0x92, 0x0b, 0x52, 0x4f, 0xc4, 0x87, 0xfa, 0x0c, 0xd6, 0x52, 0x3f, 0xbe,
	0xea, 0x54, 0x56, 0x44, 0x05, 0xd3, 0x98, 0xf8, 0xf1, 0x15, 0xe1, 0xa2, 0x3b, 0x26, 0xd4, 0xa5,
	0x1a, 0xf4, 0x9a, 0x5b, 0x93, 0x87, 0x23, 0x26, 0x53, 0x8a, 0x9b, 0xe7, 0x85, 0x23, 0x86, 0x89,
	0x6f, 0x66, 0xd9, 0x84, 0xd1, 0x94, 0xbd, 0xf1, 0xd3, 0x40, 0xa6, 0x56, 0x8b, 0xf3, 0x08, 0x67,
	0x69, 0x3f, 0x82, 0x1d, 0x69, 0xb1, 0x3e, 0x20, 0xb3, 0x56, 0x73, 0x5f, 0x1f, 0x43, 0xcb, 0xc7,
	0x3b, 0x0e, 0xf3, 0x1b, 0x1a, 0x16, 0x29, 0x0b, 0x05, 0xcb, 0x0c, 0x34, 0xaf, 0xdc, 0x3e, 0xb3,
	0xb5, 0xe7, 0x50, 0xb7, 0x6f, 0x5a, 0xd6, 0xfc, 0x95, 0x28, 0x0b, 0x25, 0xfb, 0x21, 0x34, 0x32,
	0x2c, 0x30, 0x54, 0x5c, 0xe1, 0x6b, 0x75, 0x4e, 0x9b, 0x81, 0xf6, 0xa9, 0x68, 0x25, 0x68, 0x54,
	0xd7, 0xb2, 0xe8, 0xa1, 0xe9, 0x1e, 0xd1, 0x63, 0xc7, 0x76, 0x3d, 0x83, 0x60, 0x32, 0xc7, 0x93,
	0x11, 0xd7, 0x56, 0x23, 0xf8, 0xa9, 0x9d, 0xc2, 0x03, 0x29, 0xed, 0x7a, 0xce, 0x09, 0x3d, 0xb1,
	0xba, 0xa7, 0x06, 0xa1, 0x9e, 0x79, 0x6c, 0xa8, 0x1f, 0x03, 0x64, 0xb9, 0x9f, 0xe6, 0xd3, 0xf0,
	0x54, 0x49, 0x93, 0x73, 0x78, 0x7c, 0x1e, 0x43, 0x8b, 0x9d, 0x9f, 0xb3, 0xa1, 0x5c, 0xaf, 0x70,
	0x9d, 0x20, 0x58, 0x28, 0xa0, 0xfd, 0x6c, 0xea, 0x9e, 0xd1, 0xb5, 0xfb, 0x86, 0xfd, 0x3f, 0xd5,
	0xfe, 0x15, 0x3c, 0x92, 0xda, 0x79, 0xd8, 0x78, 0xcc, 0xa8, 0x7b, 0x64, 0x1a, 0x56, 0x8f, 0xbe,
	0xea, 0x5a, 0x03, 0x43, 0xbd, 0x0f, 0xb5, 0x6b, 0x3f, 0x9a, 0x14, 0xca, 0x05, 0xa1, 0x7d, 0x1f,
	0xb6, 0xe5, 0x3e, 0xe3, 0x27, 0xd8, 0x70, 0xd0, 0xb8, 0xbe, 0x6d, 0xb8, 0xae, 0xfa, 0x08, 0xe0,
	0x0d, 0xf3, 0xaf, 0x62, 0x96, 0x65, 0x2c, 0xe3, 0xd9, 0x59, 0x23, 0x33, 0x1c, 0xed, 0x35, 0x7c,
	0x56, 0x04, 0xd6, 0xea, 0xba, 0xae, 0xa9, 0xd3, 0x13, 0x62, 0xfe, 0xd4, 0xa0, 0x27, 0x8e, 0x63,
	0xd1, 0xc1, 0x49, 0xaf, 0xeb, 0x19, 0x54, 0x77, 0x6c, 0x8f, 0x38, 0x96, 0x48, 0x80, 0xef, 0xc0,
	0xbd, 0x8b, 0x09, 0xcb, 0x32, 0xfa, 0x26, 0x8c, 0x69, 0xea, 0xe7, 0x61, 0xc2, 0xb5, 0xb6, 0x49,
	0x9b, 0xb3, 0x5f, 0x87, 0x31, 0x41, 0xa6, 0xf6, 0x55, 0xd1, 0x01, 0xba, 0xbd, 0xde, 0x2d, 0xba,
	0x79, 0x7b, 0x1b, 0x25, 0x93, 0x38, 0x97, 0x9e, 0x48, 0x4a, 0x1b, 0xc0, 0x3d, 0x6e, 0x90, 0x4e,
	0x89, 0xf1, 0xd2, 0xe4, 0x17, 0xfc, 0x18, 0x5a, 0x99, 0x80, 0xa0, 0xfc, 0x66, 0x5c, 0xa4, 0x0d,
	0x08, 0x96, 0x77, 0x33, 0xe6, 0x59, 0x5d, 0x08, 0x24, 0x57, 0x2c, 0xe6, 0x81, 0x6d, 0x12, 0xb9,
	0xc9, 0x43, 0x96, 0x76, 0x20, 0xd5, 0xba, 0x53, 0xb5, 0x9f, 0xc3, 0x7a, 0xca, 0xb2, 0x49, 0x24,
	0x2c, 0xd8, 0xdc, 0x7f, 0x30, 0x5b, 0x68, 0x84, 0x8d, 0xa3, 0x1b, 0xc2, 0x97, 0x89, 0x14, 0xd3,
	0xce, 0xe0, 0x7d, 0x69, 0xda, 0xc9, 0xc0, 0x3d, 0xa2, 0x9e, 0xd3, 0x37, 0x6c, 0xbc, 0x10, 0x71,
	0xa8, 0xc2, 0xfb, 0xb1, 0x20, 0xd4, 0xef, 0x41, 0x93, 0xf7, 0xb7, 0x30, 0x3e, 0x4f, 0xb8, 0x39,
	0xad, 0xfd, 0x9d, 0x59, 0xf5, 0x87, 0x69, 0xc8, 0xe2, 0x00, 0x8b, 0xd8, 0x8c, 0xcf, 0x13, 0xd2,
	0x98, 0xc8, 0x2f, 0xcd, 0x94, 0xa9, 0xab, 0x17, 0xc1, 0x1f, 0xb8, 0x06, 0x11, 0x91, 0xdf, 0x83,
	0x35, 0xae, 0x4e, 0x79, 0xa7, 0x3a, 0x2e, 0xa7, 0xfd, 0x5d, 0x91, 0x59, 0xa1, 0x0b, 0x53, 0x67,
	0x54, 0xdd, 0x85, 0x39, 0xba, 0x3c, 0xa2, 0xc2, 0x03, 0xf2, 0xf9, 0x52, 0x17, 0x5b, 0xd2, 0xb4,
	0x57, 0x9c, 0x89, 0xf7, 0x20, 0xce, 0xe5, 0x30, 0xee, 0xe7, 0x45, 0xc7, 0xe5, 0xdf, 0xda, 0x67,
	0xb0, 0x31, 0x2b, 0xa9, 0x6e, 0x02, 0x0c, 0x4c, 0x8f, 0x1e, 0x76, 0x75, 0xc3, 0xec, 0x6d, 0xbd,
	0x87, 0xd8, 0x89, 0xf4, 0x2b, 0xf3, 0xc4, 0x7a, 0xb5, 0xa5, 0x68, 0x29, 0xa8, 0x87, 0x7e, 0x9c,
	0xfb, 0xd9, 0x8d, 0x95, 0xe4, 0x39, 0x4b, 0x6f, 0x70, 0xe3, 0x2a, 0xa4, 0x8c, 0x27, 0xa3, 0x33,
	0x96, 0xf2, 0x8e, 0xd9, 0x26, 0x92, 0x42, 0xbe, 0x6c, 0x73, 0xc2, 0x14, 0x49, 0xe1, 0x95, 0xc5,
	0x93, 0x91, 0x19, 0x48, 0xb0, 0x14, 0x84, 0xf6, 0xbb, 0x8a, 0x28, 0x6d, 0x9d, 0x1e, 0x76, 0x6d,
	0xaf, 0xeb, 0x9e, 0xd2, 0x1e, 0x71, 0x4e, 0xa8, 0xe5, 0x78, 0x9e, 0x41, 0x4e, 0xef, 0x3c, 0xfc,
	0x11, 0xc0, 0x30, 0x89, 0xf3, 0x34, 0x3c, 0x9b, 0xe4, 0x4c, 0xf6, 0xd3, 0x19, 0x0e, 0x02, 0x2b,
	0x9f, 0x31, 0xc6, 0x51, 0x89, 0x41, 0x05, 0xad, 0x7e, 0x04, 0xcd, 0x5f, 0x24, 0x61, 0x8c, 0xcd,
	0x20, 0x93, 0xc6, 0x4c, 0x19, 0xb8, 0x1a, 0x8e, 0xfd, 0x9b, 0x3c, 0xc9, 0xfd, 0x48, 0xe2, 0xf7,
	0x94, 0x21, 0x41, 0x39, 0x62, 0xd7, 0x12, 0xc5, 0x25, 0x55, 0x40, 0x7e, 0x58, 0xc0, 0xb8, 0xa4,
	0xca, 0xb1, 0xa1, 0x31, 0x33, 0x36, 0xec, 0x40, 0x03, 0x07, 0xaf, 0x71, 0x92, 0x44, 0x1c, 0xc1,
	0xdb, 0xa4, 0xa4, 0xb5, 0x48, 0x36, 0xba, 0x32, 0x1a, 0x32, 0x10, 0xd4, 0x32, 0x5d, 0x4f, 0xdd,
	0x2f, 0x73, 0x11, 0x21, 0xea, 0xd1, 0x5c, 0x2e, 0x2e, 0x5d, 0x9c, 0xcc, 0x8b, 0x1d, 0x68, 0x84,
	0xf2, 0xfe, 0x65, 0x7b, 0x2f, 0x69, 0xcd, 0x87, 0x6f, 0xcb, 0xf2, 0x5c, 0x3c, 0x6e, 0x1e, 0x6a,
	0x7f, 0x20, 0xa1, 0x51, 0x9c, 0xfb, 0xc9, 0x2d, 0xe7, 0x1a, 0x6f, 0x2f, 0xc3, 0x33, 0x3e, 0x1f,
	0xce, 0x43, 0xa4, 0x76, 0x00, 0x1b, 0x24, 0x49, 0x46, 0x9e, 0x9f, 0x5d, 0x1d, 0x86, 0xd9, 0xa5,
	0xfa, 0x00, 0xea, 0xe7, 0x61, 0x76, 0x39, 0x45, 0xb1, 0x75, 0x24, 0xcd, 0x00, 0x61, 0x88, 0x2f,
	0x20, 0xa8, 0x48, 0x18, 0x42, 0xda, 0x9e, 0x8c, 0x34, 0x06, 0x8d, 0x42, 0x07, 0x42, 0x59, 0x9a,
	0x24, 0xa3, 0xd9, 0x9e, 0xd4, 0x40, 0x06, 0xcf, 0xef, 0x4f, 0x61, 0x0d, 0xf7, 0x48, 0x08, 0xef,
	0xcc, 0x75, 0x96, 0x19, 0x23, 0x08, 0x97, 0x52, 0x37, 0xa1, 0x12, 0x06, 0x72, 0xbc, 0xad, 0x84,
	0x81, 0xf6, 0x57, 0xa5, 0xec, 0xe7, 0xc4, 0x71, 0x8e, 0xa9, 0xd7, 0x75, 0xfb, 0xd4, 0xf5, 0xba,
	0xc4, 0x43, 0x84, 0x19, 0x62, 0x9f, 0xa4, 0xc1, 0x9b, 0x24, 0x96, 0xc7, 0x36, 0x39, 0xa7, 0xf7,
	0x26, 0x89, 0xd5, 0x5d, 0x58, 0xcb, 0xfd, 0xac, 0x18, 0x1d, 0xee, 0xdf, 0x76, 0x2e, 0xe1, 0x12,
	0xe8, 0x65, 0x98, 0x51, 0x8e, 0x4d, 0xfc, 0xe4, 0x06, 0xa9, 0x87, 0x99, 0x8b, 0x24, 0xb6, 0xf8,
	0x3c, 0x09, 0xfc, 0x1b, 0x2a, 0x4e, 0x1a, 0xf9, 0x6f, 0x65, 0x72, 0xb6, 0x39, 0x5b, 0x47, 0xee,
	0xb1, 0xff, 0x56, 0xeb, 0x94, 0x56, 0x22, 0xdc, 0xa0, 0x81, 0xde, 0xc0, 0xa5, 0x86, 0xdd, 0x43,
	0x07, 0xee, 0xe1, 0x79, 0x4e, 0x1c, 0x85, 0x31, 0xe3, 0x1b, 0x30, 0xde, 0x57, 0x61, 0x1c, 0xcc,
	0xc4, 0x1b, 0x49, 0x33, 0xc0, 0x40, 0xca, 0xee, 0x5d, 0xe2, 0x7e, 0x43, 0x30, 0xcc, 0x40, 0x7d,
	0x0a, 0x6d, 0x3f, 0x0e, 0xd2, 0x24, 0x0c, 0x84, 0x35, 0xb2, 0x86, 0x36, 0x24, 0x53, 0xa8, 0x7e,
	0x08, 0xcd, 0x30, 0xc9, 0xa4, 0x80, 0x7c, 0x08, 0x84, 0x49, 0x26, 0x16, 0x3f, 0x84, 0xc6, 0xe5,
	0x97, 0x72, 0x4d, 0x54, 0x51, 0xfd, 0xf2, 0x4b, 0xbe, 0xa4, 0xbd, 0x04, 0x15, 0x1d, 0xb0, 0xf6,
	0x75, 0x2a, 0x2c, 0xe5, 0x6d, 0xe6, 0x19, 0xd4, 0x30, 0x2f, 0x33, 0x99, 0x64, 0x0f, 0x17, 0x83,
	0x38, 0xe3, 0x14, 0x11, 0x92, 0xda, 0x3f, 0x14, 0xa1, 0x49, 0xa7, 0x84, 0xfd, 0x72, 0xc2, 0xb2,
	0xdc, 0x88, 0x73, 0x96, 0xa2, 0xcb, 0x02, 0x05, 0x16, 0x9b, 0xc6, 0x14, 0xd1, 0x30, 0x06, 0xd2,
	0x69, 0x89, 0x68, 0xfd, 0x30, 0x5e, 0x88, 0x49, 0x95, 0x03, 0xe4, 0x34, 0x26, 0x0f, 0xa1, 0x89,
	0xe5, 0x3b, 0x7d, 0xf7, 0x6c, 0x90, 0x06, 0x32, 0xf8, 0x10, 0xf5, 0x31, 0xc0, 0xc8, 0x1f, 0x5e,
	0x86, 0x31, 0xc3, 0xad, 0x35, 0xbe, 0xda, 0x94, 0x1c, 0x33, 0xc0, 0x99, 0x7d, 0x78, 0xe9, 0xc7,
	0x31, 0x8b, 0x64, 0xdf, 0x28, 0x48, 0x6c, 0x1c, 0x59, 0x32, 0xbc, 0x62, 0x79, 0xd1, 0x38, 0x04,
	0xa5, 0x19, 0xc2, 0x35, 0xf7, 0x6b, 0xba, 0xb6, 0x5d, 0xa2, 0x6a, 0xa5, 0x68, 0xba, 0x1c, 0x3c,
	0xff, 0x58, 0x11, 0x08, 0xac, 0x53, 0xac, 0xcb, 0x77, 0x28, 0x79, 0x00, 0xf5, 0x0b, 0x7f, 0xc4,
	0xa6, 0x09, 0xb1, 0x8e, 0xe4, 0xa2, 0xeb, 0xd5, 0x05, 0xd7, 0xb7, 0x61, 0xfd, 0x82, 0xc5, 0x01,
	0x4b, 0x8b, 0x57, 0x90, 0xa0, 0x70, 0x3c, 0x18, 0x31, 0x44, 0x04, 0x9a, 0xa4, 0x41, 0xf9, 0x1a,
	0x6c, 0x09, 0x9e, 0x93, 0x16, 0x22, 0x7e, 0x96, 0x97, 0x22, 0xf2, 0x41, 0x28, 0x78, 0x42, 0x64,
	0xee, 0x4a, 0xea, 0x0b, 0x57, 0xb2, 0x70, 0xa1, 0x8d, 0xa5, 0x0b, 0x9d, 0x46, 0xb7, 0x39, 0x17,
	0xdd, 0xdf, 0x28, 0x70, 0x7f, 0x21, 0x2c, 0xf4, 0xd0, 0x0f, 0xa3, 0xbb, 0x63, 0xb3, 0x54, 0x2e,
	0x2b, 0xec, 0xa8, 0xae, 0xb0, 0x63, 0x6d, 0xce, 0x8e, 0x5f, 0x29, 0xb3, 0xd7, 0x63, 0x31, 0xff,
	0x9a, 0x7d, 0xd3, 0x26, 0xfc, 0x5a, 0x11, 0xf3, 0x95, 0x30, 0xc1, 0x39, 0x3f, 0xc7, 0x32, 0xfb,
	0xa6, 0x8d, 0xf8, 0x43, 0x05, 0xee, 0x89, 0x7f, 0x19, 0x68, 0x84, 0x9b, 0xfb, 0x39, 0xfb, 0xff,
	0x4a, 0xd3, 0xf9, 0xfa, 0xaf, 0xaf, 0xa8, 0xff, 0xc6, 0x5d, 0xf5, 0x3f, 0x9f, 0xa1, 0x7f, 0x2b,
	0x33, 0xd4, 0x3d, 0xb5, 0x75, 0x3e, 0xfa, 0x61, 0xa7, 0xe7, 0x4f, 0x91, 0xf3, 0x30, 0x95, 0xff,
	0x70, 0xda, 0x44, 0x10, 0xf8, 0x1a, 0x63, 0x65, 0x4b, 0xc3, 0xcf, 0xd5, 0xbd, 0x6c, 0xe1, 0xa2,
	0xd6, 0x96, 0x2e, 0xea, 0x19, 0xd4, 0x30, 0xda, 0x59, 0xa7, 0xb6, 0xdc, 0x8d, 0x17, 0x2e, 0x8a,
	0x08, 0x49, 0xad, 0x0b, 0x9b, 0xc2, 0xe0, 0xbe, 0xa9, 0xf7, 0xd1, 0xde, 0x95, 0xdd, 0x4a, 0x3a,
	0x5d, 0x99, 0x73, 0xba, 0x0f, 0x1f, 0xcc, 0xab, 0xa0, 0xc4, 0x70, 0x4f, 0xfe, 0xbb, 0x64, 0x44,
	0x34, 0x2c, 0x5e, 0xaf, 0x96, 0xf3, 0xd2, 0xb4, 0xa9, 0x6b, 0x90, 0x57, 0x06, 0xa1, 0x96, 0xa3,
	0xf7, 0xff, 0x63, 0xd3, 0xd4, 0x17, 0x50, 0x4d, 0xc6, 0x02, 0x07, 0x37, 0xf7, 0x77, 0x6f, 0xf9,
	0xd1, 0xb0, 0x74, 0xc6, 0x9e, 0x33, 0xce, 0x09, 0x6e, 0xd2, 0x1e, 0x42, 0xd5, 0x19, 0xe7, 0x6a,
	0x03, 0xd6, 0x90, 0xbf, 0xf5, 0x9e, 0x0a, 0xb0, 0x3e, 0xb0, 0xf9, 0xb7, 0xa2, 0xfd, 0x49, 0x29,
	0x9f, 0xcd, 0xc4, 0xe8, 0x99, 0xc4, 0xd0, 0x3d, 0x7c, 0xfa, 0xd9, 0x86, 0xee, 0xad, 0x76, 0x9c,
	0xdb, 0x35, 0x0b, 0xde, 0x9c, 0x61, 0xde, 0x72, 0xf3, 0xb3, 0xc8, 0x7e, 0x1f, 0x6a, 0x7e, 0x10,
	0xa4, 0x38, 0xf8, 0x56, 0xf1, 0xe1, 0xc4, 0x09, 0x1c, 0x53, 0xc7, 0x49, 0x5a, 0x20, 0x35, 0xff,
	0xd6, 0xfe, 0xac, 0x00, 0x88, 0x3f, 0x8b, 0xa6, 0x7c, 0x5f, 0x94, 0x33, 0x57, 0x8d, 0xf0, 0xef,
	0xd5, 0xcd, 0x60, 0x66, 0xf2, 0xa8, 0xf2, 0x3d, 0xc5, 0xe4, 0x81, 0xc3, 0x14, 0x8b, 0x22, 0x9a,
	0x0d, 0x93, 0x54, 0x20, 0x69, 0x8d, 0x34, 0x91, 0xe3, 0x22, 0x63, 0x6a, 0x61, 0xed, 0x36, 0x0b,
	0xd7, 0x67, 0x2c, 0xfc, 0x79, 0xf9, 0x6a, 0x73, 0x6c, 0xa3, 0x08, 0xbd, 0x69, 0x3b, 0x03, 0x4f,
	0xfd, 0x00, 0x6a, 0x61, 0x46, 0x43, 0x31, 0xab, 0x35, 0xc8, 0x5a, 0x98, 0x99, 0xb1, 0xba, 0x07,
	0xeb, 0xc2, 0x3a, 0xf9, 0x36, 0xdc, 0x9e, 0xbd, 0xc6, 0xa9, 0xab, 0x44, 0x4a, 0x69, 0xfd, 0x52,
	0x3f, 0xaf, 0xc1, 0xe2, 0x6e, 0x71, 0x12, 0xff, 0x02, 0xea, 0x42, 0xa8, 0x98, 0x57, 0xee, 0xd2,
	0x55, 0x88, 0x69, 0xcf, 0x65, 0x36, 0xea, 0xb3, 0x25, 0x4d, 0x45, 0x4d, 0xdf, 0x75, 0xcf, 0xda,
	0x6f, 0x95, 0x72, 0x97, 0xbb, 0xb4, 0x6b, 0x2e, 0xfa, 0xca, 0xea, 0x0a, 0xaf, 0xdc, 0x5d, 0xe1,
	0x55, 0x1e, 0x8b, 0xaf, 0x51, 0xe1, 0x2f, 0x9e, 0x4b, 0x33, 0xa3, 0x6b, 0x75, 0xc5, 0x3b, 0xb8,
	0xb3, 0x3f, 0x75, 0xc1, 0xba, 0x7e, 0xf1, 0x0c, 0xd6, 0x2f, 0x26, 0xf1, 0xbb, 0xf6, 0x3c, 0x17,
	0xcd, 0xec, 0x62, 0x12, 0x5b, 0xd7, 0x2f, 0x7e, 0x08, 0xad, 0x84, 0x4f, 0x7b, 0xfc, 0x87, 0xcd,
	0xca, 0x7d, 0xdf, 0x15, 0x7e, 0x09, 0x71, 0x2f, 0x1c, 0xb1, 0x83, 0xca, 0x51, 0xf5, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xab, 0x02, 0x88, 0xd4, 0x46, 0x17, 0x00, 0x00,
}
