// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CMD_NN_Game_GM.CMD

/*
Package CMD_NN is a generated protocol buffer package.

Namespace: MESSAGE

It is generated from these files:
	CMD_NN_Game_GM.CMD

It has these top-level messages:
	CMD_S_GM_GameInfo
	CMD_C_Screen_Control
	CMD_C_UserControl
	CMD_C_AreaControl
	CMD_C_Card_Config
	CMD_GM_S_SysMessage
	CMD_GM_S_UpdateUserDownInfo
	CMD_GM_C_BankerControl
*/
package CMD_NN

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the CMD package it is being compiled against.
// A compilation error at this line likely means your copy of the
// CMD package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the CMD package

type CMD_S_GM_GameInfo struct {
	BankerName       []byte  `protobuf:"bytes,1,opt,name=banker_name,json=bankerName" json:"banker_name,omitempty"`
	TotalBoard       *uint32 `protobuf:"varint,2,opt,name=total_board,json=totalBoard" json:"total_board,omitempty"`
	CurrentStore     *uint64 `protobuf:"varint,3,opt,name=current_store,json=currentStore" json:"current_store,omitempty"`
	StoreDownLine    *uint64 `protobuf:"varint,4,opt,name=store_down_line,json=storeDownLine" json:"store_down_line,omitempty"`
	IsAndroid        *bool   `protobuf:"varint,5,opt,name=is_android,json=isAndroid" json:"is_android,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_GM_GameInfo) Reset()                    { *m = CMD_S_GM_GameInfo{} }
func (m *CMD_S_GM_GameInfo) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GM_GameInfo) ProtoMessage()               {}
func (*CMD_S_GM_GameInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CMD_S_GM_GameInfo) GetBankerName() []byte {
	if m != nil {
		return m.BankerName
	}
	return nil
}

func (m *CMD_S_GM_GameInfo) GetTotalBoard() uint32 {
	if m != nil && m.TotalBoard != nil {
		return *m.TotalBoard
	}
	return 0
}

func (m *CMD_S_GM_GameInfo) GetCurrentStore() uint64 {
	if m != nil && m.CurrentStore != nil {
		return *m.CurrentStore
	}
	return 0
}

func (m *CMD_S_GM_GameInfo) GetStoreDownLine() uint64 {
	if m != nil && m.StoreDownLine != nil {
		return *m.StoreDownLine
	}
	return 0
}

func (m *CMD_S_GM_GameInfo) GetIsAndroid() bool {
	if m != nil && m.IsAndroid != nil {
		return *m.IsAndroid
	}
	return false
}

// 筛选控制
type CMD_C_Screen_Control struct {
	SysWin           *bool   `protobuf:"varint,1,opt,name=sys_win,json=sysWin" json:"sys_win,omitempty"`
	Cbtype           *uint32 `protobuf:"varint,2,opt,name=cbtype" json:"cbtype,omitempty"`
	MaxScore         *int64  `protobuf:"varint,3,opt,name=max_score,json=maxScore" json:"max_score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_Screen_Control) Reset()                    { *m = CMD_C_Screen_Control{} }
func (m *CMD_C_Screen_Control) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_Screen_Control) ProtoMessage()               {}
func (*CMD_C_Screen_Control) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CMD_C_Screen_Control) GetSysWin() bool {
	if m != nil && m.SysWin != nil {
		return *m.SysWin
	}
	return false
}

func (m *CMD_C_Screen_Control) GetCbtype() uint32 {
	if m != nil && m.Cbtype != nil {
		return *m.Cbtype
	}
	return 0
}

func (m *CMD_C_Screen_Control) GetMaxScore() int64 {
	if m != nil && m.MaxScore != nil {
		return *m.MaxScore
	}
	return 0
}

// 用户控制
type CMD_C_UserControl struct {
	UserWin          *bool   `protobuf:"varint,1,opt,name=user_win,json=userWin" json:"user_win,omitempty"`
	GameId           *uint32 `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Cbtype           *int32  `protobuf:"varint,3,opt,name=cbtype" json:"cbtype,omitempty"`
	MaxScore         *int64  `protobuf:"varint,4,opt,name=max_score,json=maxScore" json:"max_score,omitempty"`
	UserId           *uint32 `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_UserControl) Reset()                    { *m = CMD_C_UserControl{} }
func (m *CMD_C_UserControl) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_UserControl) ProtoMessage()               {}
func (*CMD_C_UserControl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CMD_C_UserControl) GetUserWin() bool {
	if m != nil && m.UserWin != nil {
		return *m.UserWin
	}
	return false
}

func (m *CMD_C_UserControl) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *CMD_C_UserControl) GetCbtype() int32 {
	if m != nil && m.Cbtype != nil {
		return *m.Cbtype
	}
	return 0
}

func (m *CMD_C_UserControl) GetMaxScore() int64 {
	if m != nil && m.MaxScore != nil {
		return *m.MaxScore
	}
	return 0
}

func (m *CMD_C_UserControl) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 区域控制
type CMD_C_AreaControl struct {
	AreaWin          []bool `protobuf:"varint,1,rep,name=area_win,json=areaWin" json:"area_win,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_AreaControl) Reset()                    { *m = CMD_C_AreaControl{} }
func (m *CMD_C_AreaControl) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_AreaControl) ProtoMessage()               {}
func (*CMD_C_AreaControl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CMD_C_AreaControl) GetAreaWin() []bool {
	if m != nil {
		return m.AreaWin
	}
	return nil
}

// 配牌数据
type CMD_C_Card_Config struct {
	CbSendCardData   []uint32 `protobuf:"varint,1,rep,name=cbSendCardData" json:"cbSendCardData,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_C_Card_Config) Reset()                    { *m = CMD_C_Card_Config{} }
func (m *CMD_C_Card_Config) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_Card_Config) ProtoMessage()               {}
func (*CMD_C_Card_Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CMD_C_Card_Config) GetCbSendCardData() []uint32 {
	if m != nil {
		return m.CbSendCardData
	}
	return nil
}

// 消息处理
type CMD_GM_S_SysMessage struct {
	SysType          *uint32 `protobuf:"varint,1,opt,name=sys_type,json=sysType" json:"sys_type,omitempty"`
	SysMessage       []byte  `protobuf:"bytes,2,opt,name=sys_message,json=sysMessage" json:"sys_message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_GM_S_SysMessage) Reset()                    { *m = CMD_GM_S_SysMessage{} }
func (m *CMD_GM_S_SysMessage) String() string            { return proto.CompactTextString(m) }
func (*CMD_GM_S_SysMessage) ProtoMessage()               {}
func (*CMD_GM_S_SysMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CMD_GM_S_SysMessage) GetSysType() uint32 {
	if m != nil && m.SysType != nil {
		return *m.SysType
	}
	return 0
}

func (m *CMD_GM_S_SysMessage) GetSysMessage() []byte {
	if m != nil {
		return m.SysMessage
	}
	return nil
}

type CMD_GM_S_UpdateUserDownInfo struct {
	UserLeftScore         *int64 `protobuf:"varint,1,opt,name=user_left_score,json=userLeftScore" json:"user_left_score,omitempty"`
	UserId                *int32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChipIndex             *int32 `protobuf:"varint,3,opt,name=chip_index,json=chipIndex" json:"chip_index,omitempty"`
	DownScore             *int64 `protobuf:"varint,4,opt,name=down_score,json=downScore" json:"down_score,omitempty"`
	AllPlayerDownScore    *int64 `protobuf:"varint,5,opt,name=all_player_down_score,json=allPlayerDownScore" json:"all_player_down_score,omitempty"`
	AllRedPlayerDownScore *int64 `protobuf:"varint,6,opt,name=all_red_player_down_score,json=allRedPlayerDownScore" json:"all_red_player_down_score,omitempty"`
	XXX_unrecognized      []byte `json:"-"`
}

func (m *CMD_GM_S_UpdateUserDownInfo) Reset()                    { *m = CMD_GM_S_UpdateUserDownInfo{} }
func (m *CMD_GM_S_UpdateUserDownInfo) String() string            { return proto.CompactTextString(m) }
func (*CMD_GM_S_UpdateUserDownInfo) ProtoMessage()               {}
func (*CMD_GM_S_UpdateUserDownInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CMD_GM_S_UpdateUserDownInfo) GetUserLeftScore() int64 {
	if m != nil && m.UserLeftScore != nil {
		return *m.UserLeftScore
	}
	return 0
}

func (m *CMD_GM_S_UpdateUserDownInfo) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_GM_S_UpdateUserDownInfo) GetChipIndex() int32 {
	if m != nil && m.ChipIndex != nil {
		return *m.ChipIndex
	}
	return 0
}

func (m *CMD_GM_S_UpdateUserDownInfo) GetDownScore() int64 {
	if m != nil && m.DownScore != nil {
		return *m.DownScore
	}
	return 0
}

func (m *CMD_GM_S_UpdateUserDownInfo) GetAllPlayerDownScore() int64 {
	if m != nil && m.AllPlayerDownScore != nil {
		return *m.AllPlayerDownScore
	}
	return 0
}

func (m *CMD_GM_S_UpdateUserDownInfo) GetAllRedPlayerDownScore() int64 {
	if m != nil && m.AllRedPlayerDownScore != nil {
		return *m.AllRedPlayerDownScore
	}
	return 0
}

type CMD_GM_C_BankerControl struct {
	BankerCardType   *int32  `protobuf:"varint,1,opt,name=banker_card_type,json=bankerCardType" json:"banker_card_type,omitempty"`
	PlayerTypes      []int32 `protobuf:"varint,2,rep,name=player_types,json=playerTypes" json:"player_types,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_GM_C_BankerControl) Reset()                    { *m = CMD_GM_C_BankerControl{} }
func (m *CMD_GM_C_BankerControl) String() string            { return proto.CompactTextString(m) }
func (*CMD_GM_C_BankerControl) ProtoMessage()               {}
func (*CMD_GM_C_BankerControl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CMD_GM_C_BankerControl) GetBankerCardType() int32 {
	if m != nil && m.BankerCardType != nil {
		return *m.BankerCardType
	}
	return 0
}

func (m *CMD_GM_C_BankerControl) GetPlayerTypes() []int32 {
	if m != nil {
		return m.PlayerTypes
	}
	return nil
}

func init() {
	proto.RegisterType((*CMD_S_GM_GameInfo)(nil), "CMD_NN.CMD_S_GM_GameInfo")
	proto.RegisterType((*CMD_C_Screen_Control)(nil), "CMD_NN.CMD_C_Screen_Control")
	proto.RegisterType((*CMD_C_UserControl)(nil), "CMD_NN.CMD_C_UserControl")
	proto.RegisterType((*CMD_C_AreaControl)(nil), "CMD_NN.CMD_C_AreaControl")
	proto.RegisterType((*CMD_C_Card_Config)(nil), "CMD_NN.CMD_C_Card_Config")
	proto.RegisterType((*CMD_GM_S_SysMessage)(nil), "CMD_NN.CMD_GM_S_SysMessage")
	proto.RegisterType((*CMD_GM_S_UpdateUserDownInfo)(nil), "CMD_NN.CMD_GM_S_UpdateUserDownInfo")
	proto.RegisterType((*CMD_GM_C_BankerControl)(nil), "CMD_NN.CMD_GM_C_BankerControl")
}

func init() { proto.RegisterFile("CMD_NN_Game_GM.CMD", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xd1, 0x4e, 0xdb, 0x3e,
	0x14, 0xc6, 0x95, 0x96, 0x96, 0xf6, 0xd0, 0xc0, 0xff, 0x9f, 0x6d, 0x10, 0x84, 0x26, 0xba, 0x4c,
	0x42, 0xb9, 0x42, 0xda, 0xdd, 0xa4, 0x5d, 0x41, 0x2a, 0x75, 0x95, 0x28, 0xda, 0x9c, 0x21, 0x2e,
	0x2d, 0x37, 0x3e, 0x65, 0xd6, 0x12, 0xa7, 0xb2, 0x83, 0x68, 0x1f, 0x61, 0x0f, 0xb0, 0x07, 0xda,
	0x9b, 0x4d, 0xc7, 0x49, 0xaa, 0x8e, 0x71, 0x97, 0xf3, 0xf9, 0x3b, 0xfe, 0x8e, 0x7f, 0x76, 0xe0,
	0x75, 0x32, 0x9f, 0xf0, 0xdb, 0x5b, 0x3e, 0x15, 0x05, 0xf2, 0xe9, 0xfc, 0x72, 0x65, 0xca, 0xaa,
	0x0c, 0xfa, 0xb5, 0x1a, 0xfd, 0xf6, 0xe0, 0x7f, 0xfa, 0x4c, 0xf9, 0x74, 0xee, 0x2c, 0x33, 0xbd,
	0x2c, 0x83, 0x73, 0x38, 0x58, 0x08, 0xfd, 0x03, 0x0d, 0xd7, 0xa2, 0xc0, 0xd0, 0x1b, 0x7b, 0xf1,
	0x88, 0x41, 0x2d, 0xdd, 0x8a, 0x02, 0xc9, 0x50, 0x95, 0x95, 0xc8, 0xf9, 0xa2, 0x14, 0x46, 0x86,
	0x9d, 0xb1, 0x17, 0xfb, 0x0c, 0x9c, 0x74, 0x4d, 0x4a, 0xf0, 0x1e, 0xfc, 0xec, 0xd1, 0x18, 0xd4,
	0x15, 0xb7, 0x55, 0x69, 0x30, 0xec, 0x8e, 0xbd, 0x78, 0x8f, 0x8d, 0x1a, 0x31, 0x25, 0x2d, 0xb8,
	0x80, 0x23, 0xb7, 0xc8, 0x65, 0xf9, 0xa4, 0x79, 0xae, 0x34, 0x86, 0x7b, 0xce, 0xe6, 0x3b, 0x79,
	0x52, 0x3e, 0xe9, 0x1b, 0xa5, 0x31, 0x78, 0x0b, 0xa0, 0x2c, 0x17, 0x5a, 0x9a, 0x52, 0xc9, 0xb0,
	0x37, 0xf6, 0xe2, 0x01, 0x1b, 0x2a, 0x7b, 0x55, 0x0b, 0x91, 0xac, 0xcf, 0x98, 0xf0, 0x34, 0x33,
	0x88, 0x9a, 0x27, 0xa5, 0xae, 0x4c, 0x99, 0x07, 0x27, 0xb0, 0x6f, 0x37, 0x96, 0x3f, 0x29, 0xed,
	0x4e, 0x30, 0x60, 0x7d, 0xbb, 0xb1, 0xf7, 0x4a, 0x07, 0xc7, 0xd0, 0xcf, 0x16, 0xd5, 0x66, 0x85,
	0xcd, 0xe0, 0x4d, 0x15, 0x9c, 0xc1, 0xb0, 0x10, 0x6b, 0x6e, 0xb3, 0x76, 0xe0, 0x2e, 0x1b, 0x14,
	0x62, 0x9d, 0x52, 0x1d, 0xfd, 0x6a, 0x48, 0x25, 0xfc, 0xce, 0xa2, 0x69, 0x33, 0x4e, 0x61, 0xf0,
	0x68, 0xd1, 0xec, 0x84, 0xec, 0x53, 0x4d, 0x29, 0x27, 0xb0, 0xff, 0x40, 0xcc, 0x55, 0xcb, 0xa7,
	0x4f, 0xe5, 0x4c, 0xee, 0xc4, 0x53, 0x46, 0xef, 0xe5, 0xf8, 0xbd, 0xbf, 0xe3, 0x69, 0x37, 0x17,
	0xd4, 0x00, 0xf0, 0x59, 0x9f, 0xca, 0x99, 0x8c, 0x2e, 0xdb, 0xb1, 0xae, 0x0c, 0x8a, 0x9d, 0xb1,
	0x84, 0x41, 0xd1, 0x8c, 0xd5, 0xa5, 0xb1, 0xa8, 0xbe, 0x57, 0x3a, 0xfa, 0xd4, 0xfa, 0x13, 0x61,
	0x24, 0xb1, 0x5a, 0xaa, 0x87, 0xe0, 0x02, 0x0e, 0xb3, 0x45, 0x8a, 0x5a, 0x92, 0x38, 0x11, 0x95,
	0x70, 0x5d, 0x3e, 0x7b, 0xa6, 0x46, 0x5f, 0xe1, 0x15, 0x35, 0x4f, 0xe7, 0x3c, 0xe5, 0xe9, 0xc6,
	0xce, 0xd1, 0x5a, 0xf1, 0x80, 0x14, 0x47, 0xa4, 0xdd, 0x99, 0x3c, 0x37, 0x1d, 0x91, 0xff, 0x46,
	0x87, 0x3a, 0x87, 0x03, 0x5a, 0x2a, 0x6a, 0xa7, 0x23, 0x31, 0x62, 0x60, 0xb7, 0xbd, 0xd1, 0xcf,
	0x0e, 0x9c, 0x6d, 0xf7, 0xbc, 0x5b, 0x49, 0x51, 0x21, 0x01, 0xa6, 0xcb, 0x77, 0x6f, 0xf1, 0x02,
	0x8e, 0xdc, 0xc1, 0x73, 0x5c, 0x56, 0x0d, 0x1b, 0xcf, 0xb1, 0xf1, 0x49, 0xbe, 0xc1, 0x65, 0xf5,
	0x0f, 0xa0, 0x4e, 0x8d, 0xb5, 0x06, 0x44, 0xaf, 0x27, 0xfb, 0xae, 0x56, 0x5c, 0x69, 0x89, 0xeb,
	0x06, 0xf9, 0x90, 0x94, 0x19, 0x09, 0xb4, 0xec, 0x9e, 0xdf, 0x2e, 0xf6, 0x21, 0x29, 0xf5, 0xb6,
	0x1f, 0xe0, 0x8d, 0xc8, 0x73, 0xbe, 0xca, 0xc5, 0x06, 0x0d, 0xdf, 0x71, 0xf6, 0x9c, 0x33, 0x10,
	0x79, 0xfe, 0xc5, 0xad, 0x4d, 0xb6, 0x2d, 0x1f, 0xe1, 0x94, 0x5a, 0x0c, 0xca, 0x17, 0xda, 0xfa,
	0xae, 0x8d, 0xf6, 0x64, 0x28, 0x9f, 0x75, 0x46, 0x08, 0xc7, 0x0d, 0x8a, 0x84, 0x5f, 0xbb, 0xbf,
	0xad, 0xbd, 0xd0, 0x18, 0xfe, 0x6b, 0xfe, 0xc8, 0x8c, 0xae, 0x6d, 0x4b, 0xba, 0xc7, 0x0e, 0x6b,
	0x9d, 0xae, 0xc8, 0x01, 0x7f, 0x07, 0xa3, 0x26, 0x95, 0x4c, 0x36, 0xec, 0x8c, 0xbb, 0x71, 0x8f,
	0x1d, 0xd4, 0x1a, 0x39, 0xec, 0x75, 0xe7, 0x73, 0xf7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58,
	0xa4, 0xd2, 0x29, 0x17, 0x04, 0x00, 0x00,
}
