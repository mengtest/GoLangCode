// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CMD_SGJ_Game.CMD

/*
Package CMD_SGJ is a generated protocol buffer package.

Namespace: MESSAGE

It is generated from these files:
	CMD_SGJ_Game.CMD

It has these top-level messages:
	CMD_SUB_C_REQ_BANKER
	CMD_SUB_S_REQ_BANKER
	CMD_Userinfo_S
	CMD_UserChip_ST
	CMD_Sence_Free
	CMD_ExtraBonus_ST
	CMD_GameStart_S
	CMD_GameEnd_Info_S
	CMD_UpdataChip_S
	CMD_SysMessage_S
	CMD_Gameinfo_S
	CMD_GameOpenLog_S
	CMD_Control_UserLeave_S
	CMD_Control_DealRet_S
	CMD_GameResultinfo_S
	CMD_Control_Update_S
	CMD_ChipSucc_S
	CMD_ClearUserChip_S
	CMD_ContinueChipResult_S
	CMD_SelfResult_S
	CMD_UpdateSelfScore_S
	CMD_Control_UserInfo_S
	CMD_Control_StockInfo_S
	CMD_Control_UserChip_S
	CMD_UserChipNotify_S
	CMD_UserContinue_ChipNotify_S
	CMD_ReqBanker_Result
	CMD_WaitBankerUserInfo
	CMD_BankerUserInfo
	CMD_BankerResult_S
	CMD_EMPTY_MESSAGE_S
	CMD_Control_SelectDst_C
	CMD_UserChip_C
	CMD_StartGame_Single
	CMD_UserContinueChip_C
	CMD_Control_SetDst_C
	CMD_ReqBanker_C
	CMD_Control_UserTotalChipInfo_S
	CMD_SUB_C_ONLINE_TOTAL
	CMD_SUB_S_ONLINE_TOTAL
	CMD_SUB_C_ROBBANK
	CMD_SUB_S_AndroidUpdateChip
*/
package CMD_SGJ

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the CMD package it is being compiled against.
// A compilation error at this line likely means your copy of the
// CMD package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the CMD package

// 请求上庄
type CMD_SUB_C_REQ_BANKER struct {
	ReqType          *int32 `protobuf:"varint,1,opt,name=req_type,json=reqType" json:"req_type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_SUB_C_REQ_BANKER) Reset()                    { *m = CMD_SUB_C_REQ_BANKER{} }
func (m *CMD_SUB_C_REQ_BANKER) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_C_REQ_BANKER) ProtoMessage()               {}
func (*CMD_SUB_C_REQ_BANKER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CMD_SUB_C_REQ_BANKER) GetReqType() int32 {
	if m != nil && m.ReqType != nil {
		return *m.ReqType
	}
	return 0
}

type CMD_SUB_S_REQ_BANKER struct {
	ReqResultInfo    []byte `protobuf:"bytes,1,opt,name=req_result_info,json=reqResultInfo" json:"req_result_info,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_SUB_S_REQ_BANKER) Reset()                    { *m = CMD_SUB_S_REQ_BANKER{} }
func (m *CMD_SUB_S_REQ_BANKER) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_S_REQ_BANKER) ProtoMessage()               {}
func (*CMD_SUB_S_REQ_BANKER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CMD_SUB_S_REQ_BANKER) GetReqResultInfo() []byte {
	if m != nil {
		return m.ReqResultInfo
	}
	return nil
}

type CMD_Userinfo_S struct {
	UserScore              *int64   `protobuf:"varint,1,opt,name=user_score,json=userScore" json:"user_score,omitempty"`
	NickName               []byte   `protobuf:"bytes,2,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	ChipValue              []uint32 `protobuf:"varint,3,rep,name=chip_value,json=chipValue" json:"chip_value,omitempty"`
	BankerScoreRequest     *int64   `protobuf:"varint,4,opt,name=banker_score_request,json=bankerScoreRequest" json:"banker_score_request,omitempty"`
	ChipUpLimit            *int32   `protobuf:"varint,5,opt,name=chip_up_limit,json=chipUpLimit" json:"chip_up_limit,omitempty"`
	PersonalPrizePool      *int64   `protobuf:"varint,6,opt,name=personal_prize_pool,json=personalPrizePool" json:"personal_prize_pool,omitempty"`
	PersonalPrizePoolLimit *int64   `protobuf:"varint,7,opt,name=personal_prize_pool_limit,json=personalPrizePoolLimit" json:"personal_prize_pool_limit,omitempty"`
	XXX_unrecognized       []byte   `json:"-"`
}

func (m *CMD_Userinfo_S) Reset()                    { *m = CMD_Userinfo_S{} }
func (m *CMD_Userinfo_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_Userinfo_S) ProtoMessage()               {}
func (*CMD_Userinfo_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CMD_Userinfo_S) GetUserScore() int64 {
	if m != nil && m.UserScore != nil {
		return *m.UserScore
	}
	return 0
}

func (m *CMD_Userinfo_S) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *CMD_Userinfo_S) GetChipValue() []uint32 {
	if m != nil {
		return m.ChipValue
	}
	return nil
}

func (m *CMD_Userinfo_S) GetBankerScoreRequest() int64 {
	if m != nil && m.BankerScoreRequest != nil {
		return *m.BankerScoreRequest
	}
	return 0
}

func (m *CMD_Userinfo_S) GetChipUpLimit() int32 {
	if m != nil && m.ChipUpLimit != nil {
		return *m.ChipUpLimit
	}
	return 0
}

func (m *CMD_Userinfo_S) GetPersonalPrizePool() int64 {
	if m != nil && m.PersonalPrizePool != nil {
		return *m.PersonalPrizePool
	}
	return 0
}

func (m *CMD_Userinfo_S) GetPersonalPrizePoolLimit() int64 {
	if m != nil && m.PersonalPrizePoolLimit != nil {
		return *m.PersonalPrizePoolLimit
	}
	return 0
}

type CMD_UserChip_ST struct {
	UserChip         []int64 `protobuf:"varint,1,rep,name=user_chip,json=userChip" json:"user_chip,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_UserChip_ST) Reset()                    { *m = CMD_UserChip_ST{} }
func (m *CMD_UserChip_ST) String() string            { return proto.CompactTextString(m) }
func (*CMD_UserChip_ST) ProtoMessage()               {}
func (*CMD_UserChip_ST) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CMD_UserChip_ST) GetUserChip() []int64 {
	if m != nil {
		return m.UserChip
	}
	return nil
}

type CMD_Sence_Free struct {
	GameStatus       *uint32          `protobuf:"varint,1,opt,name=game_status,json=gameStatus" json:"game_status,omitempty"`
	UserScore        *int64           `protobuf:"varint,2,opt,name=user_score,json=userScore" json:"user_score,omitempty"`
	UserChip         *CMD_UserChip_ST `protobuf:"bytes,3,opt,name=user_chip,json=userChip" json:"user_chip,omitempty"`
	AllUserChip      *CMD_UserChip_ST `protobuf:"bytes,4,opt,name=all_user_chip,json=allUserChip" json:"all_user_chip,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_Sence_Free) Reset()                    { *m = CMD_Sence_Free{} }
func (m *CMD_Sence_Free) String() string            { return proto.CompactTextString(m) }
func (*CMD_Sence_Free) ProtoMessage()               {}
func (*CMD_Sence_Free) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CMD_Sence_Free) GetGameStatus() uint32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *CMD_Sence_Free) GetUserScore() int64 {
	if m != nil && m.UserScore != nil {
		return *m.UserScore
	}
	return 0
}

func (m *CMD_Sence_Free) GetUserChip() *CMD_UserChip_ST {
	if m != nil {
		return m.UserChip
	}
	return nil
}

func (m *CMD_Sence_Free) GetAllUserChip() *CMD_UserChip_ST {
	if m != nil {
		return m.AllUserChip
	}
	return nil
}

type CMD_ExtraBonus_ST struct {
	DstIndex         *uint32 `protobuf:"varint,1,opt,name=dst_index,json=dstIndex" json:"dst_index,omitempty"`
	DstPos           *uint32 `protobuf:"varint,2,opt,name=dst_pos,json=dstPos" json:"dst_pos,omitempty"`
	UserGetScore     *int64  `protobuf:"varint,3,opt,name=user_get_score,json=userGetScore" json:"user_get_score,omitempty"`
	AllGetScore      *int64  `protobuf:"varint,4,opt,name=all_get_score,json=allGetScore" json:"all_get_score,omitempty"`
	Rverse           *bool   `protobuf:"varint,5,opt,name=rverse" json:"rverse,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_ExtraBonus_ST) Reset()                    { *m = CMD_ExtraBonus_ST{} }
func (m *CMD_ExtraBonus_ST) String() string            { return proto.CompactTextString(m) }
func (*CMD_ExtraBonus_ST) ProtoMessage()               {}
func (*CMD_ExtraBonus_ST) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CMD_ExtraBonus_ST) GetDstIndex() uint32 {
	if m != nil && m.DstIndex != nil {
		return *m.DstIndex
	}
	return 0
}

func (m *CMD_ExtraBonus_ST) GetDstPos() uint32 {
	if m != nil && m.DstPos != nil {
		return *m.DstPos
	}
	return 0
}

func (m *CMD_ExtraBonus_ST) GetUserGetScore() int64 {
	if m != nil && m.UserGetScore != nil {
		return *m.UserGetScore
	}
	return 0
}

func (m *CMD_ExtraBonus_ST) GetAllGetScore() int64 {
	if m != nil && m.AllGetScore != nil {
		return *m.AllGetScore
	}
	return 0
}

func (m *CMD_ExtraBonus_ST) GetRverse() bool {
	if m != nil && m.Rverse != nil {
		return *m.Rverse
	}
	return false
}

type CMD_GameStart_S struct {
	DstType          *uint32              `protobuf:"varint,1,opt,name=dst_type,json=dstType" json:"dst_type,omitempty"`
	DstIndex         *uint32              `protobuf:"varint,2,opt,name=dst_index,json=dstIndex" json:"dst_index,omitempty"`
	LastPos          *uint32              `protobuf:"varint,3,opt,name=last_pos,json=lastPos" json:"last_pos,omitempty"`
	DstPos           *uint32              `protobuf:"varint,4,opt,name=dst_pos,json=dstPos" json:"dst_pos,omitempty"`
	UserGetScore     *int64               `protobuf:"varint,5,opt,name=user_get_score,json=userGetScore" json:"user_get_score,omitempty"`
	AllGetScore      *int64               `protobuf:"varint,6,opt,name=all_get_score,json=allGetScore" json:"all_get_score,omitempty"`
	ExtraBonus       []*CMD_ExtraBonus_ST `protobuf:"bytes,7,rep,name=extra_bonus,json=extraBonus" json:"extra_bonus,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *CMD_GameStart_S) Reset()                    { *m = CMD_GameStart_S{} }
func (m *CMD_GameStart_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_GameStart_S) ProtoMessage()               {}
func (*CMD_GameStart_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CMD_GameStart_S) GetDstType() uint32 {
	if m != nil && m.DstType != nil {
		return *m.DstType
	}
	return 0
}

func (m *CMD_GameStart_S) GetDstIndex() uint32 {
	if m != nil && m.DstIndex != nil {
		return *m.DstIndex
	}
	return 0
}

func (m *CMD_GameStart_S) GetLastPos() uint32 {
	if m != nil && m.LastPos != nil {
		return *m.LastPos
	}
	return 0
}

func (m *CMD_GameStart_S) GetDstPos() uint32 {
	if m != nil && m.DstPos != nil {
		return *m.DstPos
	}
	return 0
}

func (m *CMD_GameStart_S) GetUserGetScore() int64 {
	if m != nil && m.UserGetScore != nil {
		return *m.UserGetScore
	}
	return 0
}

func (m *CMD_GameStart_S) GetAllGetScore() int64 {
	if m != nil && m.AllGetScore != nil {
		return *m.AllGetScore
	}
	return 0
}

func (m *CMD_GameStart_S) GetExtraBonus() []*CMD_ExtraBonus_ST {
	if m != nil {
		return m.ExtraBonus
	}
	return nil
}

type CMD_GameEnd_Info_S struct {
	BankerUserid     *uint32  `protobuf:"varint,1,opt,name=banker_userid,json=bankerUserid" json:"banker_userid,omitempty"`
	BankerName       []byte   `protobuf:"bytes,2,opt,name=banker_name,json=bankerName" json:"banker_name,omitempty"`
	BankerWin        *int64   `protobuf:"varint,3,opt,name=banker_win,json=bankerWin" json:"banker_win,omitempty"`
	UserCount        *uint32  `protobuf:"varint,4,opt,name=user_count,json=userCount" json:"user_count,omitempty"`
	NickName         [][]byte `protobuf:"bytes,5,rep,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	UserWin          []int64  `protobuf:"varint,6,rep,name=user_win,json=userWin" json:"user_win,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_GameEnd_Info_S) Reset()                    { *m = CMD_GameEnd_Info_S{} }
func (m *CMD_GameEnd_Info_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_GameEnd_Info_S) ProtoMessage()               {}
func (*CMD_GameEnd_Info_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CMD_GameEnd_Info_S) GetBankerUserid() uint32 {
	if m != nil && m.BankerUserid != nil {
		return *m.BankerUserid
	}
	return 0
}

func (m *CMD_GameEnd_Info_S) GetBankerName() []byte {
	if m != nil {
		return m.BankerName
	}
	return nil
}

func (m *CMD_GameEnd_Info_S) GetBankerWin() int64 {
	if m != nil && m.BankerWin != nil {
		return *m.BankerWin
	}
	return 0
}

func (m *CMD_GameEnd_Info_S) GetUserCount() uint32 {
	if m != nil && m.UserCount != nil {
		return *m.UserCount
	}
	return 0
}

func (m *CMD_GameEnd_Info_S) GetNickName() [][]byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *CMD_GameEnd_Info_S) GetUserWin() []int64 {
	if m != nil {
		return m.UserWin
	}
	return nil
}

type CMD_UpdataChip_S struct {
	UserChip         *CMD_UserChip_ST `protobuf:"bytes,1,opt,name=user_chip,json=userChip" json:"user_chip,omitempty"`
	AllServerChip    *CMD_UserChip_ST `protobuf:"bytes,2,opt,name=all_server_chip,json=allServerChip" json:"all_server_chip,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_UpdataChip_S) Reset()                    { *m = CMD_UpdataChip_S{} }
func (m *CMD_UpdataChip_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_UpdataChip_S) ProtoMessage()               {}
func (*CMD_UpdataChip_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CMD_UpdataChip_S) GetUserChip() *CMD_UserChip_ST {
	if m != nil {
		return m.UserChip
	}
	return nil
}

func (m *CMD_UpdataChip_S) GetAllServerChip() *CMD_UserChip_ST {
	if m != nil {
		return m.AllServerChip
	}
	return nil
}

type CMD_SysMessage_S struct {
	SysType          *uint32 `protobuf:"varint,1,opt,name=sys_type,json=sysType" json:"sys_type,omitempty"`
	SysMessage       []byte  `protobuf:"bytes,2,opt,name=sys_message,json=sysMessage" json:"sys_message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SysMessage_S) Reset()                    { *m = CMD_SysMessage_S{} }
func (m *CMD_SysMessage_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_SysMessage_S) ProtoMessage()               {}
func (*CMD_SysMessage_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CMD_SysMessage_S) GetSysType() uint32 {
	if m != nil && m.SysType != nil {
		return *m.SysType
	}
	return 0
}

func (m *CMD_SysMessage_S) GetSysMessage() []byte {
	if m != nil {
		return m.SysMessage
	}
	return nil
}

// 游戏的数据
type CMD_Gameinfo_S struct {
	GmaeStatus       *uint32 `protobuf:"varint,1,opt,name=gmae_status,json=gmaeStatus" json:"gmae_status,omitempty"`
	TimerValue       *uint32 `protobuf:"varint,2,opt,name=timer_value,json=timerValue" json:"timer_value,omitempty"`
	Pond             *int64  `protobuf:"varint,3,opt,name=pond" json:"pond,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_Gameinfo_S) Reset()                    { *m = CMD_Gameinfo_S{} }
func (m *CMD_Gameinfo_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_Gameinfo_S) ProtoMessage()               {}
func (*CMD_Gameinfo_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CMD_Gameinfo_S) GetGmaeStatus() uint32 {
	if m != nil && m.GmaeStatus != nil {
		return *m.GmaeStatus
	}
	return 0
}

func (m *CMD_Gameinfo_S) GetTimerValue() uint32 {
	if m != nil && m.TimerValue != nil {
		return *m.TimerValue
	}
	return 0
}

func (m *CMD_Gameinfo_S) GetPond() int64 {
	if m != nil && m.Pond != nil {
		return *m.Pond
	}
	return 0
}

type CMD_GameOpenLog_S struct {
	ArrCount         *uint32  `protobuf:"varint,1,opt,name=arr_count,json=arrCount" json:"arr_count,omitempty"`
	ArrOpenLog       []uint32 `protobuf:"varint,2,rep,name=arr_open_log,json=arrOpenLog" json:"arr_open_log,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_GameOpenLog_S) Reset()                    { *m = CMD_GameOpenLog_S{} }
func (m *CMD_GameOpenLog_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_GameOpenLog_S) ProtoMessage()               {}
func (*CMD_GameOpenLog_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CMD_GameOpenLog_S) GetArrCount() uint32 {
	if m != nil && m.ArrCount != nil {
		return *m.ArrCount
	}
	return 0
}

func (m *CMD_GameOpenLog_S) GetArrOpenLog() []uint32 {
	if m != nil {
		return m.ArrOpenLog
	}
	return nil
}

type CMD_Control_UserLeave_S struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_Control_UserLeave_S) Reset()                    { *m = CMD_Control_UserLeave_S{} }
func (m *CMD_Control_UserLeave_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_Control_UserLeave_S) ProtoMessage()               {}
func (*CMD_Control_UserLeave_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CMD_Control_UserLeave_S) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type CMD_Control_DealRet_S struct {
	Ret              *uint32 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	ResultDes        []byte  `protobuf:"bytes,2,opt,name=result_des,json=resultDes" json:"result_des,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_Control_DealRet_S) Reset()                    { *m = CMD_Control_DealRet_S{} }
func (m *CMD_Control_DealRet_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_Control_DealRet_S) ProtoMessage()               {}
func (*CMD_Control_DealRet_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CMD_Control_DealRet_S) GetRet() uint32 {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return 0
}

func (m *CMD_Control_DealRet_S) GetResultDes() []byte {
	if m != nil {
		return m.ResultDes
	}
	return nil
}

// 游戏的结算信息
type CMD_GameResultinfo_S struct {
	WinScoreChange    *int64 `protobuf:"varint,1,opt,name=win_score_change,json=winScoreChange" json:"win_score_change,omitempty"`
	ChipValue         *int64 `protobuf:"varint,2,opt,name=chip_value,json=chipValue" json:"chip_value,omitempty"`
	NewScore          *int64 `protobuf:"varint,3,opt,name=new_score,json=newScore" json:"new_score,omitempty"`
	PersonalPrizePool *int64 `protobuf:"varint,4,opt,name=personal_prize_pool,json=personalPrizePool" json:"personal_prize_pool,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *CMD_GameResultinfo_S) Reset()                    { *m = CMD_GameResultinfo_S{} }
func (m *CMD_GameResultinfo_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_GameResultinfo_S) ProtoMessage()               {}
func (*CMD_GameResultinfo_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CMD_GameResultinfo_S) GetWinScoreChange() int64 {
	if m != nil && m.WinScoreChange != nil {
		return *m.WinScoreChange
	}
	return 0
}

func (m *CMD_GameResultinfo_S) GetChipValue() int64 {
	if m != nil && m.ChipValue != nil {
		return *m.ChipValue
	}
	return 0
}

func (m *CMD_GameResultinfo_S) GetNewScore() int64 {
	if m != nil && m.NewScore != nil {
		return *m.NewScore
	}
	return 0
}

func (m *CMD_GameResultinfo_S) GetPersonalPrizePool() int64 {
	if m != nil && m.PersonalPrizePool != nil {
		return *m.PersonalPrizePool
	}
	return 0
}

type CMD_Control_Update_S struct {
	RealUserChip     *CMD_UserChip_ST `protobuf:"bytes,1,opt,name=real_user_chip,json=realUserChip" json:"real_user_chip,omitempty"`
	DstUserChip      *CMD_UserChip_ST `protobuf:"bytes,2,opt,name=dst_user_chip,json=dstUserChip" json:"dst_user_chip,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_Control_Update_S) Reset()                    { *m = CMD_Control_Update_S{} }
func (m *CMD_Control_Update_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_Control_Update_S) ProtoMessage()               {}
func (*CMD_Control_Update_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CMD_Control_Update_S) GetRealUserChip() *CMD_UserChip_ST {
	if m != nil {
		return m.RealUserChip
	}
	return nil
}

func (m *CMD_Control_Update_S) GetDstUserChip() *CMD_UserChip_ST {
	if m != nil {
		return m.DstUserChip
	}
	return nil
}

type CMD_ChipSucc_S struct {
	ContinueChip     *bool   `protobuf:"varint,1,opt,name=continue_chip,json=continueChip" json:"continue_chip,omitempty"`
	ChipIndex        *uint32 `protobuf:"varint,2,opt,name=chip_index,json=chipIndex" json:"chip_index,omitempty"`
	ChipValue        *int64  `protobuf:"varint,3,opt,name=chip_value,json=chipValue" json:"chip_value,omitempty"`
	ShowScore        *int64  `protobuf:"varint,4,opt,name=show_score,json=showScore" json:"show_score,omitempty"`
	AndroidCheat     *bool   `protobuf:"varint,5,opt,name=android_cheat,json=androidCheat" json:"android_cheat,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_ChipSucc_S) Reset()                    { *m = CMD_ChipSucc_S{} }
func (m *CMD_ChipSucc_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_ChipSucc_S) ProtoMessage()               {}
func (*CMD_ChipSucc_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CMD_ChipSucc_S) GetContinueChip() bool {
	if m != nil && m.ContinueChip != nil {
		return *m.ContinueChip
	}
	return false
}

func (m *CMD_ChipSucc_S) GetChipIndex() uint32 {
	if m != nil && m.ChipIndex != nil {
		return *m.ChipIndex
	}
	return 0
}

func (m *CMD_ChipSucc_S) GetChipValue() int64 {
	if m != nil && m.ChipValue != nil {
		return *m.ChipValue
	}
	return 0
}

func (m *CMD_ChipSucc_S) GetShowScore() int64 {
	if m != nil && m.ShowScore != nil {
		return *m.ShowScore
	}
	return 0
}

func (m *CMD_ChipSucc_S) GetAndroidCheat() bool {
	if m != nil && m.AndroidCheat != nil {
		return *m.AndroidCheat
	}
	return false
}

// 游戏的结算信息
type CMD_ClearUserChip_S struct {
	Result           *uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ChipValue        *int64  `protobuf:"varint,2,opt,name=chip_value,json=chipValue" json:"chip_value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_ClearUserChip_S) Reset()                    { *m = CMD_ClearUserChip_S{} }
func (m *CMD_ClearUserChip_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_ClearUserChip_S) ProtoMessage()               {}
func (*CMD_ClearUserChip_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CMD_ClearUserChip_S) GetResult() uint32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_ClearUserChip_S) GetChipValue() int64 {
	if m != nil && m.ChipValue != nil {
		return *m.ChipValue
	}
	return 0
}

type CMD_ContinueChipResult_S struct {
	Result           *uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_ContinueChipResult_S) Reset()                    { *m = CMD_ContinueChipResult_S{} }
func (m *CMD_ContinueChipResult_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_ContinueChipResult_S) ProtoMessage()               {}
func (*CMD_ContinueChipResult_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CMD_ContinueChipResult_S) GetResult() uint32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 游戏的结算信息
type CMD_SelfResult_S struct {
	WinScoreChange   *int64 `protobuf:"varint,1,opt,name=win_score_change,json=winScoreChange" json:"win_score_change,omitempty"`
	ChipValue        *int64 `protobuf:"varint,2,opt,name=chip_value,json=chipValue" json:"chip_value,omitempty"`
	NewScore         *int64 `protobuf:"varint,3,opt,name=new_score,json=newScore" json:"new_score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_SelfResult_S) Reset()                    { *m = CMD_SelfResult_S{} }
func (m *CMD_SelfResult_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_SelfResult_S) ProtoMessage()               {}
func (*CMD_SelfResult_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CMD_SelfResult_S) GetWinScoreChange() int64 {
	if m != nil && m.WinScoreChange != nil {
		return *m.WinScoreChange
	}
	return 0
}

func (m *CMD_SelfResult_S) GetChipValue() int64 {
	if m != nil && m.ChipValue != nil {
		return *m.ChipValue
	}
	return 0
}

func (m *CMD_SelfResult_S) GetNewScore() int64 {
	if m != nil && m.NewScore != nil {
		return *m.NewScore
	}
	return 0
}

type CMD_UpdateSelfScore_S struct {
	SelfScoreShow    *int64 `protobuf:"varint,1,opt,name=self_score_show,json=selfScoreShow" json:"self_score_show,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_UpdateSelfScore_S) Reset()                    { *m = CMD_UpdateSelfScore_S{} }
func (m *CMD_UpdateSelfScore_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_UpdateSelfScore_S) ProtoMessage()               {}
func (*CMD_UpdateSelfScore_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CMD_UpdateSelfScore_S) GetSelfScoreShow() int64 {
	if m != nil && m.SelfScoreShow != nil {
		return *m.SelfScoreShow
	}
	return 0
}

type CMD_Control_UserInfo_S struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GameId           *uint32 `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	NickName         []byte  `protobuf:"bytes,3,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	Score            *int64  `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	KillProbability  *int32  `protobuf:"varint,5,opt,name=kill_probability,json=killProbability" json:"kill_probability,omitempty"`
	VipLev           *uint32 `protobuf:"varint,6,opt,name=vip_lev,json=vipLev" json:"vip_lev,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_Control_UserInfo_S) Reset()                    { *m = CMD_Control_UserInfo_S{} }
func (m *CMD_Control_UserInfo_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_Control_UserInfo_S) ProtoMessage()               {}
func (*CMD_Control_UserInfo_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CMD_Control_UserInfo_S) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_Control_UserInfo_S) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *CMD_Control_UserInfo_S) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *CMD_Control_UserInfo_S) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMD_Control_UserInfo_S) GetKillProbability() int32 {
	if m != nil && m.KillProbability != nil {
		return *m.KillProbability
	}
	return 0
}

func (m *CMD_Control_UserInfo_S) GetVipLev() uint32 {
	if m != nil && m.VipLev != nil {
		return *m.VipLev
	}
	return 0
}

type CMD_Control_StockInfo_S struct {
	StockScore       *int64  `protobuf:"varint,1,opt,name=stock_score,json=stockScore" json:"stock_score,omitempty"`
	DownLine         *int64  `protobuf:"varint,2,opt,name=down_line,json=downLine" json:"down_line,omitempty"`
	PutMoneyMax      *int64  `protobuf:"varint,3,opt,name=put_money_max,json=putMoneyMax" json:"put_money_max,omitempty"`
	PerRevenue       *uint32 `protobuf:"varint,4,opt,name=per_revenue,json=perRevenue" json:"per_revenue,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_Control_StockInfo_S) Reset()                    { *m = CMD_Control_StockInfo_S{} }
func (m *CMD_Control_StockInfo_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_Control_StockInfo_S) ProtoMessage()               {}
func (*CMD_Control_StockInfo_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CMD_Control_StockInfo_S) GetStockScore() int64 {
	if m != nil && m.StockScore != nil {
		return *m.StockScore
	}
	return 0
}

func (m *CMD_Control_StockInfo_S) GetDownLine() int64 {
	if m != nil && m.DownLine != nil {
		return *m.DownLine
	}
	return 0
}

func (m *CMD_Control_StockInfo_S) GetPutMoneyMax() int64 {
	if m != nil && m.PutMoneyMax != nil {
		return *m.PutMoneyMax
	}
	return 0
}

func (m *CMD_Control_StockInfo_S) GetPerRevenue() uint32 {
	if m != nil && m.PerRevenue != nil {
		return *m.PerRevenue
	}
	return 0
}

type CMD_Control_UserChip_S struct {
	UserId           *uint32          `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserChip         *CMD_UserChip_ST `protobuf:"bytes,2,opt,name=user_chip,json=userChip" json:"user_chip,omitempty"`
	Score            *int64           `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	Insure           *int64           `protobuf:"varint,4,opt,name=insure" json:"insure,omitempty"`
	RedNameUserDown  []int64          `protobuf:"varint,5,rep,name=red_name_user_down,json=redNameUserDown" json:"red_name_user_down,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_Control_UserChip_S) Reset()                    { *m = CMD_Control_UserChip_S{} }
func (m *CMD_Control_UserChip_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_Control_UserChip_S) ProtoMessage()               {}
func (*CMD_Control_UserChip_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CMD_Control_UserChip_S) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_Control_UserChip_S) GetUserChip() *CMD_UserChip_ST {
	if m != nil {
		return m.UserChip
	}
	return nil
}

func (m *CMD_Control_UserChip_S) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMD_Control_UserChip_S) GetInsure() int64 {
	if m != nil && m.Insure != nil {
		return *m.Insure
	}
	return 0
}

func (m *CMD_Control_UserChip_S) GetRedNameUserDown() []int64 {
	if m != nil {
		return m.RedNameUserDown
	}
	return nil
}

type CMD_UserChipNotify_S struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChipIndex        *uint32 `protobuf:"varint,2,opt,name=chip_index,json=chipIndex" json:"chip_index,omitempty"`
	ChipValue        *int64  `protobuf:"varint,3,opt,name=chip_value,json=chipValue" json:"chip_value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_UserChipNotify_S) Reset()                    { *m = CMD_UserChipNotify_S{} }
func (m *CMD_UserChipNotify_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_UserChipNotify_S) ProtoMessage()               {}
func (*CMD_UserChipNotify_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CMD_UserChipNotify_S) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_UserChipNotify_S) GetChipIndex() uint32 {
	if m != nil && m.ChipIndex != nil {
		return *m.ChipIndex
	}
	return 0
}

func (m *CMD_UserChipNotify_S) GetChipValue() int64 {
	if m != nil && m.ChipValue != nil {
		return *m.ChipValue
	}
	return 0
}

type CMD_UserContinue_ChipNotify_S struct {
	UserId            *uint32          `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ContinueChipIndex *CMD_UserChip_ST `protobuf:"bytes,2,opt,name=continue_chip_index,json=continueChipIndex" json:"continue_chip_index,omitempty"`
	XXX_unrecognized  []byte           `json:"-"`
}

func (m *CMD_UserContinue_ChipNotify_S) Reset()                    { *m = CMD_UserContinue_ChipNotify_S{} }
func (m *CMD_UserContinue_ChipNotify_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_UserContinue_ChipNotify_S) ProtoMessage()               {}
func (*CMD_UserContinue_ChipNotify_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CMD_UserContinue_ChipNotify_S) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_UserContinue_ChipNotify_S) GetContinueChipIndex() *CMD_UserChip_ST {
	if m != nil {
		return m.ContinueChipIndex
	}
	return nil
}

type CMD_ReqBanker_Result struct {
	Result           []byte `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_ReqBanker_Result) Reset()                    { *m = CMD_ReqBanker_Result{} }
func (m *CMD_ReqBanker_Result) String() string            { return proto.CompactTextString(m) }
func (*CMD_ReqBanker_Result) ProtoMessage()               {}
func (*CMD_ReqBanker_Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CMD_ReqBanker_Result) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type CMD_WaitBankerUserInfo struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName         []byte  `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	FaceId           *uint32 `protobuf:"varint,3,opt,name=face_id,json=faceId" json:"face_id,omitempty"`
	UserScore        *int64  `protobuf:"varint,4,opt,name=user_score,json=userScore" json:"user_score,omitempty"`
	FaceUrl          []byte  `protobuf:"bytes,5,opt,name=face_url,json=faceUrl" json:"face_url,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_WaitBankerUserInfo) Reset()                    { *m = CMD_WaitBankerUserInfo{} }
func (m *CMD_WaitBankerUserInfo) String() string            { return proto.CompactTextString(m) }
func (*CMD_WaitBankerUserInfo) ProtoMessage()               {}
func (*CMD_WaitBankerUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *CMD_WaitBankerUserInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_WaitBankerUserInfo) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *CMD_WaitBankerUserInfo) GetFaceId() uint32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

func (m *CMD_WaitBankerUserInfo) GetUserScore() int64 {
	if m != nil && m.UserScore != nil {
		return *m.UserScore
	}
	return 0
}

func (m *CMD_WaitBankerUserInfo) GetFaceUrl() []byte {
	if m != nil {
		return m.FaceUrl
	}
	return nil
}

type CMD_BankerUserInfo struct {
	BankerUserId     *uint32                   `protobuf:"varint,1,opt,name=banker_user_id,json=bankerUserId" json:"banker_user_id,omitempty"`
	BankerName       []byte                    `protobuf:"bytes,2,opt,name=banker_name,json=bankerName" json:"banker_name,omitempty"`
	SitGameNum       *uint32                   `protobuf:"varint,3,opt,name=sit_game_num,json=sitGameNum" json:"sit_game_num,omitempty"`
	BankerScore      *int64                    `protobuf:"varint,4,opt,name=banker_score,json=bankerScore" json:"banker_score,omitempty"`
	SelfSlot         *uint32                   `protobuf:"varint,5,opt,name=self_slot,json=selfSlot" json:"self_slot,omitempty"`
	ReqUserCount     *uint32                   `protobuf:"varint,6,opt,name=req_user_count,json=reqUserCount" json:"req_user_count,omitempty"`
	ReqArrUserInfo   []*CMD_WaitBankerUserInfo `protobuf:"bytes,7,rep,name=req_arr_user_info,json=reqArrUserInfo" json:"req_arr_user_info,omitempty"`
	FaceId           *uint32                   `protobuf:"varint,8,opt,name=face_id,json=faceId" json:"face_id,omitempty"`
	FaceUrl          []byte                    `protobuf:"bytes,9,opt,name=face_url,json=faceUrl" json:"face_url,omitempty"`
	FrobUser         *bool                     `protobuf:"varint,10,opt,name=frob_user,json=frobUser" json:"frob_user,omitempty"`
	Monetaryt        *int32                    `protobuf:"varint,11,opt,name=monetaryt" json:"monetaryt,omitempty"`
	Monetaryv        *int64                    `protobuf:"varint,12,opt,name=monetaryv" json:"monetaryv,omitempty"`
	UserId           *uint32                   `protobuf:"varint,13,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	IrobAct          *bool                     `protobuf:"varint,14,opt,name=irob_act,json=irobAct" json:"irob_act,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMD_BankerUserInfo) Reset()                    { *m = CMD_BankerUserInfo{} }
func (m *CMD_BankerUserInfo) String() string            { return proto.CompactTextString(m) }
func (*CMD_BankerUserInfo) ProtoMessage()               {}
func (*CMD_BankerUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CMD_BankerUserInfo) GetBankerUserId() uint32 {
	if m != nil && m.BankerUserId != nil {
		return *m.BankerUserId
	}
	return 0
}

func (m *CMD_BankerUserInfo) GetBankerName() []byte {
	if m != nil {
		return m.BankerName
	}
	return nil
}

func (m *CMD_BankerUserInfo) GetSitGameNum() uint32 {
	if m != nil && m.SitGameNum != nil {
		return *m.SitGameNum
	}
	return 0
}

func (m *CMD_BankerUserInfo) GetBankerScore() int64 {
	if m != nil && m.BankerScore != nil {
		return *m.BankerScore
	}
	return 0
}

func (m *CMD_BankerUserInfo) GetSelfSlot() uint32 {
	if m != nil && m.SelfSlot != nil {
		return *m.SelfSlot
	}
	return 0
}

func (m *CMD_BankerUserInfo) GetReqUserCount() uint32 {
	if m != nil && m.ReqUserCount != nil {
		return *m.ReqUserCount
	}
	return 0
}

func (m *CMD_BankerUserInfo) GetReqArrUserInfo() []*CMD_WaitBankerUserInfo {
	if m != nil {
		return m.ReqArrUserInfo
	}
	return nil
}

func (m *CMD_BankerUserInfo) GetFaceId() uint32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

func (m *CMD_BankerUserInfo) GetFaceUrl() []byte {
	if m != nil {
		return m.FaceUrl
	}
	return nil
}

func (m *CMD_BankerUserInfo) GetFrobUser() bool {
	if m != nil && m.FrobUser != nil {
		return *m.FrobUser
	}
	return false
}

func (m *CMD_BankerUserInfo) GetMonetaryt() int32 {
	if m != nil && m.Monetaryt != nil {
		return *m.Monetaryt
	}
	return 0
}

func (m *CMD_BankerUserInfo) GetMonetaryv() int64 {
	if m != nil && m.Monetaryv != nil {
		return *m.Monetaryv
	}
	return 0
}

func (m *CMD_BankerUserInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_BankerUserInfo) GetIrobAct() bool {
	if m != nil && m.IrobAct != nil {
		return *m.IrobAct
	}
	return false
}

type CMD_BankerResult_S struct {
	BankerUserId     *uint32  `protobuf:"varint,1,opt,name=banker_user_id,json=bankerUserId" json:"banker_user_id,omitempty"`
	BankerName       []byte   `protobuf:"bytes,2,opt,name=banker_name,json=bankerName" json:"banker_name,omitempty"`
	BankerWin        *int64   `protobuf:"varint,3,opt,name=banker_win,json=bankerWin" json:"banker_win,omitempty"`
	UserCount        *uint32  `protobuf:"varint,4,opt,name=user_count,json=userCount" json:"user_count,omitempty"`
	NickName         [][]byte `protobuf:"bytes,5,rep,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	UserWin          []int64  `protobuf:"varint,6,rep,name=user_win,json=userWin" json:"user_win,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_BankerResult_S) Reset()                    { *m = CMD_BankerResult_S{} }
func (m *CMD_BankerResult_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_BankerResult_S) ProtoMessage()               {}
func (*CMD_BankerResult_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CMD_BankerResult_S) GetBankerUserId() uint32 {
	if m != nil && m.BankerUserId != nil {
		return *m.BankerUserId
	}
	return 0
}

func (m *CMD_BankerResult_S) GetBankerName() []byte {
	if m != nil {
		return m.BankerName
	}
	return nil
}

func (m *CMD_BankerResult_S) GetBankerWin() int64 {
	if m != nil && m.BankerWin != nil {
		return *m.BankerWin
	}
	return 0
}

func (m *CMD_BankerResult_S) GetUserCount() uint32 {
	if m != nil && m.UserCount != nil {
		return *m.UserCount
	}
	return 0
}

func (m *CMD_BankerResult_S) GetNickName() [][]byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *CMD_BankerResult_S) GetUserWin() []int64 {
	if m != nil {
		return m.UserWin
	}
	return nil
}

type CMD_EMPTY_MESSAGE_S struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_EMPTY_MESSAGE_S) Reset()                    { *m = CMD_EMPTY_MESSAGE_S{} }
func (m *CMD_EMPTY_MESSAGE_S) String() string            { return proto.CompactTextString(m) }
func (*CMD_EMPTY_MESSAGE_S) ProtoMessage()               {}
func (*CMD_EMPTY_MESSAGE_S) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

type CMD_Control_SelectDst_C struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_Control_SelectDst_C) Reset()                    { *m = CMD_Control_SelectDst_C{} }
func (m *CMD_Control_SelectDst_C) String() string            { return proto.CompactTextString(m) }
func (*CMD_Control_SelectDst_C) ProtoMessage()               {}
func (*CMD_Control_SelectDst_C) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *CMD_Control_SelectDst_C) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type CMD_UserChip_C struct {
	ChipIndex        *uint32 `protobuf:"varint,1,opt,name=chip_index,json=chipIndex" json:"chip_index,omitempty"`
	ChipValue        *int64  `protobuf:"varint,2,opt,name=chip_value,json=chipValue" json:"chip_value,omitempty"`
	AndroidCheat     *bool   `protobuf:"varint,3,opt,name=android_cheat,json=androidCheat" json:"android_cheat,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_UserChip_C) Reset()                    { *m = CMD_UserChip_C{} }
func (m *CMD_UserChip_C) String() string            { return proto.CompactTextString(m) }
func (*CMD_UserChip_C) ProtoMessage()               {}
func (*CMD_UserChip_C) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *CMD_UserChip_C) GetChipIndex() uint32 {
	if m != nil && m.ChipIndex != nil {
		return *m.ChipIndex
	}
	return 0
}

func (m *CMD_UserChip_C) GetChipValue() int64 {
	if m != nil && m.ChipValue != nil {
		return *m.ChipValue
	}
	return 0
}

func (m *CMD_UserChip_C) GetAndroidCheat() bool {
	if m != nil && m.AndroidCheat != nil {
		return *m.AndroidCheat
	}
	return false
}

type CMD_StartGame_Single struct {
	UserCheat        *bool             `protobuf:"varint,1,opt,name=user_cheat,json=userCheat" json:"user_cheat,omitempty"`
	UserChipArr      []*CMD_UserChip_C `protobuf:"bytes,2,rep,name=user_chip_arr,json=userChipArr" json:"user_chip_arr,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CMD_StartGame_Single) Reset()                    { *m = CMD_StartGame_Single{} }
func (m *CMD_StartGame_Single) String() string            { return proto.CompactTextString(m) }
func (*CMD_StartGame_Single) ProtoMessage()               {}
func (*CMD_StartGame_Single) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *CMD_StartGame_Single) GetUserCheat() bool {
	if m != nil && m.UserCheat != nil {
		return *m.UserCheat
	}
	return false
}

func (m *CMD_StartGame_Single) GetUserChipArr() []*CMD_UserChip_C {
	if m != nil {
		return m.UserChipArr
	}
	return nil
}

type CMD_UserContinueChip_C struct {
	StUserChip       *CMD_UserChip_ST `protobuf:"bytes,1,opt,name=st_user_chip,json=stUserChip" json:"st_user_chip,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_UserContinueChip_C) Reset()                    { *m = CMD_UserContinueChip_C{} }
func (m *CMD_UserContinueChip_C) String() string            { return proto.CompactTextString(m) }
func (*CMD_UserContinueChip_C) ProtoMessage()               {}
func (*CMD_UserContinueChip_C) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *CMD_UserContinueChip_C) GetStUserChip() *CMD_UserChip_ST {
	if m != nil {
		return m.StUserChip
	}
	return nil
}

type CMD_Control_SetDst_C struct {
	Control          *bool   `protobuf:"varint,1,opt,name=control" json:"control,omitempty"`
	DstIndex         *uint32 `protobuf:"varint,2,opt,name=dst_index,json=dstIndex" json:"dst_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_Control_SetDst_C) Reset()                    { *m = CMD_Control_SetDst_C{} }
func (m *CMD_Control_SetDst_C) String() string            { return proto.CompactTextString(m) }
func (*CMD_Control_SetDst_C) ProtoMessage()               {}
func (*CMD_Control_SetDst_C) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *CMD_Control_SetDst_C) GetControl() bool {
	if m != nil && m.Control != nil {
		return *m.Control
	}
	return false
}

func (m *CMD_Control_SetDst_C) GetDstIndex() uint32 {
	if m != nil && m.DstIndex != nil {
		return *m.DstIndex
	}
	return 0
}

type CMD_ReqBanker_C struct {
	Request          *bool  `protobuf:"varint,1,opt,name=request" json:"request,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_ReqBanker_C) Reset()                    { *m = CMD_ReqBanker_C{} }
func (m *CMD_ReqBanker_C) String() string            { return proto.CompactTextString(m) }
func (*CMD_ReqBanker_C) ProtoMessage()               {}
func (*CMD_ReqBanker_C) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *CMD_ReqBanker_C) GetRequest() bool {
	if m != nil && m.Request != nil {
		return *m.Request
	}
	return false
}

type CMD_Control_UserTotalChipInfo_S struct {
	RealUserChip     *CMD_UserChip_ST `protobuf:"bytes,1,opt,name=real_user_chip,json=realUserChip" json:"real_user_chip,omitempty"`
	AiUserChip       *CMD_UserChip_ST `protobuf:"bytes,2,opt,name=ai_user_chip,json=aiUserChip" json:"ai_user_chip,omitempty"`
	ForWinUserChip   *CMD_UserChip_ST `protobuf:"bytes,3,opt,name=for_win_user_chip,json=forWinUserChip" json:"for_win_user_chip,omitempty"`
	ForLostUserChip  *CMD_UserChip_ST `protobuf:"bytes,4,opt,name=for_lost_user_chip,json=forLostUserChip" json:"for_lost_user_chip,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_Control_UserTotalChipInfo_S) Reset()         { *m = CMD_Control_UserTotalChipInfo_S{} }
func (m *CMD_Control_UserTotalChipInfo_S) String() string { return proto.CompactTextString(m) }
func (*CMD_Control_UserTotalChipInfo_S) ProtoMessage()    {}
func (*CMD_Control_UserTotalChipInfo_S) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37}
}

func (m *CMD_Control_UserTotalChipInfo_S) GetRealUserChip() *CMD_UserChip_ST {
	if m != nil {
		return m.RealUserChip
	}
	return nil
}

func (m *CMD_Control_UserTotalChipInfo_S) GetAiUserChip() *CMD_UserChip_ST {
	if m != nil {
		return m.AiUserChip
	}
	return nil
}

func (m *CMD_Control_UserTotalChipInfo_S) GetForWinUserChip() *CMD_UserChip_ST {
	if m != nil {
		return m.ForWinUserChip
	}
	return nil
}

func (m *CMD_Control_UserTotalChipInfo_S) GetForLostUserChip() *CMD_UserChip_ST {
	if m != nil {
		return m.ForLostUserChip
	}
	return nil
}

type CMD_SUB_C_ONLINE_TOTAL struct {
	ServerKind       *uint32 `protobuf:"varint,1,opt,name=server_kind,json=serverKind" json:"server_kind,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SUB_C_ONLINE_TOTAL) Reset()                    { *m = CMD_SUB_C_ONLINE_TOTAL{} }
func (m *CMD_SUB_C_ONLINE_TOTAL) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_C_ONLINE_TOTAL) ProtoMessage()               {}
func (*CMD_SUB_C_ONLINE_TOTAL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *CMD_SUB_C_ONLINE_TOTAL) GetServerKind() uint32 {
	if m != nil && m.ServerKind != nil {
		return *m.ServerKind
	}
	return 0
}

type CMD_SUB_S_ONLINE_TOTAL struct {
	ServerKind       *uint32 `protobuf:"varint,1,opt,name=server_kind,json=serverKind" json:"server_kind,omitempty"`
	OnlineTotal      *uint32 `protobuf:"varint,2,opt,name=online_total,json=onlineTotal" json:"online_total,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SUB_S_ONLINE_TOTAL) Reset()                    { *m = CMD_SUB_S_ONLINE_TOTAL{} }
func (m *CMD_SUB_S_ONLINE_TOTAL) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_S_ONLINE_TOTAL) ProtoMessage()               {}
func (*CMD_SUB_S_ONLINE_TOTAL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *CMD_SUB_S_ONLINE_TOTAL) GetServerKind() uint32 {
	if m != nil && m.ServerKind != nil {
		return *m.ServerKind
	}
	return 0
}

func (m *CMD_SUB_S_ONLINE_TOTAL) GetOnlineTotal() uint32 {
	if m != nil && m.OnlineTotal != nil {
		return *m.OnlineTotal
	}
	return 0
}

type CMD_SUB_C_ROBBANK struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_SUB_C_ROBBANK) Reset()                    { *m = CMD_SUB_C_ROBBANK{} }
func (m *CMD_SUB_C_ROBBANK) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_C_ROBBANK) ProtoMessage()               {}
func (*CMD_SUB_C_ROBBANK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

type CMD_SUB_S_AndroidUpdateChip struct {
	CheatMode        *bool   `protobuf:"varint,1,opt,name=cheat_mode,json=cheatMode" json:"cheat_mode,omitempty"`
	ChipIndex        *uint32 `protobuf:"varint,2,opt,name=chip_index,json=chipIndex" json:"chip_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SUB_S_AndroidUpdateChip) Reset()                    { *m = CMD_SUB_S_AndroidUpdateChip{} }
func (m *CMD_SUB_S_AndroidUpdateChip) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_S_AndroidUpdateChip) ProtoMessage()               {}
func (*CMD_SUB_S_AndroidUpdateChip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *CMD_SUB_S_AndroidUpdateChip) GetCheatMode() bool {
	if m != nil && m.CheatMode != nil {
		return *m.CheatMode
	}
	return false
}

func (m *CMD_SUB_S_AndroidUpdateChip) GetChipIndex() uint32 {
	if m != nil && m.ChipIndex != nil {
		return *m.ChipIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*CMD_SUB_C_REQ_BANKER)(nil), "CMD_SGJ.CMD_SUB_C_REQ_BANKER")
	proto.RegisterType((*CMD_SUB_S_REQ_BANKER)(nil), "CMD_SGJ.CMD_SUB_S_REQ_BANKER")
	proto.RegisterType((*CMD_Userinfo_S)(nil), "CMD_SGJ.CMD_Userinfo_S")
	proto.RegisterType((*CMD_UserChip_ST)(nil), "CMD_SGJ.CMD_UserChip_ST")
	proto.RegisterType((*CMD_Sence_Free)(nil), "CMD_SGJ.CMD_Sence_Free")
	proto.RegisterType((*CMD_ExtraBonus_ST)(nil), "CMD_SGJ.CMD_ExtraBonus_ST")
	proto.RegisterType((*CMD_GameStart_S)(nil), "CMD_SGJ.CMD_GameStart_S")
	proto.RegisterType((*CMD_GameEnd_Info_S)(nil), "CMD_SGJ.CMD_GameEnd_Info_S")
	proto.RegisterType((*CMD_UpdataChip_S)(nil), "CMD_SGJ.CMD_UpdataChip_S")
	proto.RegisterType((*CMD_SysMessage_S)(nil), "CMD_SGJ.CMD_SysMessage_S")
	proto.RegisterType((*CMD_Gameinfo_S)(nil), "CMD_SGJ.CMD_Gameinfo_S")
	proto.RegisterType((*CMD_GameOpenLog_S)(nil), "CMD_SGJ.CMD_GameOpenLog_S")
	proto.RegisterType((*CMD_Control_UserLeave_S)(nil), "CMD_SGJ.CMD_Control_UserLeave_S")
	proto.RegisterType((*CMD_Control_DealRet_S)(nil), "CMD_SGJ.CMD_Control_DealRet_S")
	proto.RegisterType((*CMD_GameResultinfo_S)(nil), "CMD_SGJ.CMD_GameResultinfo_S")
	proto.RegisterType((*CMD_Control_Update_S)(nil), "CMD_SGJ.CMD_Control_Update_S")
	proto.RegisterType((*CMD_ChipSucc_S)(nil), "CMD_SGJ.CMD_ChipSucc_S")
	proto.RegisterType((*CMD_ClearUserChip_S)(nil), "CMD_SGJ.CMD_ClearUserChip_S")
	proto.RegisterType((*CMD_ContinueChipResult_S)(nil), "CMD_SGJ.CMD_ContinueChipResult_S")
	proto.RegisterType((*CMD_SelfResult_S)(nil), "CMD_SGJ.CMD_SelfResult_S")
	proto.RegisterType((*CMD_UpdateSelfScore_S)(nil), "CMD_SGJ.CMD_UpdateSelfScore_S")
	proto.RegisterType((*CMD_Control_UserInfo_S)(nil), "CMD_SGJ.CMD_Control_UserInfo_S")
	proto.RegisterType((*CMD_Control_StockInfo_S)(nil), "CMD_SGJ.CMD_Control_StockInfo_S")
	proto.RegisterType((*CMD_Control_UserChip_S)(nil), "CMD_SGJ.CMD_Control_UserChip_S")
	proto.RegisterType((*CMD_UserChipNotify_S)(nil), "CMD_SGJ.CMD_UserChipNotify_S")
	proto.RegisterType((*CMD_UserContinue_ChipNotify_S)(nil), "CMD_SGJ.CMD_UserContinue_ChipNotify_S")
	proto.RegisterType((*CMD_ReqBanker_Result)(nil), "CMD_SGJ.CMD_ReqBanker_Result")
	proto.RegisterType((*CMD_WaitBankerUserInfo)(nil), "CMD_SGJ.CMD_WaitBankerUserInfo")
	proto.RegisterType((*CMD_BankerUserInfo)(nil), "CMD_SGJ.CMD_BankerUserInfo")
	proto.RegisterType((*CMD_BankerResult_S)(nil), "CMD_SGJ.CMD_BankerResult_S")
	proto.RegisterType((*CMD_EMPTY_MESSAGE_S)(nil), "CMD_SGJ.CMD_EMPTY_MESSAGE_S")
	proto.RegisterType((*CMD_Control_SelectDst_C)(nil), "CMD_SGJ.CMD_Control_SelectDst_C")
	proto.RegisterType((*CMD_UserChip_C)(nil), "CMD_SGJ.CMD_UserChip_C")
	proto.RegisterType((*CMD_StartGame_Single)(nil), "CMD_SGJ.CMD_StartGame_Single")
	proto.RegisterType((*CMD_UserContinueChip_C)(nil), "CMD_SGJ.CMD_UserContinueChip_C")
	proto.RegisterType((*CMD_Control_SetDst_C)(nil), "CMD_SGJ.CMD_Control_SetDst_C")
	proto.RegisterType((*CMD_ReqBanker_C)(nil), "CMD_SGJ.CMD_ReqBanker_C")
	proto.RegisterType((*CMD_Control_UserTotalChipInfo_S)(nil), "CMD_SGJ.CMD_Control_UserTotalChipInfo_S")
	proto.RegisterType((*CMD_SUB_C_ONLINE_TOTAL)(nil), "CMD_SGJ.CMD_SUB_C_ONLINE_TOTAL")
	proto.RegisterType((*CMD_SUB_S_ONLINE_TOTAL)(nil), "CMD_SGJ.CMD_SUB_S_ONLINE_TOTAL")
	proto.RegisterType((*CMD_SUB_C_ROBBANK)(nil), "CMD_SGJ.CMD_SUB_C_ROBBANK")
	proto.RegisterType((*CMD_SUB_S_AndroidUpdateChip)(nil), "CMD_SGJ.CMD_SUB_S_AndroidUpdateChip")
}

func init() { proto.RegisterFile("CMD_SGJ_Game.CMD", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1978 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x4f, 0x6f, 0x2b, 0x49,
	0x11, 0x97, 0xed, 0xfc, 0x71, 0xca, 0x76, 0xf2, 0x32, 0xef, 0xed, 0x8b, 0xc3, 0xf2, 0x94, 0x30,
	0xbb, 0x42, 0x41, 0x2b, 0x45, 0x10, 0x89, 0xc3, 0xee, 0xa2, 0x85, 0xc4, 0x09, 0x79, 0xd9, 0x97,
	0xe4, 0x85, 0x99, 0x84, 0x27, 0x04, 0x52, 0xab, 0xe3, 0x69, 0x27, 0xa3, 0x8c, 0xbb, 0x27, 0xdd,
	0x3d, 0x49, 0xcc, 0x11, 0x71, 0xe3, 0xca, 0x91, 0x0b, 0x47, 0xc4, 0xde, 0x39, 0x23, 0xc4, 0x1d,
	0xbe, 0x09, 0x1f, 0x01, 0x55, 0x77, 0xcf, 0x78, 0xc6, 0x49, 0x9e, 0xb3, 0x5a, 0xc4, 0xde, 0xdc,
	0x35, 0xdd, 0x5d, 0x55, 0xbf, 0xaa, 0xfa, 0x55, 0xb5, 0xc1, 0xeb, 0x1d, 0xed, 0x92, 0x70, 0xff,
	0x4b, 0xb2, 0x4f, 0x87, 0x6c, 0x33, 0x95, 0x42, 0x0b, 0x6f, 0xde, 0xc9, 0xfc, 0x1f, 0xc1, 0x0b,
	0xf3, 0xf3, 0x6c, 0x87, 0xf4, 0x48, 0xb0, 0xf7, 0x0b, 0xb2, 0xb3, 0x7d, 0xfc, 0x66, 0x2f, 0xf0,
	0x56, 0xa1, 0x29, 0xd9, 0x35, 0xd1, 0xa3, 0x94, 0x75, 0x6b, 0xeb, 0xb5, 0x8d, 0xd9, 0x60, 0x5e,
	0xb2, 0xeb, 0xd3, 0x51, 0xca, 0xfc, 0x2f, 0xc6, 0x47, 0xc2, 0xf2, 0x91, 0xef, 0xc3, 0x12, 0x1e,
	0x91, 0x4c, 0x65, 0x89, 0x26, 0x31, 0x1f, 0x08, 0x73, 0xb2, 0x1d, 0x74, 0x24, 0xbb, 0x0e, 0x8c,
	0xf4, 0x80, 0x0f, 0x84, 0xff, 0x55, 0x1d, 0x16, 0xf1, 0x82, 0x33, 0xc5, 0x24, 0xee, 0x22, 0xa1,
	0xf7, 0x0a, 0x20, 0x53, 0x4c, 0x12, 0xd5, 0x17, 0xd2, 0xea, 0x6b, 0x04, 0x0b, 0x28, 0x09, 0x51,
	0xe0, 0x7d, 0x08, 0x0b, 0x3c, 0xee, 0x5f, 0x11, 0x4e, 0x87, 0xac, 0x5b, 0x37, 0x77, 0x36, 0x51,
	0x70, 0x4c, 0x87, 0x0c, 0xcf, 0xf6, 0x2f, 0xe3, 0x94, 0xdc, 0xd0, 0x24, 0x63, 0xdd, 0xc6, 0x7a,
	0x63, 0xa3, 0x13, 0x2c, 0xa0, 0xe4, 0x97, 0x28, 0xf0, 0x7e, 0x08, 0x2f, 0xce, 0x29, 0xbf, 0xca,
	0x2f, 0x27, 0x92, 0x5d, 0x67, 0x4c, 0xe9, 0xee, 0x8c, 0x51, 0xe2, 0xd9, 0x6f, 0x46, 0x4d, 0x60,
	0xbf, 0x78, 0x3e, 0x74, 0xcc, 0x85, 0x59, 0x4a, 0x92, 0x78, 0x18, 0xeb, 0xee, 0xac, 0xf1, 0xbf,
	0x85, 0xc2, 0xb3, 0xf4, 0x10, 0x45, 0xde, 0x26, 0x3c, 0x4f, 0x99, 0x54, 0x82, 0xd3, 0x84, 0xa4,
	0x32, 0xfe, 0x2d, 0x23, 0xa9, 0x10, 0x49, 0x77, 0xce, 0x5c, 0xba, 0x9c, 0x7f, 0x3a, 0xc1, 0x2f,
	0x27, 0x42, 0x24, 0xde, 0xa7, 0xb0, 0xfa, 0xc0, 0x7e, 0x77, 0xff, 0xbc, 0x39, 0xf5, 0xf2, 0xde,
	0x29, 0xa3, 0xca, 0xdf, 0x84, 0xa5, 0x1c, 0xad, 0x1e, 0x9a, 0x15, 0x9e, 0x22, 0x1e, 0x06, 0x2e,
	0xb4, 0xa8, 0x5b, 0x5b, 0x6f, 0x6c, 0x34, 0x82, 0x66, 0xe6, 0xbe, 0xfb, 0xff, 0xac, 0x59, 0x78,
	0x43, 0xc6, 0xfb, 0x8c, 0xfc, 0x5c, 0x32, 0xe6, 0xad, 0x41, 0xeb, 0x82, 0x0e, 0x19, 0x51, 0x9a,
	0xea, 0x4c, 0x19, 0x7c, 0x3b, 0x01, 0xa0, 0x28, 0x34, 0x92, 0x09, 0xfc, 0xeb, 0x93, 0xf8, 0xff,
	0xb8, 0xac, 0xaf, 0xb1, 0x5e, 0xdb, 0x68, 0x6d, 0x75, 0x37, 0x5d, 0x06, 0x6d, 0x4e, 0x18, 0x37,
	0xb6, 0xc4, 0xfb, 0x09, 0x74, 0x68, 0x92, 0x90, 0xf1, 0xd1, 0x99, 0x29, 0x47, 0x5b, 0x34, 0x49,
	0xf2, 0xb5, 0xff, 0xd7, 0x1a, 0x2c, 0xe3, 0x86, 0xbd, 0x3b, 0x2d, 0xe9, 0x8e, 0xe0, 0x99, 0x72,
	0xae, 0x47, 0x0a, 0xb3, 0x2b, 0x62, 0x77, 0xce, 0x91, 0x66, 0xa4, 0xf4, 0x01, 0xae, 0xbd, 0x15,
	0x98, 0xc7, 0x8f, 0xa9, 0x50, 0xc6, 0x87, 0x4e, 0x30, 0x17, 0x29, 0x7d, 0x22, 0x94, 0xf7, 0x31,
	0x2c, 0x1a, 0x2b, 0x2e, 0x98, 0x76, 0x3e, 0x36, 0x8c, 0x8f, 0x6d, 0x94, 0xee, 0x33, 0x6d, 0xdd,
	0xf4, 0xad, 0xbd, 0xe3, 0x4d, 0x36, 0x47, 0xd0, 0xaa, 0x62, 0xcf, 0x4b, 0x98, 0x93, 0x37, 0x4c,
	0x2a, 0x66, 0xb2, 0xa2, 0x19, 0xb8, 0x95, 0xff, 0xfb, 0xba, 0x0d, 0xd3, 0xbe, 0x05, 0x55, 0x6a,
	0x12, 0x62, 0x0d, 0xa1, 0x39, 0x45, 0x0d, 0x75, 0x02, 0x34, 0x0f, 0x6b, 0xa8, 0xea, 0x46, 0x7d,
	0xc2, 0x8d, 0x55, 0x68, 0x26, 0xd4, 0xf9, 0xd1, 0xb0, 0xe7, 0x70, 0x8d, 0x8e, 0x94, 0x3c, 0x9c,
	0x99, 0xe2, 0xe1, 0xec, 0x53, 0x3c, 0x9c, 0xbb, 0xef, 0xe1, 0xe7, 0xd0, 0x62, 0x08, 0x39, 0x39,
	0x47, 0xcc, 0xbb, 0xf3, 0xeb, 0x8d, 0x8d, 0xd6, 0xd6, 0x77, 0x2a, 0x31, 0xab, 0x84, 0x24, 0x00,
	0x56, 0x2c, 0xfd, 0x7f, 0xd5, 0x2c, 0xdd, 0x20, 0x0c, 0x7b, 0x3c, 0x22, 0x07, 0xb6, 0xbe, 0x3f,
	0x82, 0x8e, 0x2b, 0x42, 0x34, 0x27, 0x8e, 0x1c, 0x1c, 0x6d, 0x2b, 0x34, 0x44, 0x10, 0x61, 0x96,
	0xba, 0x4d, 0xa5, 0x3a, 0x07, 0x2b, 0xca, 0x2b, 0xdd, 0x6d, 0xb8, 0x8d, 0xb9, 0x8b, 0xe0, 0x82,
	0x95, 0xbc, 0x8b, 0x79, 0x91, 0xc4, 0x7d, 0x91, 0x71, 0xed, 0xe0, 0x31, 0x79, 0xdb, 0x43, 0x41,
	0x95, 0x44, 0x66, 0xd7, 0x1b, 0x15, 0x12, 0x59, 0x05, 0x93, 0xb6, 0xe6, 0xe2, 0x39, 0x53, 0x50,
	0xf3, 0xb8, 0x7e, 0x17, 0x73, 0xff, 0x0f, 0x35, 0x78, 0x66, 0x12, 0x35, 0x8d, 0xa8, 0xa6, 0x36,
	0x55, 0xab, 0x15, 0x51, 0x7b, 0x72, 0x45, 0xfc, 0x0c, 0x96, 0x10, 0x7f, 0xc5, 0x30, 0x6b, 0xec,
	0xe1, 0xfa, 0x94, 0xc3, 0x18, 0xb0, 0xd0, 0xec, 0x37, 0x55, 0x71, 0x6c, 0x8d, 0x09, 0x47, 0xea,
	0x88, 0x29, 0x45, 0x2f, 0x98, 0xcd, 0x33, 0x35, 0x52, 0x95, 0x3c, 0x53, 0x23, 0x65, 0xf2, 0x6c,
	0x0d, 0x5a, 0xf8, 0x69, 0x68, 0xf7, 0xe6, 0x98, 0xaa, 0xe2, 0xb4, 0x3f, 0xb0, 0x64, 0x81, 0xf1,
	0x72, 0x5c, 0x8c, 0x64, 0x31, 0xa4, 0xf7, 0xc8, 0x62, 0x48, 0x73, 0xb2, 0x58, 0x83, 0x96, 0x8e,
	0x87, 0x4c, 0x3a, 0xc6, 0xb5, 0xd9, 0x0b, 0x46, 0x64, 0x29, 0xd7, 0x83, 0x99, 0x54, 0xf0, 0xc8,
	0x45, 0xc8, 0xfc, 0xf6, 0x03, 0x5b, 0xcc, 0xa8, 0xe7, 0x6d, 0xca, 0xf8, 0xa1, 0xb8, 0x20, 0x21,
	0x86, 0x84, 0xca, 0x3c, 0x60, 0xae, 0x98, 0xa9, 0x74, 0xf1, 0x5a, 0x87, 0x36, 0x7e, 0x14, 0x29,
	0xe3, 0x24, 0x11, 0x17, 0xdd, 0xba, 0x61, 0x76, 0xa0, 0x52, 0xba, 0x0b, 0xfc, 0x2d, 0x58, 0xc1,
	0x3b, 0x7b, 0x82, 0x6b, 0x29, 0x12, 0x83, 0xda, 0x21, 0xa3, 0x37, 0x08, 0xc9, 0x0a, 0x98, 0xf8,
	0x91, 0x22, 0xd5, 0xe6, 0x70, 0x79, 0x10, 0xf9, 0xaf, 0xe1, 0x83, 0xf2, 0x99, 0x5d, 0x46, 0x93,
	0x80, 0x61, 0xb1, 0x3e, 0x83, 0x86, 0x64, 0xb9, 0x15, 0xf8, 0x13, 0xf3, 0xc9, 0xf5, 0xb2, 0x88,
	0x29, 0x07, 0xdd, 0x82, 0x95, 0xec, 0x32, 0xe5, 0x7f, 0x55, 0xb3, 0x7d, 0x10, 0x5d, 0xb2, 0xdd,
	0xcd, 0x01, 0xb8, 0x01, 0xcf, 0x6e, 0x63, 0xee, 0xda, 0x4d, 0xff, 0x92, 0xf2, 0x8b, 0xbc, 0xa5,
	0x2d, 0xde, 0xc6, 0xdc, 0x14, 0x59, 0xcf, 0x48, 0x27, 0x5a, 0x97, 0xa3, 0xdd, 0x71, 0xeb, 0xc2,
	0x8c, 0x65, 0xb7, 0x15, 0xc2, 0x6a, 0x72, 0x76, 0x6b, 0xcb, 0xf4, 0x91, 0x0e, 0x34, 0xf3, 0x48,
	0x07, 0xf2, 0xff, 0xe8, 0xcc, 0x2d, 0xd0, 0xc2, 0x74, 0x46, 0xa8, 0xbe, 0x80, 0x45, 0xc9, 0x68,
	0x99, 0xa6, 0xa7, 0xe5, 0x73, 0x1b, 0xf7, 0x9f, 0x95, 0x58, 0x1e, 0x29, 0x69, 0x7c, 0x7c, 0x5a,
	0x46, 0xb7, 0x22, 0xa5, 0x0b, 0x96, 0xff, 0x9b, 0xeb, 0x56, 0xb8, 0x08, 0xb3, 0x7e, 0xdf, 0x92,
	0x45, 0x5f, 0x70, 0x1d, 0xf3, 0x8c, 0x8d, 0xed, 0x69, 0x06, 0xed, 0x5c, 0x68, 0xb4, 0xe6, 0xd0,
	0x95, 0x19, 0xd4, 0x40, 0x67, 0x29, 0x74, 0x72, 0x28, 0x98, 0x40, 0xf6, 0x15, 0x80, 0xba, 0x14,
	0xb7, 0x15, 0x9a, 0x5f, 0x40, 0x89, 0xc5, 0xf6, 0x23, 0xe8, 0x50, 0x1e, 0x49, 0x11, 0x47, 0xa4,
	0x7f, 0xc9, 0xa8, 0x76, 0x5c, 0xdf, 0x76, 0xc2, 0x1e, 0xca, 0xfc, 0x43, 0x78, 0x6e, 0x0c, 0x4f,
	0x18, 0x95, 0x63, 0xf7, 0x4c, 0x83, 0x30, 0xd9, 0x90, 0x27, 0x9e, 0x5d, 0x4d, 0x89, 0xb5, 0xbf,
	0x05, 0xdd, 0x3c, 0x3a, 0xb9, 0x8f, 0x36, 0xa9, 0x1e, 0xbf, 0xd2, 0xbf, 0x73, 0x5c, 0xc0, 0x92,
	0x41, 0xb1, 0xf7, 0xff, 0x92, 0x7c, 0xfe, 0x4f, 0x6d, 0x15, 0xd9, 0x1c, 0x42, 0xfd, 0x46, 0x4c,
	0x42, 0x9c, 0x01, 0x15, 0x4b, 0x06, 0x4e, 0x3f, 0x22, 0xea, 0xb4, 0x77, 0x54, 0xbe, 0x2b, 0xbc,
	0x14, 0xb7, 0xfe, 0xdf, 0x6b, 0xf0, 0x72, 0xb2, 0x76, 0x5d, 0xaf, 0x78, 0xac, 0x74, 0xf1, 0x83,
	0x99, 0x62, 0xe2, 0x28, 0xef, 0xee, 0xb8, 0x3c, 0x88, 0xaa, 0xcc, 0xde, 0x98, 0x18, 0x0f, 0x5f,
	0xc0, 0x6c, 0x39, 0xca, 0x76, 0xe1, 0xfd, 0x00, 0x9e, 0x5d, 0xc5, 0x09, 0x56, 0x8e, 0x38, 0xa7,
	0xe7, 0x71, 0x12, 0xeb, 0x91, 0x1b, 0xf3, 0x96, 0x50, 0x7e, 0x32, 0x16, 0xa3, 0xda, 0x9b, 0x38,
	0x25, 0x09, 0xbb, 0x31, 0xdd, 0xb2, 0x13, 0xcc, 0xdd, 0xc4, 0xe9, 0x21, 0xbb, 0xf1, 0xff, 0x54,
	0xab, 0xf2, 0x4f, 0xa8, 0x45, 0xff, 0xea, 0xa0, 0x20, 0x51, 0x85, 0xcb, 0xca, 0x44, 0x0b, 0x46,
	0x54, 0x8c, 0xb4, 0x91, 0xb8, 0xe5, 0x24, 0x89, 0x79, 0x0e, 0x7e, 0x13, 0x05, 0x87, 0x31, 0x37,
	0x6d, 0x3a, 0xcd, 0x34, 0x19, 0x0a, 0xce, 0x46, 0x64, 0x48, 0xef, 0x1c, 0xfe, 0xad, 0x34, 0xd3,
	0x47, 0x28, 0x3b, 0xa2, 0x77, 0xa8, 0x21, 0x65, 0x92, 0x48, 0x76, 0xc3, 0x78, 0xc6, 0x5c, 0xbb,
	0x83, 0x94, 0xc9, 0xc0, 0x4a, 0xfc, 0x7f, 0x3c, 0x00, 0xb1, 0xcb, 0xd1, 0x47, 0x21, 0xae, 0xb4,
	0xb5, 0xfa, 0x93, 0xdb, 0x5a, 0x81, 0x71, 0xa3, 0x8c, 0xf1, 0x4b, 0x98, 0x8b, 0xb9, 0xca, 0x0a,
	0xe8, 0xdd, 0xca, 0xfb, 0x04, 0x3c, 0xc9, 0x22, 0x13, 0x2d, 0xcb, 0x1a, 0xe8, 0xb7, 0xe9, 0xc8,
	0x8d, 0x60, 0x49, 0xb2, 0x08, 0xc3, 0x86, 0x7a, 0x76, 0xc5, 0x2d, 0xf7, 0x87, 0x96, 0xb5, 0x72,
	0xbd, 0xc7, 0x42, 0xc7, 0x83, 0xd1, 0xfb, 0x5c, 0xf8, 0x46, 0xc4, 0xe0, 0xff, 0xae, 0x06, 0xaf,
	0x0a, 0x7d, 0x39, 0x09, 0x3d, 0x4d, 0xf1, 0x6b, 0x78, 0x5e, 0xa1, 0xad, 0x92, 0x05, 0xef, 0x43,
	0x71, 0xb9, 0x4c, 0x6b, 0xc6, 0x46, 0x7f, 0xd3, 0xfa, 0x1c, 0xb0, 0xeb, 0x1d, 0x3b, 0xee, 0xd8,
	0xea, 0x9e, 0xe0, 0x81, 0x76, 0xc1, 0x03, 0x7f, 0x76, 0x91, 0x7e, 0x47, 0x63, 0xbd, 0x53, 0x4c,
	0x54, 0x98, 0x89, 0x8f, 0x5b, 0x9b, 0x3f, 0x21, 0xca, 0x4f, 0x2a, 0x14, 0x98, 0x9a, 0x59, 0x81,
	0xf9, 0x01, 0xed, 0x9b, 0x4a, 0xb3, 0xf3, 0xe7, 0x1c, 0x2e, 0x2d, 0xb8, 0xa5, 0x77, 0xc2, 0xcc,
	0xe4, 0x3b, 0x61, 0x15, 0x9a, 0xe6, 0x5c, 0x26, 0x13, 0x53, 0x4d, 0xed, 0xc0, 0xdc, 0x73, 0x26,
	0x13, 0xff, 0x3f, 0x0d, 0x3b, 0x18, 0x4e, 0xd8, 0xf7, 0x31, 0x2c, 0x96, 0x06, 0x43, 0xf2, 0xd0,
	0x64, 0x78, 0xf0, 0x84, 0xc9, 0x70, 0x1d, 0xda, 0x2a, 0xd6, 0xc4, 0xd0, 0x03, 0xcf, 0x86, 0xce,
	0x6a, 0x50, 0xb1, 0xc6, 0xee, 0x7c, 0x9c, 0x0d, 0xbd, 0xef, 0x41, 0xbb, 0xfc, 0x0c, 0xcc, 0x47,
	0xfb, 0xd2, 0xf3, 0x0f, 0x21, 0xb1, 0xdc, 0x95, 0x08, 0xcb, 0xf8, 0x9d, 0xa0, 0x69, 0x58, 0x2b,
	0x11, 0x1a, 0x0d, 0xc5, 0xc7, 0x6d, 0x69, 0xc0, 0xb4, 0x64, 0xd0, 0x96, 0xec, 0xfa, 0xac, 0x98,
	0x31, 0xbf, 0x84, 0x65, 0xdc, 0x85, 0x73, 0x8b, 0xf5, 0x07, 0x1f, 0xc1, 0x76, 0x82, 0x5e, 0xab,
	0x64, 0xc0, 0xfd, 0x50, 0x05, 0x78, 0xff, 0xb6, 0xac, 0x84, 0x2e, 0x0f, 0x42, 0xb3, 0x12, 0x84,
	0x32, 0xca, 0x0b, 0x15, 0x94, 0xd1, 0x85, 0x81, 0x14, 0xe7, 0x46, 0x79, 0x17, 0x4c, 0xd3, 0x6a,
	0xa2, 0x00, 0x2f, 0xf5, 0xbe, 0x0b, 0x0b, 0xc8, 0x28, 0x9a, 0xca, 0x91, 0xee, 0xb6, 0x0c, 0xd9,
	0x8d, 0x05, 0xe5, 0xaf, 0x37, 0xdd, 0xb6, 0x8d, 0x6c, 0x21, 0x28, 0xe7, 0x51, 0xa7, 0x92, 0x47,
	0xab, 0xd0, 0x8c, 0x51, 0x23, 0xed, 0xeb, 0xee, 0xa2, 0x51, 0x38, 0x8f, 0xeb, 0xed, 0xbe, 0xf6,
	0xff, 0x5d, 0x2b, 0x87, 0xbc, 0xe8, 0x50, 0xff, 0xa3, 0x90, 0x7f, 0x3b, 0x8f, 0x81, 0x0f, 0x6c,
	0xd3, 0xdf, 0x3b, 0x3a, 0x39, 0xfd, 0x15, 0x39, 0xda, 0x0b, 0xc3, 0xed, 0xfd, 0x3d, 0x12, 0x4e,
	0x4e, 0xa2, 0x21, 0x4b, 0x58, 0x5f, 0xef, 0x2a, 0x4d, 0x7a, 0x8f, 0x4f, 0xa2, 0x6a, 0xfc, 0x2f,
	0x88, 0xe1, 0x82, 0xde, 0x04, 0x75, 0xd5, 0xde, 0x4f, 0x5d, 0xf7, 0x1a, 0xf6, 0xbd, 0xa1, 0xa5,
	0xf1, 0xc0, 0xd0, 0x22, 0xdd, 0x7f, 0x37, 0xf8, 0x42, 0xc5, 0xd2, 0x20, 0x61, 0xcc, 0x2f, 0x12,
	0x36, 0x86, 0xcb, 0x9c, 0xb4, 0x03, 0x97, 0x85, 0x0b, 0x05, 0xde, 0xe7, 0xd0, 0x29, 0xfa, 0x02,
	0x66, 0xb7, 0x19, 0xc6, 0x5b, 0x5b, 0x2b, 0x0f, 0xb3, 0x5a, 0x2f, 0x68, 0xe5, 0xad, 0x61, 0x5b,
	0x4a, 0xff, 0xd4, 0xb2, 0x53, 0x99, 0x52, 0x9d, 0xc3, 0x9f, 0x41, 0xbb, 0x32, 0x39, 0x4e, 0x1b,
	0x3c, 0xa1, 0x34, 0x38, 0x1e, 0x55, 0xc7, 0xd9, 0x90, 0x39, 0xbc, 0xbb, 0x30, 0xdf, 0xb7, 0x32,
	0xe7, 0x46, 0xbe, 0x7c, 0xef, 0x9b, 0xdb, 0xff, 0xc4, 0x3e, 0xdf, 0xc7, 0x9c, 0x6b, 0x6e, 0xca,
	0xff, 0x2c, 0x72, 0x37, 0xb9, 0xa5, 0xff, 0x97, 0x3a, 0xac, 0x4d, 0xb6, 0xd6, 0x53, 0xa1, 0x69,
	0x62, 0x39, 0xdc, 0x4c, 0x00, 0xdf, 0x74, 0xac, 0xfe, 0x0c, 0xda, 0x34, 0xfe, 0x1a, 0x53, 0x35,
	0xd0, 0xb8, 0x38, 0xdb, 0x83, 0xe5, 0x81, 0x30, 0xf9, 0x4b, 0x9e, 0xfe, 0xbf, 0xcd, 0xe2, 0x40,
	0x60, 0x8a, 0x17, 0x97, 0xec, 0x81, 0x87, 0x97, 0x24, 0xa2, 0x12, 0xa2, 0x69, 0x7f, 0xe1, 0x2c,
	0x0d, 0x84, 0x3c, 0x14, 0xa5, 0x38, 0x7d, 0x6a, 0xa3, 0x6f, 0xff, 0x60, 0x7c, 0x7b, 0x7c, 0x78,
	0x70, 0xbc, 0x47, 0x4e, 0xdf, 0x9e, 0x6e, 0x1f, 0x9a, 0x19, 0xc9, 0x3e, 0x84, 0xaf, 0x62, 0x9e,
	0x57, 0x07, 0x58, 0xd1, 0x9b, 0x98, 0x47, 0xfe, 0x6f, 0xc6, 0x47, 0xc3, 0xaf, 0x77, 0x14, 0xe9,
	0x5e, 0x70, 0x9c, 0xad, 0x88, 0xc6, 0xb8, 0xb8, 0x70, 0xb7, 0xac, 0xcc, 0x84, 0xca, 0x7f, 0x6e,
	0x5f, 0xa4, 0xee, 0x9f, 0xcf, 0xb7, 0x3b, 0x3b, 0xdb, 0xc7, 0x6f, 0xfc, 0x5f, 0xc3, 0x87, 0x63,
	0x95, 0xdb, 0xb6, 0x72, 0xec, 0x94, 0x3b, 0x7e, 0x75, 0x30, 0x8a, 0xa3, 0x59, 0xc4, 0xf2, 0x32,
	0x31, 0x92, 0x23, 0x11, 0xb1, 0x29, 0xb3, 0xc7, 0x4e, 0xfd, 0x75, 0xe3, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xad, 0x0f, 0xec, 0x05, 0x8d, 0x15, 0x00, 0x00,
}
