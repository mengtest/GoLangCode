// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CMD_GlobalServer.proto

/*
Package CMD_GLOBAL is a generated protocol buffer package.

Namespace: MESSAGE

It is generated from these files:
	CMD_GlobalServer.proto

It has these top-level messages:
	CMD_S_WORLD_BOSS_COUNTDOWN
	CMD_S_WORLD_BOSS_WARNING
	CMD_S_WORLD_BOSS_APPEAR
	CMD_S_WORLD_BOSS_KILLING
	CMD_S_SYNC_WORLD_BOSS_BLOOD
	WorldBossUserRank
	CMD_S_WORLD_BOSS_ACTIVITY_CLOSE
	LuckyGuyInfo
	CMD_C_GET_CLASSIC_PRIZE_POOL
	CMD_S_GET_CLASSIC_PRIZE_POOL
	CMD_C_CLASSIC_PRIZE_POOL_DRAW_TURN
	CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN
	CMD_C_CLASSIC_PRIZE_POOL_TURN_RANK
	ClassicsPrizePoolRanking
	CMD_S_CLASSIC_PRIZE_POOL_TURN_RANK
	CMD_C_HEART_BEAT_CHAT
	CMD_S_HEART_BEAT_CHAT
	CMD_C_LOGIN
	CMD_S_LOGIN
	FriendUserInfo
	FriendInfo
	CMD_C_FRIEND_LIST
	CMD_S_FRIEND_LIST
	CMD_C_SEARCH_FRIEND
	CMD_S_SEARCH_FRIEND
	ApplyFiend
	CMD_C_APPLY_FRIEND
	CMD_S_APPLY_FRIEND_RESULT
	CMD_C_DELETE_FRIEND
	CMD_S_DELETE_FRIEND
	CMD_C_GET_CHAT_MESSAGE
	ChatPacket
	CMD_S_GET_CHAT_MESSAGE
	CMD_C_CHAT_MESSAGE
	CMD_S_CHAT_MESSAGE
	CMD_S_NOTIFY_NEW_CHAT_MESSAGE
	CMD_S_FANTASY_EXHIBITION_STATE
	CMD_S_DROP_FANTASY_LOTTERY
	FantasyExhibitionUserRank
	CMD_C_GET_FANTASY_EXHIBITION_RANK
	CMD_S_GET_FANTASY_EXHIBITION_RANK
	CMD_C_GET_FANTASY_EXHIBITION_LOTTERY
	CMD_S_GET_FANTASY_EXHIBITION_LOTTERY
	PlayerRoomTaskFish
	CMD_S_ROOM_TASK_PROCESS
	CMD_S_UPDATE_ROOM_TASK_RANK
	CMD_S_CLOSE_ROOM_TASK
*/
package CMD_GLOBAL

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 协议返回结果
type ReplyResult int32

const (
	ReplyResult_Successful ReplyResult = 0
	ReplyResult_Failed     ReplyResult = 1
	// ******聊天相关*******
	ReplyResult_NotFoundUser       ReplyResult = 2
	ReplyResult_ApplyRepeatedly    ReplyResult = 3
	ReplyResult_ApplyUpperLimit    ReplyResult = 4
	ReplyResult_FriendUpperLimit   ReplyResult = 5
	ReplyResult_FriendExisted      ReplyResult = 6
	ReplyResult_ContainConfineChar ReplyResult = 7
	ReplyResult_OtherFriendFull    ReplyResult = 8
)

var ReplyResult_name = map[int32]string{
	0: "Successful",
	1: "Failed",
	2: "NotFoundUser",
	3: "ApplyRepeatedly",
	4: "ApplyUpperLimit",
	5: "FriendUpperLimit",
	6: "FriendExisted",
	7: "ContainConfineChar",
	8: "OtherFriendFull",
}
var ReplyResult_value = map[string]int32{
	"Successful":         0,
	"Failed":             1,
	"NotFoundUser":       2,
	"ApplyRepeatedly":    3,
	"ApplyUpperLimit":    4,
	"FriendUpperLimit":   5,
	"FriendExisted":      6,
	"ContainConfineChar": 7,
	"OtherFriendFull":    8,
}

func (x ReplyResult) Enum() *ReplyResult {
	p := new(ReplyResult)
	*p = x
	return p
}
func (x ReplyResult) String() string {
	return proto.EnumName(ReplyResult_name, int32(x))
}
func (x *ReplyResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReplyResult_value, data, "ReplyResult")
	if err != nil {
		return err
	}
	*x = ReplyResult(value)
	return nil
}
func (ReplyResult) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// boss行动
type WorldBossAction int32

const (
	WorldBossAction_Come     WorldBossAction = 1
	WorldBossAction_Comeback WorldBossAction = 2
	WorldBossAction_Leave    WorldBossAction = 3
)

var WorldBossAction_name = map[int32]string{
	1: "Come",
	2: "Comeback",
	3: "Leave",
}
var WorldBossAction_value = map[string]int32{
	"Come":     1,
	"Comeback": 2,
	"Leave":    3,
}

func (x WorldBossAction) Enum() *WorldBossAction {
	p := new(WorldBossAction)
	*p = x
	return p
}
func (x WorldBossAction) String() string {
	return proto.EnumName(WorldBossAction_name, int32(x))
}
func (x *WorldBossAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WorldBossAction_value, data, "WorldBossAction")
	if err != nil {
		return err
	}
	*x = WorldBossAction(value)
	return nil
}
func (WorldBossAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 大奖池类型
type PoolType int32

const (
	PoolType_Classic PoolType = 0
	PoolType_Monster PoolType = 1
)

var PoolType_name = map[int32]string{
	0: "Classic",
	1: "Monster",
}
var PoolType_value = map[string]int32{
	"Classic": 0,
	"Monster": 1,
}

func (x PoolType) Enum() *PoolType {
	p := new(PoolType)
	*p = x
	return p
}
func (x PoolType) String() string {
	return proto.EnumName(PoolType_name, int32(x))
}
func (x *PoolType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PoolType_value, data, "PoolType")
	if err != nil {
		return err
	}
	*x = PoolType(value)
	return nil
}
func (PoolType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 申请好友操作类型
type ApplyOpt int32

const (
	ApplyOpt_Apply  ApplyOpt = 1
	ApplyOpt_Cancel ApplyOpt = 2
	ApplyOpt_Agree  ApplyOpt = 3
	ApplyOpt_refuse ApplyOpt = 4
)

var ApplyOpt_name = map[int32]string{
	1: "Apply",
	2: "Cancel",
	3: "Agree",
	4: "refuse",
}
var ApplyOpt_value = map[string]int32{
	"Apply":  1,
	"Cancel": 2,
	"Agree":  3,
	"refuse": 4,
}

func (x ApplyOpt) Enum() *ApplyOpt {
	p := new(ApplyOpt)
	*p = x
	return p
}
func (x ApplyOpt) String() string {
	return proto.EnumName(ApplyOpt_name, int32(x))
}
func (x *ApplyOpt) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ApplyOpt_value, data, "ApplyOpt")
	if err != nil {
		return err
	}
	*x = ApplyOpt(value)
	return nil
}
func (ApplyOpt) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// 梦幻展览活动
type FantasyExhibitionState int32

const (
	FantasyExhibitionState_Wait   FantasyExhibitionState = 0
	FantasyExhibitionState_Start  FantasyExhibitionState = 1
	FantasyExhibitionState_InPlay FantasyExhibitionState = 2
	FantasyExhibitionState_Over   FantasyExhibitionState = 3
)

var FantasyExhibitionState_name = map[int32]string{
	0: "Wait",
	1: "Start",
	2: "InPlay",
	3: "Over",
}
var FantasyExhibitionState_value = map[string]int32{
	"Wait":   0,
	"Start":  1,
	"InPlay": 2,
	"Over":   3,
}

func (x FantasyExhibitionState) Enum() *FantasyExhibitionState {
	p := new(FantasyExhibitionState)
	*p = x
	return p
}
func (x FantasyExhibitionState) String() string {
	return proto.EnumName(FantasyExhibitionState_name, int32(x))
}
func (x *FantasyExhibitionState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FantasyExhibitionState_value, data, "FantasyExhibitionState")
	if err != nil {
		return err
	}
	*x = FantasyExhibitionState(value)
	return nil
}
func (FantasyExhibitionState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// 获取奖池信息类型
type CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType int32

const (
	CMD_C_GET_CLASSIC_PRIZE_POOL_OnlyStock     CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType = 0
	CMD_C_GET_CLASSIC_PRIZE_POOL_ContainExtend CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType = 1
)

var CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType_name = map[int32]string{
	0: "OnlyStock",
	1: "ContainExtend",
}
var CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType_value = map[string]int32{
	"OnlyStock":     0,
	"ContainExtend": 1,
}

func (x CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType) Enum() *CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType {
	p := new(CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType)
	*p = x
	return p
}
func (x CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType) String() string {
	return proto.EnumName(CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType_name, int32(x))
}
func (x *CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType_value, data, "CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType")
	if err != nil {
		return err
	}
	*x = CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType(value)
	return nil
}
func (CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8, 0}
}

type CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result int32

const (
	CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Successful CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result = 0
	CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Failed     CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result = 1
)

var CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result_name = map[int32]string{
	0: "Successful",
	1: "Failed",
}
var CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result_value = map[string]int32{
	"Successful": 0,
	"Failed":     1,
}

func (x CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result) Enum() *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result {
	p := new(CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result)
	*p = x
	return p
}
func (x CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result) String() string {
	return proto.EnumName(CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result_name, int32(x))
}
func (x *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result_value, data, "CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result")
	if err != nil {
		return err
	}
	*x = CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result(value)
	return nil
}
func (CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0}
}

// 世界boss倒计时
type CMD_S_WORLD_BOSS_COUNTDOWN struct {
	Action           *WorldBossAction `protobuf:"varint,1,opt,name=action,enum=CMD_GLOBAL.WorldBossAction" json:"action,omitempty"`
	Countdown        *uint32          `protobuf:"varint,2,opt,name=countdown" json:"countdown,omitempty"`
	TimeStamp        *uint64          `protobuf:"varint,3,opt,name=timeStamp" json:"timeStamp,omitempty"`
	BossId           *uint32          `protobuf:"varint,4,opt,name=bossId" json:"bossId,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_S_WORLD_BOSS_COUNTDOWN) Reset()                    { *m = CMD_S_WORLD_BOSS_COUNTDOWN{} }
func (m *CMD_S_WORLD_BOSS_COUNTDOWN) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_WORLD_BOSS_COUNTDOWN) ProtoMessage()               {}
func (*CMD_S_WORLD_BOSS_COUNTDOWN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CMD_S_WORLD_BOSS_COUNTDOWN) GetAction() WorldBossAction {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return WorldBossAction_Come
}

func (m *CMD_S_WORLD_BOSS_COUNTDOWN) GetCountdown() uint32 {
	if m != nil && m.Countdown != nil {
		return *m.Countdown
	}
	return 0
}

func (m *CMD_S_WORLD_BOSS_COUNTDOWN) GetTimeStamp() uint64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *CMD_S_WORLD_BOSS_COUNTDOWN) GetBossId() uint32 {
	if m != nil && m.BossId != nil {
		return *m.BossId
	}
	return 0
}

// 世界boss预警
type CMD_S_WORLD_BOSS_WARNING struct {
	Action           *WorldBossAction `protobuf:"varint,1,opt,name=action,enum=CMD_GLOBAL.WorldBossAction" json:"action,omitempty"`
	BossId           *uint32          `protobuf:"varint,2,opt,name=bossId" json:"bossId,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_S_WORLD_BOSS_WARNING) Reset()                    { *m = CMD_S_WORLD_BOSS_WARNING{} }
func (m *CMD_S_WORLD_BOSS_WARNING) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_WORLD_BOSS_WARNING) ProtoMessage()               {}
func (*CMD_S_WORLD_BOSS_WARNING) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CMD_S_WORLD_BOSS_WARNING) GetAction() WorldBossAction {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return WorldBossAction_Come
}

func (m *CMD_S_WORLD_BOSS_WARNING) GetBossId() uint32 {
	if m != nil && m.BossId != nil {
		return *m.BossId
	}
	return 0
}

// 世界boss出现（进场/返场）
type CMD_S_WORLD_BOSS_APPEAR struct {
	CurBlood         *uint64 `protobuf:"varint,1,opt,name=curBlood" json:"curBlood,omitempty"`
	MaxBlood         *uint64 `protobuf:"varint,2,opt,name=maxBlood" json:"maxBlood,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_WORLD_BOSS_APPEAR) Reset()                    { *m = CMD_S_WORLD_BOSS_APPEAR{} }
func (m *CMD_S_WORLD_BOSS_APPEAR) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_WORLD_BOSS_APPEAR) ProtoMessage()               {}
func (*CMD_S_WORLD_BOSS_APPEAR) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CMD_S_WORLD_BOSS_APPEAR) GetCurBlood() uint64 {
	if m != nil && m.CurBlood != nil {
		return *m.CurBlood
	}
	return 0
}

func (m *CMD_S_WORLD_BOSS_APPEAR) GetMaxBlood() uint64 {
	if m != nil && m.MaxBlood != nil {
		return *m.MaxBlood
	}
	return 0
}

// 世界boss进入击杀阶段
type CMD_S_WORLD_BOSS_KILLING struct {
	BossId           *uint32 `protobuf:"varint,1,opt,name=bossId" json:"bossId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_WORLD_BOSS_KILLING) Reset()                    { *m = CMD_S_WORLD_BOSS_KILLING{} }
func (m *CMD_S_WORLD_BOSS_KILLING) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_WORLD_BOSS_KILLING) ProtoMessage()               {}
func (*CMD_S_WORLD_BOSS_KILLING) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CMD_S_WORLD_BOSS_KILLING) GetBossId() uint32 {
	if m != nil && m.BossId != nil {
		return *m.BossId
	}
	return 0
}

// 同步血量
type CMD_S_SYNC_WORLD_BOSS_BLOOD struct {
	CurBlood         *uint64 `protobuf:"varint,1,opt,name=curBlood" json:"curBlood,omitempty"`
	MaxBlood         *uint64 `protobuf:"varint,2,opt,name=maxBlood" json:"maxBlood,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_SYNC_WORLD_BOSS_BLOOD) Reset()                    { *m = CMD_S_SYNC_WORLD_BOSS_BLOOD{} }
func (m *CMD_S_SYNC_WORLD_BOSS_BLOOD) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SYNC_WORLD_BOSS_BLOOD) ProtoMessage()               {}
func (*CMD_S_SYNC_WORLD_BOSS_BLOOD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CMD_S_SYNC_WORLD_BOSS_BLOOD) GetCurBlood() uint64 {
	if m != nil && m.CurBlood != nil {
		return *m.CurBlood
	}
	return 0
}

func (m *CMD_S_SYNC_WORLD_BOSS_BLOOD) GetMaxBlood() uint64 {
	if m != nil && m.MaxBlood != nil {
		return *m.MaxBlood
	}
	return 0
}

// 用户排名
type WorldBossUserRank struct {
	Rank             *uint32 `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Nick             []byte  `protobuf:"bytes,3,opt,name=nick" json:"nick,omitempty"`
	Reward           *uint32 `protobuf:"varint,4,opt,name=reward" json:"reward,omitempty"`
	FaceId           *uint32 `protobuf:"varint,5,opt,name=faceId" json:"faceId,omitempty"`
	VipLev           *uint32 `protobuf:"varint,6,opt,name=vipLev" json:"vipLev,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WorldBossUserRank) Reset()                    { *m = WorldBossUserRank{} }
func (m *WorldBossUserRank) String() string            { return proto.CompactTextString(m) }
func (*WorldBossUserRank) ProtoMessage()               {}
func (*WorldBossUserRank) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WorldBossUserRank) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *WorldBossUserRank) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *WorldBossUserRank) GetNick() []byte {
	if m != nil {
		return m.Nick
	}
	return nil
}

func (m *WorldBossUserRank) GetReward() uint32 {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return 0
}

func (m *WorldBossUserRank) GetFaceId() uint32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

func (m *WorldBossUserRank) GetVipLev() uint32 {
	if m != nil && m.VipLev != nil {
		return *m.VipLev
	}
	return 0
}

// 活动结束
type CMD_S_WORLD_BOSS_ACTIVITY_CLOSE struct {
	BKilled          *bool                `protobuf:"varint,1,opt,name=bKilled" json:"bKilled,omitempty"`
	Rank             []*WorldBossUserRank `protobuf:"bytes,2,rep,name=rank" json:"rank,omitempty"`
	BossId           *uint32              `protobuf:"varint,3,opt,name=bossId" json:"bossId,omitempty"`
	OpenTime         *uint32              `protobuf:"varint,4,opt,name=open_time,json=openTime" json:"open_time,omitempty"`
	KillerUserId     *uint32              `protobuf:"varint,5,opt,name=killer_user_id,json=killerUserId" json:"killer_user_id,omitempty"`
	KillerGetScore   *uint64              `protobuf:"varint,6,opt,name=killer_get_score,json=killerGetScore" json:"killer_get_score,omitempty"`
	KillerNick       []byte               `protobuf:"bytes,7,opt,name=killer_nick,json=killerNick" json:"killer_nick,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *CMD_S_WORLD_BOSS_ACTIVITY_CLOSE) Reset()                    { *m = CMD_S_WORLD_BOSS_ACTIVITY_CLOSE{} }
func (m *CMD_S_WORLD_BOSS_ACTIVITY_CLOSE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_WORLD_BOSS_ACTIVITY_CLOSE) ProtoMessage()               {}
func (*CMD_S_WORLD_BOSS_ACTIVITY_CLOSE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CMD_S_WORLD_BOSS_ACTIVITY_CLOSE) GetBKilled() bool {
	if m != nil && m.BKilled != nil {
		return *m.BKilled
	}
	return false
}

func (m *CMD_S_WORLD_BOSS_ACTIVITY_CLOSE) GetRank() []*WorldBossUserRank {
	if m != nil {
		return m.Rank
	}
	return nil
}

func (m *CMD_S_WORLD_BOSS_ACTIVITY_CLOSE) GetBossId() uint32 {
	if m != nil && m.BossId != nil {
		return *m.BossId
	}
	return 0
}

func (m *CMD_S_WORLD_BOSS_ACTIVITY_CLOSE) GetOpenTime() uint32 {
	if m != nil && m.OpenTime != nil {
		return *m.OpenTime
	}
	return 0
}

func (m *CMD_S_WORLD_BOSS_ACTIVITY_CLOSE) GetKillerUserId() uint32 {
	if m != nil && m.KillerUserId != nil {
		return *m.KillerUserId
	}
	return 0
}

func (m *CMD_S_WORLD_BOSS_ACTIVITY_CLOSE) GetKillerGetScore() uint64 {
	if m != nil && m.KillerGetScore != nil {
		return *m.KillerGetScore
	}
	return 0
}

func (m *CMD_S_WORLD_BOSS_ACTIVITY_CLOSE) GetKillerNick() []byte {
	if m != nil {
		return m.KillerNick
	}
	return nil
}

// 轮盘中奖人信息
type LuckyGuyInfo struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Nick             []byte  `protobuf:"bytes,2,opt,name=nick" json:"nick,omitempty"`
	Reward           *uint32 `protobuf:"varint,3,opt,name=reward" json:"reward,omitempty"`
	FaceId           *uint32 `protobuf:"varint,4,opt,name=face_id,json=faceId" json:"face_id,omitempty"`
	VipLev           *uint32 `protobuf:"varint,5,opt,name=vip_lev,json=vipLev" json:"vip_lev,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LuckyGuyInfo) Reset()                    { *m = LuckyGuyInfo{} }
func (m *LuckyGuyInfo) String() string            { return proto.CompactTextString(m) }
func (*LuckyGuyInfo) ProtoMessage()               {}
func (*LuckyGuyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LuckyGuyInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *LuckyGuyInfo) GetNick() []byte {
	if m != nil {
		return m.Nick
	}
	return nil
}

func (m *LuckyGuyInfo) GetReward() uint32 {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return 0
}

func (m *LuckyGuyInfo) GetFaceId() uint32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

func (m *LuckyGuyInfo) GetVipLev() uint32 {
	if m != nil && m.VipLev != nil {
		return *m.VipLev
	}
	return 0
}

// 获取奖池信息
type CMD_C_GET_CLASSIC_PRIZE_POOL struct {
	Type             *CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType `protobuf:"varint,1,opt,name=type,enum=CMD_GLOBAL.CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType" json:"type,omitempty"`
	PoolType         *PoolType                                      `protobuf:"varint,2,opt,name=pool_type,json=poolType,enum=CMD_GLOBAL.PoolType" json:"pool_type,omitempty"`
	XXX_unrecognized []byte                                         `json:"-"`
}

func (m *CMD_C_GET_CLASSIC_PRIZE_POOL) Reset()                    { *m = CMD_C_GET_CLASSIC_PRIZE_POOL{} }
func (m *CMD_C_GET_CLASSIC_PRIZE_POOL) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_GET_CLASSIC_PRIZE_POOL) ProtoMessage()               {}
func (*CMD_C_GET_CLASSIC_PRIZE_POOL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CMD_C_GET_CLASSIC_PRIZE_POOL) GetType() CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CMD_C_GET_CLASSIC_PRIZE_POOL_OnlyStock
}

func (m *CMD_C_GET_CLASSIC_PRIZE_POOL) GetPoolType() PoolType {
	if m != nil && m.PoolType != nil {
		return *m.PoolType
	}
	return PoolType_Classic
}

// 获取奖池信息
type CMD_S_GET_CLASSIC_PRIZE_POOL struct {
	Type             *CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType `protobuf:"varint,1,opt,name=type,enum=CMD_GLOBAL.CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType" json:"type,omitempty"`
	Stock            *uint64                                        `protobuf:"varint,2,opt,name=stock" json:"stock,omitempty"`
	LuckyGuy         *LuckyGuyInfo                                  `protobuf:"bytes,3,opt,name=lucky_guy,json=luckyGuy" json:"lucky_guy,omitempty"`
	PoolType         *PoolType                                      `protobuf:"varint,4,opt,name=pool_type,json=poolType,enum=CMD_GLOBAL.PoolType" json:"pool_type,omitempty"`
	XXX_unrecognized []byte                                         `json:"-"`
}

func (m *CMD_S_GET_CLASSIC_PRIZE_POOL) Reset()                    { *m = CMD_S_GET_CLASSIC_PRIZE_POOL{} }
func (m *CMD_S_GET_CLASSIC_PRIZE_POOL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GET_CLASSIC_PRIZE_POOL) ProtoMessage()               {}
func (*CMD_S_GET_CLASSIC_PRIZE_POOL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CMD_S_GET_CLASSIC_PRIZE_POOL) GetType() CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CMD_C_GET_CLASSIC_PRIZE_POOL_OnlyStock
}

func (m *CMD_S_GET_CLASSIC_PRIZE_POOL) GetStock() uint64 {
	if m != nil && m.Stock != nil {
		return *m.Stock
	}
	return 0
}

func (m *CMD_S_GET_CLASSIC_PRIZE_POOL) GetLuckyGuy() *LuckyGuyInfo {
	if m != nil {
		return m.LuckyGuy
	}
	return nil
}

func (m *CMD_S_GET_CLASSIC_PRIZE_POOL) GetPoolType() PoolType {
	if m != nil && m.PoolType != nil {
		return *m.PoolType
	}
	return PoolType_Classic
}

// 奖池轮盘抽奖
type CMD_C_CLASSIC_PRIZE_POOL_DRAW_TURN struct {
	Star             *uint32       `protobuf:"varint,1,opt,name=star" json:"star,omitempty"`
	Player           *LuckyGuyInfo `protobuf:"bytes,2,opt,name=player" json:"player,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *CMD_C_CLASSIC_PRIZE_POOL_DRAW_TURN) Reset()         { *m = CMD_C_CLASSIC_PRIZE_POOL_DRAW_TURN{} }
func (m *CMD_C_CLASSIC_PRIZE_POOL_DRAW_TURN) String() string { return proto.CompactTextString(m) }
func (*CMD_C_CLASSIC_PRIZE_POOL_DRAW_TURN) ProtoMessage()    {}
func (*CMD_C_CLASSIC_PRIZE_POOL_DRAW_TURN) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10}
}

func (m *CMD_C_CLASSIC_PRIZE_POOL_DRAW_TURN) GetStar() uint32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *CMD_C_CLASSIC_PRIZE_POOL_DRAW_TURN) GetPlayer() *LuckyGuyInfo {
	if m != nil {
		return m.Player
	}
	return nil
}

// 奖池轮盘抽奖
type CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN struct {
	Result           *uint32                                              `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	UserId           *uint32                                              `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Turnplate        []*CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_TurnplateIndex `protobuf:"bytes,3,rep,name=turnplate" json:"turnplate,omitempty"`
	Uindex           *uint32                                              `protobuf:"varint,4,opt,name=uindex" json:"uindex,omitempty"`
	Reward           *uint32                                              `protobuf:"varint,5,opt,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte                                               `json:"-"`
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN) Reset()         { *m = CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN{} }
func (m *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN) String() string { return proto.CompactTextString(m) }
func (*CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN) ProtoMessage()    {}
func (*CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11}
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN) GetResult() uint32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN) GetTurnplate() []*CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_TurnplateIndex {
	if m != nil {
		return m.Turnplate
	}
	return nil
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN) GetUindex() uint32 {
	if m != nil && m.Uindex != nil {
		return *m.Uindex
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN) GetReward() uint32 {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return 0
}

// 轮盘项信息
type CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_TurnplateIndex struct {
	Index            *int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Ratio            *int32 `protobuf:"varint,2,opt,name=ratio" json:"ratio,omitempty"`
	Type             *int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	SubType          *int32 `protobuf:"varint,4,opt,name=sub_type,json=subType" json:"sub_type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_TurnplateIndex) Reset() {
	*m = CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_TurnplateIndex{}
}
func (m *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_TurnplateIndex) String() string {
	return proto.CompactTextString(m)
}
func (*CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_TurnplateIndex) ProtoMessage() {}
func (*CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_TurnplateIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0}
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_TurnplateIndex) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_TurnplateIndex) GetRatio() int32 {
	if m != nil && m.Ratio != nil {
		return *m.Ratio
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_TurnplateIndex) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_TurnplateIndex) GetSubType() int32 {
	if m != nil && m.SubType != nil {
		return *m.SubType
	}
	return 0
}

// 奖池轮盘抽奖排行
type CMD_C_CLASSIC_PRIZE_POOL_TURN_RANK struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_CLASSIC_PRIZE_POOL_TURN_RANK) Reset()         { *m = CMD_C_CLASSIC_PRIZE_POOL_TURN_RANK{} }
func (m *CMD_C_CLASSIC_PRIZE_POOL_TURN_RANK) String() string { return proto.CompactTextString(m) }
func (*CMD_C_CLASSIC_PRIZE_POOL_TURN_RANK) ProtoMessage()    {}
func (*CMD_C_CLASSIC_PRIZE_POOL_TURN_RANK) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12}
}

// 奖池轮盘抽奖排行玩家
type ClassicsPrizePoolRanking struct {
	Rank             *uint32       `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Player           *LuckyGuyInfo `protobuf:"bytes,2,opt,name=player" json:"player,omitempty"`
	RewardId         *uint32       `protobuf:"varint,3,opt,name=reward_id,json=rewardId" json:"reward_id,omitempty"`
	Reward           *uint32       `protobuf:"varint,4,opt,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ClassicsPrizePoolRanking) Reset()                    { *m = ClassicsPrizePoolRanking{} }
func (m *ClassicsPrizePoolRanking) String() string            { return proto.CompactTextString(m) }
func (*ClassicsPrizePoolRanking) ProtoMessage()               {}
func (*ClassicsPrizePoolRanking) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ClassicsPrizePoolRanking) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *ClassicsPrizePoolRanking) GetPlayer() *LuckyGuyInfo {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *ClassicsPrizePoolRanking) GetRewardId() uint32 {
	if m != nil && m.RewardId != nil {
		return *m.RewardId
	}
	return 0
}

func (m *ClassicsPrizePoolRanking) GetReward() uint32 {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return 0
}

// 奖池轮盘抽奖排行
type CMD_S_CLASSIC_PRIZE_POOL_TURN_RANK struct {
	Player           []*ClassicsPrizePoolRanking `protobuf:"bytes,1,rep,name=player" json:"player,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_TURN_RANK) Reset()         { *m = CMD_S_CLASSIC_PRIZE_POOL_TURN_RANK{} }
func (m *CMD_S_CLASSIC_PRIZE_POOL_TURN_RANK) String() string { return proto.CompactTextString(m) }
func (*CMD_S_CLASSIC_PRIZE_POOL_TURN_RANK) ProtoMessage()    {}
func (*CMD_S_CLASSIC_PRIZE_POOL_TURN_RANK) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14}
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_TURN_RANK) GetPlayer() []*ClassicsPrizePoolRanking {
	if m != nil {
		return m.Player
	}
	return nil
}

// 心跳
type CMD_C_HEART_BEAT_CHAT struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_HEART_BEAT_CHAT) Reset()                    { *m = CMD_C_HEART_BEAT_CHAT{} }
func (m *CMD_C_HEART_BEAT_CHAT) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_HEART_BEAT_CHAT) ProtoMessage()               {}
func (*CMD_C_HEART_BEAT_CHAT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CMD_C_HEART_BEAT_CHAT) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type CMD_S_HEART_BEAT_CHAT struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TimeStamp        *int64  `protobuf:"varint,2,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_HEART_BEAT_CHAT) Reset()                    { *m = CMD_S_HEART_BEAT_CHAT{} }
func (m *CMD_S_HEART_BEAT_CHAT) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_HEART_BEAT_CHAT) ProtoMessage()               {}
func (*CMD_S_HEART_BEAT_CHAT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CMD_S_HEART_BEAT_CHAT) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_HEART_BEAT_CHAT) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

// 登录
type CMD_C_LOGIN struct {
	Token            *string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GameId           *uint32 `protobuf:"varint,3,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Rand             *uint32 `protobuf:"varint,4,opt,name=rand" json:"rand,omitempty"`
	Rand2            *uint64 `protobuf:"varint,5,opt,name=rand2" json:"rand2,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_LOGIN) Reset()                    { *m = CMD_C_LOGIN{} }
func (m *CMD_C_LOGIN) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_LOGIN) ProtoMessage()               {}
func (*CMD_C_LOGIN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CMD_C_LOGIN) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *CMD_C_LOGIN) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_C_LOGIN) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *CMD_C_LOGIN) GetRand() uint32 {
	if m != nil && m.Rand != nil {
		return *m.Rand
	}
	return 0
}

func (m *CMD_C_LOGIN) GetRand2() uint64 {
	if m != nil && m.Rand2 != nil {
		return *m.Rand2
	}
	return 0
}

// 登录结果
type CMD_S_LOGIN struct {
	Result           *ReplyResult `protobuf:"varint,1,opt,name=result,enum=CMD_GLOBAL.ReplyResult" json:"result,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CMD_S_LOGIN) Reset()                    { *m = CMD_S_LOGIN{} }
func (m *CMD_S_LOGIN) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_LOGIN) ProtoMessage()               {}
func (*CMD_S_LOGIN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CMD_S_LOGIN) GetResult() ReplyResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ReplyResult_Successful
}

// 玩家信息
type FriendUserInfo struct {
	UserId                       *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GameId                       *uint32 `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	FaceId                       *uint32 `protobuf:"varint,3,opt,name=face_id,json=faceId" json:"face_id,omitempty"`
	VipLev                       *uint32 `protobuf:"varint,4,opt,name=vip_lev,json=vipLev" json:"vip_lev,omitempty"`
	Nick                         []byte  `protobuf:"bytes,5,opt,name=nick" json:"nick,omitempty"`
	GuildId                      *uint32 `protobuf:"varint,6,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	GuildName                    []byte  `protobuf:"bytes,7,opt,name=guild_name,json=guildName" json:"guild_name,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *FriendUserInfo) Reset()                    { *m = FriendUserInfo{} }
func (m *FriendUserInfo) String() string            { return proto.CompactTextString(m) }
func (*FriendUserInfo) ProtoMessage()               {}
func (*FriendUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

var extRange_FriendUserInfo = []proto.ExtensionRange{
	{50, 100},
}

func (*FriendUserInfo) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_FriendUserInfo
}

func (m *FriendUserInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *FriendUserInfo) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *FriendUserInfo) GetFaceId() uint32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

func (m *FriendUserInfo) GetVipLev() uint32 {
	if m != nil && m.VipLev != nil {
		return *m.VipLev
	}
	return 0
}

func (m *FriendUserInfo) GetNick() []byte {
	if m != nil {
		return m.Nick
	}
	return nil
}

func (m *FriendUserInfo) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *FriendUserInfo) GetGuildName() []byte {
	if m != nil {
		return m.GuildName
	}
	return nil
}

// 好友信息
type FriendInfo struct {
	UserInfo         *FriendUserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo" json:"user_info,omitempty"`
	UnreadCount      *uint32         `protobuf:"varint,2,opt,name=unread_count,json=unreadCount" json:"unread_count,omitempty"`
	MessageTime      *int64          `protobuf:"varint,3,opt,name=message_time,json=messageTime" json:"message_time,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *FriendInfo) Reset()                    { *m = FriendInfo{} }
func (m *FriendInfo) String() string            { return proto.CompactTextString(m) }
func (*FriendInfo) ProtoMessage()               {}
func (*FriendInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *FriendInfo) GetUserInfo() *FriendUserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *FriendInfo) GetUnreadCount() uint32 {
	if m != nil && m.UnreadCount != nil {
		return *m.UnreadCount
	}
	return 0
}

func (m *FriendInfo) GetMessageTime() int64 {
	if m != nil && m.MessageTime != nil {
		return *m.MessageTime
	}
	return 0
}

// 好友列表
type CMD_C_FRIEND_LIST struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_FRIEND_LIST) Reset()                    { *m = CMD_C_FRIEND_LIST{} }
func (m *CMD_C_FRIEND_LIST) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_FRIEND_LIST) ProtoMessage()               {}
func (*CMD_C_FRIEND_LIST) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CMD_C_FRIEND_LIST) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 好友列表
type CMD_S_FRIEND_LIST struct {
	ApplyList        []*FriendUserInfo `protobuf:"bytes,1,rep,name=apply_list,json=applyList" json:"apply_list,omitempty"`
	BeAppliedList    []*FriendUserInfo `protobuf:"bytes,2,rep,name=be_applied_list,json=beAppliedList" json:"be_applied_list,omitempty"`
	FriendList       []*FriendInfo     `protobuf:"bytes,3,rep,name=friend_list,json=friendList" json:"friend_list,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CMD_S_FRIEND_LIST) Reset()                    { *m = CMD_S_FRIEND_LIST{} }
func (m *CMD_S_FRIEND_LIST) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_FRIEND_LIST) ProtoMessage()               {}
func (*CMD_S_FRIEND_LIST) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CMD_S_FRIEND_LIST) GetApplyList() []*FriendUserInfo {
	if m != nil {
		return m.ApplyList
	}
	return nil
}

func (m *CMD_S_FRIEND_LIST) GetBeAppliedList() []*FriendUserInfo {
	if m != nil {
		return m.BeAppliedList
	}
	return nil
}

func (m *CMD_S_FRIEND_LIST) GetFriendList() []*FriendInfo {
	if m != nil {
		return m.FriendList
	}
	return nil
}

// 搜索玩家
type CMD_C_SEARCH_FRIEND struct {
	Key              []byte `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_SEARCH_FRIEND) Reset()                    { *m = CMD_C_SEARCH_FRIEND{} }
func (m *CMD_C_SEARCH_FRIEND) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_SEARCH_FRIEND) ProtoMessage()               {}
func (*CMD_C_SEARCH_FRIEND) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CMD_C_SEARCH_FRIEND) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

// 搜索玩家结果
type CMD_S_SEARCH_FRIEND struct {
	UserList         []*FriendUserInfo `protobuf:"bytes,1,rep,name=user_list,json=userList" json:"user_list,omitempty"`
	Result           *ReplyResult      `protobuf:"varint,2,opt,name=result,enum=CMD_GLOBAL.ReplyResult" json:"result,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CMD_S_SEARCH_FRIEND) Reset()                    { *m = CMD_S_SEARCH_FRIEND{} }
func (m *CMD_S_SEARCH_FRIEND) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SEARCH_FRIEND) ProtoMessage()               {}
func (*CMD_S_SEARCH_FRIEND) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CMD_S_SEARCH_FRIEND) GetUserList() []*FriendUserInfo {
	if m != nil {
		return m.UserList
	}
	return nil
}

func (m *CMD_S_SEARCH_FRIEND) GetResult() ReplyResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ReplyResult_Successful
}

// 申请好友
type ApplyFiend struct {
	ApplyId          *uint32   `protobuf:"varint,1,opt,name=apply_id,json=applyId" json:"apply_id,omitempty"`
	BeAppliedId      *uint32   `protobuf:"varint,2,opt,name=be_applied_id,json=beAppliedId" json:"be_applied_id,omitempty"`
	Opt              *ApplyOpt `protobuf:"varint,3,opt,name=opt,enum=CMD_GLOBAL.ApplyOpt" json:"opt,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ApplyFiend) Reset()                    { *m = ApplyFiend{} }
func (m *ApplyFiend) String() string            { return proto.CompactTextString(m) }
func (*ApplyFiend) ProtoMessage()               {}
func (*ApplyFiend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ApplyFiend) GetApplyId() uint32 {
	if m != nil && m.ApplyId != nil {
		return *m.ApplyId
	}
	return 0
}

func (m *ApplyFiend) GetBeAppliedId() uint32 {
	if m != nil && m.BeAppliedId != nil {
		return *m.BeAppliedId
	}
	return 0
}

func (m *ApplyFiend) GetOpt() ApplyOpt {
	if m != nil && m.Opt != nil {
		return *m.Opt
	}
	return ApplyOpt_Apply
}

// 申请好友
type CMD_C_APPLY_FRIEND struct {
	Apply            *ApplyFiend `protobuf:"bytes,1,opt,name=apply" json:"apply,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMD_C_APPLY_FRIEND) Reset()                    { *m = CMD_C_APPLY_FRIEND{} }
func (m *CMD_C_APPLY_FRIEND) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_APPLY_FRIEND) ProtoMessage()               {}
func (*CMD_C_APPLY_FRIEND) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CMD_C_APPLY_FRIEND) GetApply() *ApplyFiend {
	if m != nil {
		return m.Apply
	}
	return nil
}

// 申请好友结果
type CMD_S_APPLY_FRIEND_RESULT struct {
	Apply            *ApplyFiend     `protobuf:"bytes,1,opt,name=apply" json:"apply,omitempty"`
	Result           *ReplyResult    `protobuf:"varint,2,opt,name=result,enum=CMD_GLOBAL.ReplyResult" json:"result,omitempty"`
	ApplyInfo        *FriendUserInfo `protobuf:"bytes,3,opt,name=apply_info,json=applyInfo" json:"apply_info,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CMD_S_APPLY_FRIEND_RESULT) Reset()                    { *m = CMD_S_APPLY_FRIEND_RESULT{} }
func (m *CMD_S_APPLY_FRIEND_RESULT) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_APPLY_FRIEND_RESULT) ProtoMessage()               {}
func (*CMD_S_APPLY_FRIEND_RESULT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *CMD_S_APPLY_FRIEND_RESULT) GetApply() *ApplyFiend {
	if m != nil {
		return m.Apply
	}
	return nil
}

func (m *CMD_S_APPLY_FRIEND_RESULT) GetResult() ReplyResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ReplyResult_Successful
}

func (m *CMD_S_APPLY_FRIEND_RESULT) GetApplyInfo() *FriendUserInfo {
	if m != nil {
		return m.ApplyInfo
	}
	return nil
}

// 删除好友
type CMD_C_DELETE_FRIEND struct {
	ReqUserId        *uint32 `protobuf:"varint,1,opt,name=req_user_id,json=reqUserId" json:"req_user_id,omitempty"`
	FriendUserId     *uint32 `protobuf:"varint,2,opt,name=friend_user_id,json=friendUserId" json:"friend_user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_DELETE_FRIEND) Reset()                    { *m = CMD_C_DELETE_FRIEND{} }
func (m *CMD_C_DELETE_FRIEND) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_DELETE_FRIEND) ProtoMessage()               {}
func (*CMD_C_DELETE_FRIEND) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CMD_C_DELETE_FRIEND) GetReqUserId() uint32 {
	if m != nil && m.ReqUserId != nil {
		return *m.ReqUserId
	}
	return 0
}

func (m *CMD_C_DELETE_FRIEND) GetFriendUserId() uint32 {
	if m != nil && m.FriendUserId != nil {
		return *m.FriendUserId
	}
	return 0
}

// 删除好友
type CMD_S_DELETE_FRIEND struct {
	ReqUserId        *uint32      `protobuf:"varint,1,opt,name=req_user_id,json=reqUserId" json:"req_user_id,omitempty"`
	FriendUserId     *uint32      `protobuf:"varint,2,opt,name=friend_user_id,json=friendUserId" json:"friend_user_id,omitempty"`
	Result           *ReplyResult `protobuf:"varint,3,opt,name=result,enum=CMD_GLOBAL.ReplyResult" json:"result,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CMD_S_DELETE_FRIEND) Reset()                    { *m = CMD_S_DELETE_FRIEND{} }
func (m *CMD_S_DELETE_FRIEND) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_DELETE_FRIEND) ProtoMessage()               {}
func (*CMD_S_DELETE_FRIEND) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CMD_S_DELETE_FRIEND) GetReqUserId() uint32 {
	if m != nil && m.ReqUserId != nil {
		return *m.ReqUserId
	}
	return 0
}

func (m *CMD_S_DELETE_FRIEND) GetFriendUserId() uint32 {
	if m != nil && m.FriendUserId != nil {
		return *m.FriendUserId
	}
	return 0
}

func (m *CMD_S_DELETE_FRIEND) GetResult() ReplyResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ReplyResult_Successful
}

// 获取聊天信息
type CMD_C_GET_CHAT_MESSAGE struct {
	FriendUserId     *uint32 `protobuf:"varint,1,opt,name=friend_user_id,json=friendUserId" json:"friend_user_id,omitempty"`
	MsgId            *uint32 `protobuf:"varint,2,opt,name=msg_id,json=msgId" json:"msg_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_GET_CHAT_MESSAGE) Reset()                    { *m = CMD_C_GET_CHAT_MESSAGE{} }
func (m *CMD_C_GET_CHAT_MESSAGE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_GET_CHAT_MESSAGE) ProtoMessage()               {}
func (*CMD_C_GET_CHAT_MESSAGE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CMD_C_GET_CHAT_MESSAGE) GetFriendUserId() uint32 {
	if m != nil && m.FriendUserId != nil {
		return *m.FriendUserId
	}
	return 0
}

func (m *CMD_C_GET_CHAT_MESSAGE) GetMsgId() uint32 {
	if m != nil && m.MsgId != nil {
		return *m.MsgId
	}
	return 0
}

// 聊天内容包
type ChatPacket struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Msg              []byte  `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Emotion          *uint32 `protobuf:"varint,3,opt,name=emotion" json:"emotion,omitempty"`
	TimeStamp        *int64  `protobuf:"varint,4,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChatPacket) Reset()                    { *m = ChatPacket{} }
func (m *ChatPacket) String() string            { return proto.CompactTextString(m) }
func (*ChatPacket) ProtoMessage()               {}
func (*ChatPacket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ChatPacket) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ChatPacket) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ChatPacket) GetEmotion() uint32 {
	if m != nil && m.Emotion != nil {
		return *m.Emotion
	}
	return 0
}

func (m *ChatPacket) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

// 获取聊天信息
type CMD_S_GET_CHAT_MESSAGE struct {
	FriendUserId     *uint32       `protobuf:"varint,1,opt,name=friend_user_id,json=friendUserId" json:"friend_user_id,omitempty"`
	MsgList          []*ChatPacket `protobuf:"bytes,2,rep,name=msg_list,json=msgList" json:"msg_list,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *CMD_S_GET_CHAT_MESSAGE) Reset()                    { *m = CMD_S_GET_CHAT_MESSAGE{} }
func (m *CMD_S_GET_CHAT_MESSAGE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GET_CHAT_MESSAGE) ProtoMessage()               {}
func (*CMD_S_GET_CHAT_MESSAGE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *CMD_S_GET_CHAT_MESSAGE) GetFriendUserId() uint32 {
	if m != nil && m.FriendUserId != nil {
		return *m.FriendUserId
	}
	return 0
}

func (m *CMD_S_GET_CHAT_MESSAGE) GetMsgList() []*ChatPacket {
	if m != nil {
		return m.MsgList
	}
	return nil
}

// 聊天
type CMD_C_CHAT_MESSAGE struct {
	SpeakerUserId    *uint32 `protobuf:"varint,1,opt,name=speaker_user_id,json=speakerUserId" json:"speaker_user_id,omitempty"`
	FriendUserId     *uint32 `protobuf:"varint,2,opt,name=friend_user_id,json=friendUserId" json:"friend_user_id,omitempty"`
	Msg              []byte  `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
	Emotion          *uint32 `protobuf:"varint,4,opt,name=emotion" json:"emotion,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_CHAT_MESSAGE) Reset()                    { *m = CMD_C_CHAT_MESSAGE{} }
func (m *CMD_C_CHAT_MESSAGE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_CHAT_MESSAGE) ProtoMessage()               {}
func (*CMD_C_CHAT_MESSAGE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *CMD_C_CHAT_MESSAGE) GetSpeakerUserId() uint32 {
	if m != nil && m.SpeakerUserId != nil {
		return *m.SpeakerUserId
	}
	return 0
}

func (m *CMD_C_CHAT_MESSAGE) GetFriendUserId() uint32 {
	if m != nil && m.FriendUserId != nil {
		return *m.FriendUserId
	}
	return 0
}

func (m *CMD_C_CHAT_MESSAGE) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *CMD_C_CHAT_MESSAGE) GetEmotion() uint32 {
	if m != nil && m.Emotion != nil {
		return *m.Emotion
	}
	return 0
}

// 聊天
type CMD_S_CHAT_MESSAGE struct {
	SpeakerUserId    *uint32      `protobuf:"varint,1,opt,name=speaker_user_id,json=speakerUserId" json:"speaker_user_id,omitempty"`
	FriendUserId     *uint32      `protobuf:"varint,2,opt,name=friend_user_id,json=friendUserId" json:"friend_user_id,omitempty"`
	Msg              *ChatPacket  `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
	Result           *ReplyResult `protobuf:"varint,4,opt,name=result,enum=CMD_GLOBAL.ReplyResult" json:"result,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CMD_S_CHAT_MESSAGE) Reset()                    { *m = CMD_S_CHAT_MESSAGE{} }
func (m *CMD_S_CHAT_MESSAGE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CHAT_MESSAGE) ProtoMessage()               {}
func (*CMD_S_CHAT_MESSAGE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *CMD_S_CHAT_MESSAGE) GetSpeakerUserId() uint32 {
	if m != nil && m.SpeakerUserId != nil {
		return *m.SpeakerUserId
	}
	return 0
}

func (m *CMD_S_CHAT_MESSAGE) GetFriendUserId() uint32 {
	if m != nil && m.FriendUserId != nil {
		return *m.FriendUserId
	}
	return 0
}

func (m *CMD_S_CHAT_MESSAGE) GetMsg() *ChatPacket {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *CMD_S_CHAT_MESSAGE) GetResult() ReplyResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ReplyResult_Successful
}

// 有新的聊天信息
type CMD_S_NOTIFY_NEW_CHAT_MESSAGE struct {
	FriendUserId     *uint32 `protobuf:"varint,1,opt,name=friend_user_id,json=friendUserId" json:"friend_user_id,omitempty"`
	IsPull           *bool   `protobuf:"varint,2,opt,name=is_pull,json=isPull" json:"is_pull,omitempty"`
	UnreadCount      *uint32 `protobuf:"varint,3,opt,name=unread_count,json=unreadCount" json:"unread_count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_NOTIFY_NEW_CHAT_MESSAGE) Reset()                    { *m = CMD_S_NOTIFY_NEW_CHAT_MESSAGE{} }
func (m *CMD_S_NOTIFY_NEW_CHAT_MESSAGE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_NOTIFY_NEW_CHAT_MESSAGE) ProtoMessage()               {}
func (*CMD_S_NOTIFY_NEW_CHAT_MESSAGE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *CMD_S_NOTIFY_NEW_CHAT_MESSAGE) GetFriendUserId() uint32 {
	if m != nil && m.FriendUserId != nil {
		return *m.FriendUserId
	}
	return 0
}

func (m *CMD_S_NOTIFY_NEW_CHAT_MESSAGE) GetIsPull() bool {
	if m != nil && m.IsPull != nil {
		return *m.IsPull
	}
	return false
}

func (m *CMD_S_NOTIFY_NEW_CHAT_MESSAGE) GetUnreadCount() uint32 {
	if m != nil && m.UnreadCount != nil {
		return *m.UnreadCount
	}
	return 0
}

// 梦幻展览活动状态
type CMD_S_FANTASY_EXHIBITION_STATE struct {
	Action           *FantasyExhibitionState `protobuf:"varint,1,opt,name=action,enum=CMD_GLOBAL.FantasyExhibitionState" json:"action,omitempty"`
	CurNum           *uint32                 `protobuf:"varint,2,opt,name=curNum" json:"curNum,omitempty"`
	MaxNum           *uint32                 `protobuf:"varint,3,opt,name=maxNum" json:"maxNum,omitempty"`
	ActionId         *uint64                 `protobuf:"varint,4,opt,name=actionId" json:"actionId,omitempty"`
	DropNum          *uint32                 `protobuf:"varint,5,opt,name=dropNum" json:"dropNum,omitempty"`
	RewardType       *uint32                 `protobuf:"varint,6,opt,name=rewardType" json:"rewardType,omitempty"`
	RewardValue      *uint64                 `protobuf:"varint,7,opt,name=rewardValue" json:"rewardValue,omitempty"`
	RankuserId       *uint32                 `protobuf:"varint,8,opt,name=rankuserId" json:"rankuserId,omitempty"`
	Contribute       *uint32                 `protobuf:"varint,9,opt,name=contribute" json:"contribute,omitempty"`
	Number           []uint32                `protobuf:"varint,10,rep,name=number" json:"number,omitempty"`
	Nick             []byte                  `protobuf:"bytes,11,opt,name=nick" json:"nick,omitempty"`
	FaceId           *uint32                 `protobuf:"varint,12,opt,name=faceId" json:"faceId,omitempty"`
	VipLev           *uint32                 `protobuf:"varint,13,opt,name=vipLev" json:"vipLev,omitempty"`
	RewardRankType   *uint32                 `protobuf:"varint,14,opt,name=rewardRankType" json:"rewardRankType,omitempty"`
	RewardRankValue  *uint64                 `protobuf:"varint,15,opt,name=rewardRankValue" json:"rewardRankValue,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) Reset()                    { *m = CMD_S_FANTASY_EXHIBITION_STATE{} }
func (m *CMD_S_FANTASY_EXHIBITION_STATE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_FANTASY_EXHIBITION_STATE) ProtoMessage()               {}
func (*CMD_S_FANTASY_EXHIBITION_STATE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetAction() FantasyExhibitionState {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return FantasyExhibitionState_Wait
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetCurNum() uint32 {
	if m != nil && m.CurNum != nil {
		return *m.CurNum
	}
	return 0
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetMaxNum() uint32 {
	if m != nil && m.MaxNum != nil {
		return *m.MaxNum
	}
	return 0
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetActionId() uint64 {
	if m != nil && m.ActionId != nil {
		return *m.ActionId
	}
	return 0
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetDropNum() uint32 {
	if m != nil && m.DropNum != nil {
		return *m.DropNum
	}
	return 0
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetRewardType() uint32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetRewardValue() uint64 {
	if m != nil && m.RewardValue != nil {
		return *m.RewardValue
	}
	return 0
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetRankuserId() uint32 {
	if m != nil && m.RankuserId != nil {
		return *m.RankuserId
	}
	return 0
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetContribute() uint32 {
	if m != nil && m.Contribute != nil {
		return *m.Contribute
	}
	return 0
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetNumber() []uint32 {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetNick() []byte {
	if m != nil {
		return m.Nick
	}
	return nil
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetFaceId() uint32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetVipLev() uint32 {
	if m != nil && m.VipLev != nil {
		return *m.VipLev
	}
	return 0
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetRewardRankType() uint32 {
	if m != nil && m.RewardRankType != nil {
		return *m.RewardRankType
	}
	return 0
}

func (m *CMD_S_FANTASY_EXHIBITION_STATE) GetRewardRankValue() uint64 {
	if m != nil && m.RewardRankValue != nil {
		return *m.RewardRankValue
	}
	return 0
}

// 梦幻展览展品掉落
type CMD_S_DROP_FANTASY_LOTTERY struct {
	UserId           *uint32  `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	IndexId          *uint32  `protobuf:"varint,2,opt,name=indexId" json:"indexId,omitempty"`
	Number           []uint32 `protobuf:"varint,3,rep,name=number" json:"number,omitempty"`
	Reward           *uint32  `protobuf:"varint,4,opt,name=reward" json:"reward,omitempty"`
	Lifttimes        *uint32  `protobuf:"varint,5,opt,name=lifttimes" json:"lifttimes,omitempty"`
	Costcontribute   *uint64  `protobuf:"varint,6,opt,name=costcontribute" json:"costcontribute,omitempty"`
	Attendnum        *uint32  `protobuf:"varint,7,opt,name=attendnum" json:"attendnum,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_S_DROP_FANTASY_LOTTERY) Reset()                    { *m = CMD_S_DROP_FANTASY_LOTTERY{} }
func (m *CMD_S_DROP_FANTASY_LOTTERY) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_DROP_FANTASY_LOTTERY) ProtoMessage()               {}
func (*CMD_S_DROP_FANTASY_LOTTERY) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *CMD_S_DROP_FANTASY_LOTTERY) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_DROP_FANTASY_LOTTERY) GetIndexId() uint32 {
	if m != nil && m.IndexId != nil {
		return *m.IndexId
	}
	return 0
}

func (m *CMD_S_DROP_FANTASY_LOTTERY) GetNumber() []uint32 {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *CMD_S_DROP_FANTASY_LOTTERY) GetReward() uint32 {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return 0
}

func (m *CMD_S_DROP_FANTASY_LOTTERY) GetLifttimes() uint32 {
	if m != nil && m.Lifttimes != nil {
		return *m.Lifttimes
	}
	return 0
}

func (m *CMD_S_DROP_FANTASY_LOTTERY) GetCostcontribute() uint64 {
	if m != nil && m.Costcontribute != nil {
		return *m.Costcontribute
	}
	return 0
}

func (m *CMD_S_DROP_FANTASY_LOTTERY) GetAttendnum() uint32 {
	if m != nil && m.Attendnum != nil {
		return *m.Attendnum
	}
	return 0
}

// 用户排名
type FantasyExhibitionUserRank struct {
	Rank             *uint32  `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	UserId           *uint32  `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	Nick             []byte   `protobuf:"bytes,3,opt,name=nick" json:"nick,omitempty"`
	FaceId           *uint32  `protobuf:"varint,4,opt,name=faceId" json:"faceId,omitempty"`
	VipLev           *uint32  `protobuf:"varint,5,opt,name=vipLev" json:"vipLev,omitempty"`
	Number           []uint32 `protobuf:"varint,6,rep,name=number" json:"number,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FantasyExhibitionUserRank) Reset()                    { *m = FantasyExhibitionUserRank{} }
func (m *FantasyExhibitionUserRank) String() string            { return proto.CompactTextString(m) }
func (*FantasyExhibitionUserRank) ProtoMessage()               {}
func (*FantasyExhibitionUserRank) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *FantasyExhibitionUserRank) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *FantasyExhibitionUserRank) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *FantasyExhibitionUserRank) GetNick() []byte {
	if m != nil {
		return m.Nick
	}
	return nil
}

func (m *FantasyExhibitionUserRank) GetFaceId() uint32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

func (m *FantasyExhibitionUserRank) GetVipLev() uint32 {
	if m != nil && m.VipLev != nil {
		return *m.VipLev
	}
	return 0
}

func (m *FantasyExhibitionUserRank) GetNumber() []uint32 {
	if m != nil {
		return m.Number
	}
	return nil
}

// 获取梦幻展览排名
type CMD_C_GET_FANTASY_EXHIBITION_RANK struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_GET_FANTASY_EXHIBITION_RANK) Reset()         { *m = CMD_C_GET_FANTASY_EXHIBITION_RANK{} }
func (m *CMD_C_GET_FANTASY_EXHIBITION_RANK) String() string { return proto.CompactTextString(m) }
func (*CMD_C_GET_FANTASY_EXHIBITION_RANK) ProtoMessage()    {}
func (*CMD_C_GET_FANTASY_EXHIBITION_RANK) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{39}
}

// 获取梦幻展览排名
type CMD_S_GET_FANTASY_EXHIBITION_RANK struct {
	Rank             []*FantasyExhibitionUserRank `protobuf:"bytes,1,rep,name=rank" json:"rank,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *CMD_S_GET_FANTASY_EXHIBITION_RANK) Reset()         { *m = CMD_S_GET_FANTASY_EXHIBITION_RANK{} }
func (m *CMD_S_GET_FANTASY_EXHIBITION_RANK) String() string { return proto.CompactTextString(m) }
func (*CMD_S_GET_FANTASY_EXHIBITION_RANK) ProtoMessage()    {}
func (*CMD_S_GET_FANTASY_EXHIBITION_RANK) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{40}
}

func (m *CMD_S_GET_FANTASY_EXHIBITION_RANK) GetRank() []*FantasyExhibitionUserRank {
	if m != nil {
		return m.Rank
	}
	return nil
}

// 获取梦幻展览展品信息
type CMD_C_GET_FANTASY_EXHIBITION_LOTTERY struct {
	CurLotteryNum    *uint32 `protobuf:"varint,1,opt,name=cur_lottery_num,json=curLotteryNum" json:"cur_lottery_num,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_GET_FANTASY_EXHIBITION_LOTTERY) Reset()         { *m = CMD_C_GET_FANTASY_EXHIBITION_LOTTERY{} }
func (m *CMD_C_GET_FANTASY_EXHIBITION_LOTTERY) String() string { return proto.CompactTextString(m) }
func (*CMD_C_GET_FANTASY_EXHIBITION_LOTTERY) ProtoMessage()    {}
func (*CMD_C_GET_FANTASY_EXHIBITION_LOTTERY) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41}
}

func (m *CMD_C_GET_FANTASY_EXHIBITION_LOTTERY) GetCurLotteryNum() uint32 {
	if m != nil && m.CurLotteryNum != nil {
		return *m.CurLotteryNum
	}
	return 0
}

// 获取梦幻展览展品
type CMD_S_GET_FANTASY_EXHIBITION_LOTTERY struct {
	Info             []*CMD_S_DROP_FANTASY_LOTTERY `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *CMD_S_GET_FANTASY_EXHIBITION_LOTTERY) Reset()         { *m = CMD_S_GET_FANTASY_EXHIBITION_LOTTERY{} }
func (m *CMD_S_GET_FANTASY_EXHIBITION_LOTTERY) String() string { return proto.CompactTextString(m) }
func (*CMD_S_GET_FANTASY_EXHIBITION_LOTTERY) ProtoMessage()    {}
func (*CMD_S_GET_FANTASY_EXHIBITION_LOTTERY) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{42}
}

func (m *CMD_S_GET_FANTASY_EXHIBITION_LOTTERY) GetInfo() []*CMD_S_DROP_FANTASY_LOTTERY {
	if m != nil {
		return m.Info
	}
	return nil
}

// 房间任务鱼
type PlayerRoomTaskFish struct {
	FishId           *uint32 `protobuf:"varint,1,opt,name=fish_id,json=fishId" json:"fish_id,omitempty"`
	FishNum          *uint32 `protobuf:"varint,2,opt,name=fish_num,json=fishNum" json:"fish_num,omitempty"`
	KilledNum        *uint32 `protobuf:"varint,3,opt,name=killed_num,json=killedNum" json:"killed_num,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayerRoomTaskFish) Reset()                    { *m = PlayerRoomTaskFish{} }
func (m *PlayerRoomTaskFish) String() string            { return proto.CompactTextString(m) }
func (*PlayerRoomTaskFish) ProtoMessage()               {}
func (*PlayerRoomTaskFish) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *PlayerRoomTaskFish) GetFishId() uint32 {
	if m != nil && m.FishId != nil {
		return *m.FishId
	}
	return 0
}

func (m *PlayerRoomTaskFish) GetFishNum() uint32 {
	if m != nil && m.FishNum != nil {
		return *m.FishNum
	}
	return 0
}

func (m *PlayerRoomTaskFish) GetKilledNum() uint32 {
	if m != nil && m.KilledNum != nil {
		return *m.KilledNum
	}
	return 0
}

// 房间任务进度
type CMD_S_ROOM_TASK_PROCESS struct {
	CountDwon        *uint32               `protobuf:"varint,1,opt,name=count_dwon,json=countDwon" json:"count_dwon,omitempty"`
	Fish             []*PlayerRoomTaskFish `protobuf:"bytes,2,rep,name=fish" json:"fish,omitempty"`
	IsStart          *bool                 `protobuf:"varint,3,opt,name=is_start,json=isStart" json:"is_start,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CMD_S_ROOM_TASK_PROCESS) Reset()                    { *m = CMD_S_ROOM_TASK_PROCESS{} }
func (m *CMD_S_ROOM_TASK_PROCESS) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_ROOM_TASK_PROCESS) ProtoMessage()               {}
func (*CMD_S_ROOM_TASK_PROCESS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *CMD_S_ROOM_TASK_PROCESS) GetCountDwon() uint32 {
	if m != nil && m.CountDwon != nil {
		return *m.CountDwon
	}
	return 0
}

func (m *CMD_S_ROOM_TASK_PROCESS) GetFish() []*PlayerRoomTaskFish {
	if m != nil {
		return m.Fish
	}
	return nil
}

func (m *CMD_S_ROOM_TASK_PROCESS) GetIsStart() bool {
	if m != nil && m.IsStart != nil {
		return *m.IsStart
	}
	return false
}

// 更新房间任务排名
type CMD_S_UPDATE_ROOM_TASK_RANK struct {
	SeatId           []uint32 `protobuf:"varint,1,rep,name=seat_id,json=seatId" json:"seat_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_S_UPDATE_ROOM_TASK_RANK) Reset()                    { *m = CMD_S_UPDATE_ROOM_TASK_RANK{} }
func (m *CMD_S_UPDATE_ROOM_TASK_RANK) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UPDATE_ROOM_TASK_RANK) ProtoMessage()               {}
func (*CMD_S_UPDATE_ROOM_TASK_RANK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *CMD_S_UPDATE_ROOM_TASK_RANK) GetSeatId() []uint32 {
	if m != nil {
		return m.SeatId
	}
	return nil
}

// 关闭任务
type CMD_S_CLOSE_ROOM_TASK struct {
	WinnerId         *uint32 `protobuf:"varint,1,opt,name=winner_id,json=winnerId" json:"winner_id,omitempty"`
	SeatId           *uint32 `protobuf:"varint,2,opt,name=seat_id,json=seatId" json:"seat_id,omitempty"`
	Nick             []byte  `protobuf:"bytes,3,opt,name=nick" json:"nick,omitempty"`
	Reward           *uint32 `protobuf:"varint,4,opt,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_CLOSE_ROOM_TASK) Reset()                    { *m = CMD_S_CLOSE_ROOM_TASK{} }
func (m *CMD_S_CLOSE_ROOM_TASK) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CLOSE_ROOM_TASK) ProtoMessage()               {}
func (*CMD_S_CLOSE_ROOM_TASK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *CMD_S_CLOSE_ROOM_TASK) GetWinnerId() uint32 {
	if m != nil && m.WinnerId != nil {
		return *m.WinnerId
	}
	return 0
}

func (m *CMD_S_CLOSE_ROOM_TASK) GetSeatId() uint32 {
	if m != nil && m.SeatId != nil {
		return *m.SeatId
	}
	return 0
}

func (m *CMD_S_CLOSE_ROOM_TASK) GetNick() []byte {
	if m != nil {
		return m.Nick
	}
	return nil
}

func (m *CMD_S_CLOSE_ROOM_TASK) GetReward() uint32 {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return 0
}

func init() {
	proto.RegisterType((*CMD_S_WORLD_BOSS_COUNTDOWN)(nil), "CMD_GLOBAL.CMD_S_WORLD_BOSS_COUNTDOWN")
	proto.RegisterType((*CMD_S_WORLD_BOSS_WARNING)(nil), "CMD_GLOBAL.CMD_S_WORLD_BOSS_WARNING")
	proto.RegisterType((*CMD_S_WORLD_BOSS_APPEAR)(nil), "CMD_GLOBAL.CMD_S_WORLD_BOSS_APPEAR")
	proto.RegisterType((*CMD_S_WORLD_BOSS_KILLING)(nil), "CMD_GLOBAL.CMD_S_WORLD_BOSS_KILLING")
	proto.RegisterType((*CMD_S_SYNC_WORLD_BOSS_BLOOD)(nil), "CMD_GLOBAL.CMD_S_SYNC_WORLD_BOSS_BLOOD")
	proto.RegisterType((*WorldBossUserRank)(nil), "CMD_GLOBAL.WorldBossUserRank")
	proto.RegisterType((*CMD_S_WORLD_BOSS_ACTIVITY_CLOSE)(nil), "CMD_GLOBAL.CMD_S_WORLD_BOSS_ACTIVITY_CLOSE")
	proto.RegisterType((*LuckyGuyInfo)(nil), "CMD_GLOBAL.LuckyGuyInfo")
	proto.RegisterType((*CMD_C_GET_CLASSIC_PRIZE_POOL)(nil), "CMD_GLOBAL.CMD_C_GET_CLASSIC_PRIZE_POOL")
	proto.RegisterType((*CMD_S_GET_CLASSIC_PRIZE_POOL)(nil), "CMD_GLOBAL.CMD_S_GET_CLASSIC_PRIZE_POOL")
	proto.RegisterType((*CMD_C_CLASSIC_PRIZE_POOL_DRAW_TURN)(nil), "CMD_GLOBAL.CMD_C_CLASSIC_PRIZE_POOL_DRAW_TURN")
	proto.RegisterType((*CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN)(nil), "CMD_GLOBAL.CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN")
	proto.RegisterType((*CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_TurnplateIndex)(nil), "CMD_GLOBAL.CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN.TurnplateIndex")
	proto.RegisterType((*CMD_C_CLASSIC_PRIZE_POOL_TURN_RANK)(nil), "CMD_GLOBAL.CMD_C_CLASSIC_PRIZE_POOL_TURN_RANK")
	proto.RegisterType((*ClassicsPrizePoolRanking)(nil), "CMD_GLOBAL.ClassicsPrizePoolRanking")
	proto.RegisterType((*CMD_S_CLASSIC_PRIZE_POOL_TURN_RANK)(nil), "CMD_GLOBAL.CMD_S_CLASSIC_PRIZE_POOL_TURN_RANK")
	proto.RegisterType((*CMD_C_HEART_BEAT_CHAT)(nil), "CMD_GLOBAL.CMD_C_HEART_BEAT_CHAT")
	proto.RegisterType((*CMD_S_HEART_BEAT_CHAT)(nil), "CMD_GLOBAL.CMD_S_HEART_BEAT_CHAT")
	proto.RegisterType((*CMD_C_LOGIN)(nil), "CMD_GLOBAL.CMD_C_LOGIN")
	proto.RegisterType((*CMD_S_LOGIN)(nil), "CMD_GLOBAL.CMD_S_LOGIN")
	proto.RegisterType((*FriendUserInfo)(nil), "CMD_GLOBAL.FriendUserInfo")
	proto.RegisterType((*FriendInfo)(nil), "CMD_GLOBAL.FriendInfo")
	proto.RegisterType((*CMD_C_FRIEND_LIST)(nil), "CMD_GLOBAL.CMD_C_FRIEND_LIST")
	proto.RegisterType((*CMD_S_FRIEND_LIST)(nil), "CMD_GLOBAL.CMD_S_FRIEND_LIST")
	proto.RegisterType((*CMD_C_SEARCH_FRIEND)(nil), "CMD_GLOBAL.CMD_C_SEARCH_FRIEND")
	proto.RegisterType((*CMD_S_SEARCH_FRIEND)(nil), "CMD_GLOBAL.CMD_S_SEARCH_FRIEND")
	proto.RegisterType((*ApplyFiend)(nil), "CMD_GLOBAL.ApplyFiend")
	proto.RegisterType((*CMD_C_APPLY_FRIEND)(nil), "CMD_GLOBAL.CMD_C_APPLY_FRIEND")
	proto.RegisterType((*CMD_S_APPLY_FRIEND_RESULT)(nil), "CMD_GLOBAL.CMD_S_APPLY_FRIEND_RESULT")
	proto.RegisterType((*CMD_C_DELETE_FRIEND)(nil), "CMD_GLOBAL.CMD_C_DELETE_FRIEND")
	proto.RegisterType((*CMD_S_DELETE_FRIEND)(nil), "CMD_GLOBAL.CMD_S_DELETE_FRIEND")
	proto.RegisterType((*CMD_C_GET_CHAT_MESSAGE)(nil), "CMD_GLOBAL.CMD_C_GET_CHAT_MESSAGE")
	proto.RegisterType((*ChatPacket)(nil), "CMD_GLOBAL.ChatPacket")
	proto.RegisterType((*CMD_S_GET_CHAT_MESSAGE)(nil), "CMD_GLOBAL.CMD_S_GET_CHAT_MESSAGE")
	proto.RegisterType((*CMD_C_CHAT_MESSAGE)(nil), "CMD_GLOBAL.CMD_C_CHAT_MESSAGE")
	proto.RegisterType((*CMD_S_CHAT_MESSAGE)(nil), "CMD_GLOBAL.CMD_S_CHAT_MESSAGE")
	proto.RegisterType((*CMD_S_NOTIFY_NEW_CHAT_MESSAGE)(nil), "CMD_GLOBAL.CMD_S_NOTIFY_NEW_CHAT_MESSAGE")
	proto.RegisterType((*CMD_S_FANTASY_EXHIBITION_STATE)(nil), "CMD_GLOBAL.CMD_S_FANTASY_EXHIBITION_STATE")
	proto.RegisterType((*CMD_S_DROP_FANTASY_LOTTERY)(nil), "CMD_GLOBAL.CMD_S_DROP_FANTASY_LOTTERY")
	proto.RegisterType((*FantasyExhibitionUserRank)(nil), "CMD_GLOBAL.FantasyExhibitionUserRank")
	proto.RegisterType((*CMD_C_GET_FANTASY_EXHIBITION_RANK)(nil), "CMD_GLOBAL.CMD_C_GET_FANTASY_EXHIBITION_RANK")
	proto.RegisterType((*CMD_S_GET_FANTASY_EXHIBITION_RANK)(nil), "CMD_GLOBAL.CMD_S_GET_FANTASY_EXHIBITION_RANK")
	proto.RegisterType((*CMD_C_GET_FANTASY_EXHIBITION_LOTTERY)(nil), "CMD_GLOBAL.CMD_C_GET_FANTASY_EXHIBITION_LOTTERY")
	proto.RegisterType((*CMD_S_GET_FANTASY_EXHIBITION_LOTTERY)(nil), "CMD_GLOBAL.CMD_S_GET_FANTASY_EXHIBITION_LOTTERY")
	proto.RegisterType((*PlayerRoomTaskFish)(nil), "CMD_GLOBAL.PlayerRoomTaskFish")
	proto.RegisterType((*CMD_S_ROOM_TASK_PROCESS)(nil), "CMD_GLOBAL.CMD_S_ROOM_TASK_PROCESS")
	proto.RegisterType((*CMD_S_UPDATE_ROOM_TASK_RANK)(nil), "CMD_GLOBAL.CMD_S_UPDATE_ROOM_TASK_RANK")
	proto.RegisterType((*CMD_S_CLOSE_ROOM_TASK)(nil), "CMD_GLOBAL.CMD_S_CLOSE_ROOM_TASK")
	proto.RegisterEnum("CMD_GLOBAL.ReplyResult", ReplyResult_name, ReplyResult_value)
	proto.RegisterEnum("CMD_GLOBAL.WorldBossAction", WorldBossAction_name, WorldBossAction_value)
	proto.RegisterEnum("CMD_GLOBAL.PoolType", PoolType_name, PoolType_value)
	proto.RegisterEnum("CMD_GLOBAL.ApplyOpt", ApplyOpt_name, ApplyOpt_value)
	proto.RegisterEnum("CMD_GLOBAL.FantasyExhibitionState", FantasyExhibitionState_name, FantasyExhibitionState_value)
	proto.RegisterEnum("CMD_GLOBAL.CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType", CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType_name, CMD_C_GET_CLASSIC_PRIZE_POOL_GetPrizePoolType_value)
	proto.RegisterEnum("CMD_GLOBAL.CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result", CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result_name, CMD_S_CLASSIC_PRIZE_POOL_DRAW_TURN_Result_value)
}

func init() { proto.RegisterFile("CMD_GlobalServer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x39, 0xcd, 0x6f, 0x23, 0x59,
	0xf1, 0xd3, 0x6e, 0x27, 0xb6, 0xcb, 0xf9, 0xe8, 0x79, 0xbb, 0x9b, 0x78, 0x66, 0x76, 0x66, 0xb3,
	0xfd, 0xcb, 0x6f, 0x88, 0xa2, 0xd5, 0xb0, 0x1b, 0x16, 0x96, 0x5d, 0x01, 0x92, 0xe3, 0x74, 0x12,
	0x6b, 0x3c, 0x6e, 0xf3, 0xba, 0xb3, 0x21, 0xac, 0x44, 0xab, 0x6d, 0xbf, 0x38, 0x8d, 0xdb, 0xdd,
	0xde, 0xfe, 0xc8, 0xc4, 0x5c, 0x56, 0x1c, 0x10, 0x07, 0x10, 0x27, 0x38, 0x71, 0x44, 0xfc, 0x09,
	0x9c, 0x10, 0x77, 0x24, 0xee, 0xfc, 0x01, 0xdc, 0xb9, 0x20, 0x71, 0x47, 0xef, 0xa3, 0xbf, 0x12,
	0xc7, 0x93, 0x19, 0xb1, 0xdc, 0x5c, 0xd5, 0x55, 0xf5, 0xea, 0xeb, 0x55, 0xd5, 0x2b, 0xc3, 0x46,
	0xeb, 0xc5, 0x81, 0x75, 0xe4, 0xfa, 0x7d, 0xdb, 0x35, 0x48, 0x70, 0x49, 0x82, 0x67, 0xd3, 0xc0,
	0x8f, 0x7c, 0x04, 0x0c, 0xdf, 0xd1, 0xf7, 0x9b, 0x1d, 0xf5, 0x8f, 0x12, 0x3c, 0xa4, 0xa0, 0x61,
	0x9d, 0xea, 0xb8, 0x73, 0x60, 0xed, 0xeb, 0x86, 0x61, 0xb5, 0xf4, 0x93, 0xae, 0x79, 0xa0, 0x9f,
	0x76, 0xd1, 0xb7, 0x60, 0xd9, 0x1e, 0x44, 0x8e, 0xef, 0x35, 0xa4, 0x2d, 0x69, 0x67, 0x6d, 0xef,
	0xd1, 0xb3, 0x8c, 0xf7, 0xd9, 0xa9, 0x1f, 0xb8, 0xc3, 0x7d, 0x3f, 0x0c, 0x9b, 0x8c, 0x04, 0x0b,
	0x52, 0xf4, 0x2e, 0xd4, 0x06, 0x7e, 0xec, 0x45, 0x43, 0xff, 0xa5, 0xd7, 0x28, 0x6d, 0x49, 0x3b,
	0xab, 0x38, 0x43, 0xd0, 0xaf, 0x91, 0x33, 0x21, 0x46, 0x64, 0x4f, 0xa6, 0x0d, 0x79, 0x4b, 0xda,
	0x29, 0xe3, 0x0c, 0x81, 0x36, 0x60, 0xb9, 0xef, 0x87, 0x61, 0x7b, 0xd8, 0x28, 0x33, 0x46, 0x01,
	0xa9, 0x23, 0x68, 0xdc, 0x50, 0xf3, 0xb4, 0x89, 0xbb, 0xed, 0xee, 0xd1, 0x9b, 0x29, 0x99, 0x1d,
	0x54, 0x2a, 0x1c, 0xf4, 0x43, 0xd8, 0xbc, 0x71, 0x50, 0xb3, 0xd7, 0xd3, 0x9a, 0x18, 0x3d, 0x84,
	0xea, 0x20, 0x0e, 0xf6, 0x5d, 0xdf, 0x1f, 0xb2, 0x93, 0xca, 0x38, 0x85, 0xe9, 0xb7, 0x89, 0x7d,
	0xc5, 0xbf, 0x95, 0xf8, 0xb7, 0x04, 0x56, 0xf7, 0xe6, 0xe8, 0xfe, 0xbc, 0xdd, 0xe9, 0x50, 0xdd,
	0x33, 0x35, 0xa4, 0x82, 0x1a, 0x27, 0xf0, 0x88, 0xf3, 0x18, 0x67, 0xdd, 0x56, 0x9e, 0x71, 0xbf,
	0xa3, 0xeb, 0x07, 0x6f, 0xac, 0xca, 0xef, 0x25, 0xb8, 0x9f, 0x7a, 0xe4, 0x24, 0x24, 0x01, 0xb6,
	0xbd, 0x31, 0x42, 0x50, 0x0e, 0x6c, 0x6f, 0x2c, 0x54, 0x60, 0xbf, 0xa9, 0x62, 0x71, 0x48, 0x82,
	0xcc, 0x3f, 0x1c, 0xa2, 0xb4, 0x9e, 0x33, 0x18, 0xb3, 0xc8, 0xad, 0x60, 0xf6, 0x9b, 0xd2, 0x06,
	0xe4, 0xa5, 0x1d, 0xa4, 0x41, 0xe3, 0x10, 0xc5, 0x9f, 0xdb, 0x03, 0xd2, 0x1e, 0x36, 0x96, 0x38,
	0x9e, 0x43, 0x14, 0x7f, 0xe9, 0x4c, 0x3b, 0xe4, 0xb2, 0xb1, 0xcc, 0xf1, 0x1c, 0x52, 0x7f, 0x5b,
	0x82, 0xf7, 0x6e, 0x3a, 0xbf, 0x65, 0xb6, 0x3f, 0x6f, 0x9b, 0x67, 0x56, 0xab, 0xa3, 0x1b, 0x1a,
	0x6a, 0x40, 0xa5, 0xff, 0xdc, 0x71, 0x5d, 0xc2, 0x0d, 0xaf, 0xe2, 0x04, 0x44, 0x1f, 0x09, 0x2b,
	0x4a, 0x5b, 0xf2, 0x4e, 0x7d, 0xef, 0xf1, 0xdc, 0x24, 0x48, 0x4c, 0xce, 0x8c, 0x14, 0xde, 0x97,
	0xf3, 0xde, 0x47, 0x8f, 0xa0, 0xe6, 0x4f, 0x89, 0x67, 0xd1, 0xbc, 0x14, 0x36, 0x55, 0x29, 0xc2,
	0x74, 0x26, 0x04, 0x6d, 0xc3, 0xda, 0x98, 0x9e, 0x18, 0x58, 0xd4, 0x25, 0x96, 0x93, 0x58, 0xb7,
	0xc2, 0xb1, 0x27, 0xdc, 0x4f, 0x3b, 0xa0, 0x08, 0xaa, 0x11, 0x89, 0xac, 0x70, 0xe0, 0x07, 0x84,
	0x59, 0x5b, 0xc6, 0x82, 0xfb, 0x88, 0x44, 0x06, 0xc5, 0xa2, 0xf7, 0xa0, 0x2e, 0x28, 0x99, 0x63,
	0x2b, 0xcc, 0xb1, 0xc0, 0x51, 0x5d, 0x67, 0x30, 0x56, 0x7f, 0x21, 0xc1, 0x4a, 0x27, 0x1e, 0x8c,
	0x67, 0x47, 0xf1, 0xac, 0xed, 0x9d, 0xfb, 0x68, 0x13, 0x2a, 0xc9, 0xd1, 0xd2, 0xdc, 0xe0, 0x94,
	0xe6, 0x06, 0x47, 0x2e, 0x04, 0x67, 0x13, 0x2a, 0x34, 0x1c, 0x54, 0x48, 0xb9, 0x10, 0x9d, 0x4d,
	0xa8, 0x5c, 0x3a, 0x53, 0xcb, 0x25, 0x97, 0x49, 0xd8, 0x44, 0x78, 0xfe, 0x2e, 0xc1, 0xbb, 0xd4,
	0xa9, 0x2d, 0xeb, 0x48, 0x33, 0xad, 0x56, 0xa7, 0x69, 0x18, 0xed, 0x96, 0xd5, 0xc3, 0xed, 0x1f,
	0x6b, 0x56, 0x4f, 0xd7, 0x3b, 0xe8, 0x05, 0x94, 0xa3, 0xd9, 0x94, 0x88, 0x6b, 0xf8, 0x69, 0x3e,
	0x02, 0x8b, 0xf8, 0x9e, 0x1d, 0x91, 0xa8, 0x17, 0x38, 0x3f, 0x23, 0x3d, 0xdf, 0x77, 0xcd, 0xd9,
	0x94, 0x60, 0x26, 0x06, 0x7d, 0x04, 0xb5, 0xa9, 0xef, 0xbb, 0x16, 0x93, 0x59, 0x62, 0x32, 0xdf,
	0xce, 0xcb, 0x4c, 0xc9, 0xab, 0x53, 0xf1, 0x4b, 0xfd, 0x18, 0x94, 0xeb, 0xc2, 0xd0, 0x2a, 0xd4,
	0x74, 0xcf, 0x9d, 0x19, 0x91, 0x3f, 0x18, 0x2b, 0xf7, 0xd0, 0x7d, 0x58, 0x6d, 0xf9, 0x5e, 0x64,
	0x3b, 0x9e, 0x76, 0x15, 0x11, 0x6f, 0xa8, 0x48, 0xea, 0x3f, 0x85, 0x61, 0xc6, 0xff, 0xc8, 0xb0,
	0xb7, 0x61, 0x29, 0xa4, 0xda, 0x88, 0xeb, 0xc9, 0x01, 0xf4, 0x6d, 0xa8, 0xb9, 0x34, 0xca, 0xd6,
	0x28, 0x9e, 0xb1, 0x58, 0xd5, 0xf7, 0x1a, 0xf9, 0x93, 0xf2, 0x29, 0x80, 0xab, 0xae, 0x80, 0x8a,
	0x5e, 0x2a, 0xdf, 0xc9, 0x4b, 0x3f, 0x05, 0x95, 0xab, 0x7d, 0x53, 0x65, 0xeb, 0x00, 0x37, 0x4f,
	0x2d, 0xf3, 0x04, 0x77, 0x69, 0x32, 0x85, 0x91, 0x1d, 0x24, 0x55, 0x81, 0xfe, 0x46, 0x1f, 0xc2,
	0xf2, 0xd4, 0xb5, 0x67, 0x24, 0x60, 0xaa, 0x2f, 0x52, 0x50, 0xd0, 0xa9, 0xff, 0x2e, 0xf1, 0xc3,
	0x8c, 0xc5, 0x87, 0xb1, 0x2c, 0x0d, 0x63, 0x37, 0x4a, 0x32, 0x9a, 0x43, 0xf9, 0x54, 0x2f, 0xd6,
	0xa1, 0x2f, 0xa0, 0x16, 0xc5, 0x81, 0x37, 0x75, 0xed, 0x88, 0x34, 0x64, 0x76, 0xe5, 0xbf, 0x7f,
	0x3d, 0x2e, 0x8b, 0xcf, 0x7c, 0x66, 0x26, 0xfc, 0x6d, 0x6f, 0x48, 0xae, 0x70, 0x26, 0x8f, 0x15,
	0x3f, 0x87, 0x22, 0x93, 0xab, 0xc1, 0xa1, 0xdc, 0x5d, 0x5a, 0xca, 0xdf, 0xa5, 0x87, 0x63, 0x58,
	0x2b, 0x0a, 0xa3, 0x21, 0xe6, 0x02, 0xa8, 0x39, 0x4b, 0x98, 0x03, 0x14, 0x1b, 0xd8, 0x91, 0xe3,
	0x33, 0x5b, 0x96, 0x30, 0x07, 0xa8, 0xa3, 0x59, 0xf0, 0x64, 0x86, 0xe4, 0x29, 0xf2, 0x00, 0xaa,
	0x61, 0xdc, 0xcf, 0x82, 0xba, 0x84, 0x2b, 0x61, 0xdc, 0x67, 0xd1, 0xdb, 0x86, 0x65, 0xcc, 0x9d,
	0xb3, 0x06, 0x60, 0xc4, 0x83, 0x01, 0x09, 0xc3, 0xf3, 0xd8, 0x55, 0xee, 0x21, 0x80, 0xe5, 0x43,
	0xdb, 0x71, 0x09, 0xcd, 0xe9, 0xed, 0x05, 0x31, 0xa6, 0xd6, 0x5b, 0xb8, 0xd9, 0x7d, 0xae, 0xfe,
	0x4e, 0x82, 0x46, 0xcb, 0xb5, 0xc3, 0xd0, 0x19, 0x84, 0x69, 0xa6, 0xd2, 0x02, 0xe9, 0x78, 0xa3,
	0xb9, 0x6d, 0xe1, 0xb5, 0x13, 0x80, 0xd6, 0x52, 0xee, 0x25, 0x1a, 0x43, 0x5e, 0x82, 0xaa, 0x1c,
	0xc1, 0x3b, 0xc1, 0xbc, 0xce, 0xa1, 0xf6, 0x17, 0x24, 0x4d, 0xaa, 0x3d, 0xfa, 0x5e, 0xaa, 0x8c,
	0xc4, 0x12, 0x60, 0xbb, 0x90, 0x00, 0xb7, 0x98, 0x95, 0x66, 0xe6, 0x87, 0xf0, 0x0e, 0xf7, 0xd0,
	0xb1, 0xd6, 0xc4, 0xa6, 0xb5, 0xaf, 0x35, 0x4d, 0xab, 0x75, 0xdc, 0x34, 0x6f, 0x2d, 0xaf, 0xaa,
	0xce, 0x39, 0x8c, 0x3b, 0x73, 0xa0, 0xc7, 0x00, 0xb4, 0x87, 0x58, 0x21, 0x9b, 0x76, 0xa8, 0xcb,
	0xe4, 0xdc, 0xb4, 0xa3, 0x7e, 0x05, 0x75, 0xae, 0x42, 0x47, 0x3f, 0x6a, 0x77, 0x69, 0x7a, 0x44,
	0xfe, 0x98, 0xf0, 0x39, 0xa6, 0x86, 0x39, 0x70, 0xfb, 0x15, 0xd8, 0x84, 0xca, 0xc8, 0x9e, 0x90,
	0xcc, 0xaf, 0xcb, 0x14, 0xe4, 0x6d, 0x20, 0xb0, 0xbd, 0xc4, 0xa7, 0xec, 0x37, 0x4f, 0x3d, 0x6f,
	0xb8, 0xc7, 0x32, 0xb7, 0x8c, 0x39, 0xa0, 0xfe, 0x80, 0x2b, 0x60, 0x08, 0x05, 0xbe, 0x59, 0xb8,
	0x85, 0x6b, 0x7b, 0x9b, 0x79, 0x87, 0x62, 0x32, 0x75, 0x67, 0x3c, 0xf3, 0x92, 0xeb, 0xa9, 0xfe,
	0x55, 0x82, 0xb5, 0xc3, 0xc0, 0x21, 0xde, 0x90, 0xb5, 0xbd, 0x85, 0xcd, 0x29, 0xa7, 0x6e, 0xa9,
	0xa0, 0x6e, 0xae, 0x13, 0xc9, 0xb7, 0x75, 0xa2, 0x72, 0xbe, 0x13, 0xa5, 0x7d, 0x6e, 0x29, 0xd7,
	0xe7, 0x1e, 0x40, 0x75, 0x14, 0x3b, 0x2e, 0x4b, 0x33, 0x3e, 0x56, 0x54, 0x18, 0xcc, 0xa3, 0xc0,
	0x3f, 0x79, 0xf6, 0x84, 0x88, 0x06, 0x5b, 0x63, 0x98, 0xae, 0x3d, 0x21, 0xbb, 0xe5, 0xea, 0x9e,
	0x42, 0xd4, 0x5f, 0x49, 0x00, 0xdc, 0x14, 0x66, 0xc6, 0x27, 0x50, 0xe3, 0x66, 0x78, 0xe7, 0x3e,
	0x33, 0xa4, 0xbe, 0xf7, 0x30, 0xef, 0x8d, 0xa2, 0xd5, 0xb8, 0x1a, 0x27, 0xf6, 0xbf, 0x0f, 0x2b,
	0xb1, 0x17, 0x10, 0x7b, 0x68, 0xb1, 0x99, 0x57, 0xd8, 0x5a, 0xe7, 0xb8, 0x16, 0x45, 0x51, 0x92,
	0x09, 0x09, 0x43, 0x7b, 0x44, 0xf8, 0x84, 0x21, 0xb3, 0xbc, 0xa8, 0x0b, 0x1c, 0x1d, 0x32, 0xd4,
	0x0f, 0xe0, 0x3e, 0xcf, 0x8c, 0x43, 0xdc, 0xd6, 0xba, 0x07, 0x56, 0xa7, 0x6d, 0x2c, 0x48, 0xcc,
	0xbf, 0x49, 0x9c, 0xdc, 0x28, 0x90, 0x7f, 0x0a, 0x60, 0x4f, 0xa7, 0xee, 0xcc, 0x72, 0x9d, 0x30,
	0x12, 0x57, 0x64, 0x91, 0x0d, 0x35, 0x46, 0xdd, 0x71, 0xc2, 0x08, 0xed, 0xc3, 0x7a, 0x9f, 0x58,
	0x14, 0x76, 0xc8, 0x90, 0xf3, 0x97, 0x5e, 0xc9, 0xbf, 0xda, 0x27, 0x4d, 0xce, 0xc1, 0x64, 0x7c,
	0x02, 0xf5, 0x73, 0x46, 0xc0, 0xf9, 0x79, 0x8d, 0xde, 0xb8, 0xc9, 0xcf, 0x78, 0x81, 0x93, 0x52,
	0x46, 0xf5, 0x1b, 0xf0, 0x16, 0xb7, 0xdd, 0xd0, 0x9a, 0xb8, 0x75, 0x2c, 0x6c, 0x42, 0x0a, 0xc8,
	0x63, 0x32, 0x63, 0x96, 0xaf, 0x60, 0xfa, 0x53, 0xfd, 0x8a, 0x13, 0x1a, 0xd7, 0x08, 0x93, 0xd0,
	0xdd, 0xd1, 0x6c, 0x16, 0x3a, 0xa6, 0x71, 0x96, 0xfe, 0xa5, 0xbb, 0xa5, 0x7f, 0x08, 0x40, 0x2d,
	0x9e, 0x1d, 0x52, 0x81, 0x34, 0x03, 0xb9, 0xbf, 0xd3, 0xf8, 0x54, 0x18, 0xdc, 0x1e, 0x22, 0x15,
	0x56, 0x73, 0xfe, 0x4c, 0x6f, 0x40, 0x3d, 0xf5, 0x58, 0x7b, 0x88, 0x9e, 0x82, 0xec, 0x4f, 0x23,
	0x96, 0x0c, 0xd7, 0x5a, 0x38, 0x3b, 0x43, 0x9f, 0x46, 0x98, 0x12, 0xa8, 0xfb, 0x80, 0xb8, 0x7b,
	0x9a, 0xbd, 0x5e, 0xe7, 0x2c, 0x31, 0xfa, 0x03, 0x58, 0x62, 0x87, 0x89, 0x5c, 0xdd, 0xb8, 0xc1,
	0xcf, 0x74, 0xc4, 0x9c, 0x48, 0xfd, 0x93, 0x04, 0x0f, 0xb8, 0xeb, 0xf2, 0x42, 0x2c, 0xac, 0x19,
	0x27, 0x1d, 0xf3, 0xf5, 0x64, 0xbd, 0xb6, 0xd7, 0xb2, 0xbc, 0x64, 0x77, 0x4b, 0x7e, 0xe5, 0xdd,
	0xe2, 0x79, 0x49, 0x7f, 0xaa, 0x5f, 0x24, 0xa9, 0x71, 0xa0, 0x75, 0x34, 0x53, 0x4b, 0x8c, 0x7f,
	0x02, 0xf5, 0x80, 0x7c, 0x69, 0x15, 0x2f, 0x47, 0x2d, 0x20, 0x5f, 0x8a, 0x61, 0x7c, 0x1b, 0xd6,
	0x44, 0x2a, 0x16, 0x2b, 0xe9, 0xca, 0x79, 0x76, 0xd2, 0x50, 0xfd, 0xb5, 0x94, 0xe4, 0xd3, 0xd7,
	0x20, 0x3d, 0xe7, 0x26, 0xf9, 0x6e, 0xc9, 0x75, 0xc2, 0x1f, 0xf0, 0x62, 0xb8, 0x3c, 0x6e, 0x9a,
	0xd6, 0x0b, 0xcd, 0x30, 0x9a, 0x47, 0xda, 0x9c, 0x03, 0xa5, 0x39, 0x07, 0xbe, 0x03, 0xcb, 0x93,
	0x70, 0x94, 0xa9, 0xb3, 0x34, 0x09, 0x47, 0xec, 0x25, 0x0d, 0xad, 0x0b, 0x3b, 0xea, 0xd9, 0x83,
	0x31, 0xa1, 0x23, 0x44, 0x29, 0x65, 0x2f, 0x39, 0x43, 0x7a, 0xc9, 0x26, 0xe1, 0x48, 0x3c, 0x20,
	0xe8, 0x4f, 0xfa, 0xe0, 0x22, 0x13, 0x9f, 0x3d, 0xaf, 0x79, 0x75, 0x4e, 0xc0, 0x6b, 0xcd, 0xad,
	0x7c, 0xbd, 0xb9, 0x7d, 0xc9, 0xf5, 0x37, 0xde, 0x54, 0xff, 0x8f, 0xa0, 0x4a, 0xf5, 0xcf, 0x15,
	0x9f, 0x42, 0x22, 0x66, 0x46, 0xe0, 0xca, 0x24, 0x1c, 0xb1, 0xca, 0xf1, 0x1b, 0x29, 0xb9, 0x1b,
	0x85, 0xf3, 0x9e, 0xc2, 0x7a, 0x38, 0x25, 0xf6, 0x38, 0xf7, 0x64, 0xe3, 0x07, 0xae, 0x0a, 0xf4,
	0x6b, 0x05, 0x52, 0xb8, 0x48, 0x9e, 0xeb, 0xa2, 0x72, 0xc1, 0x45, 0xea, 0x5f, 0x84, 0x42, 0xc6,
	0xd7, 0xa9, 0xd0, 0x4e, 0xa6, 0xd0, 0xed, 0x3e, 0x62, 0x8a, 0x66, 0x39, 0x58, 0xbe, 0x5b, 0x0e,
	0xfe, 0x5c, 0x82, 0xc7, 0x5c, 0xff, 0xae, 0x6e, 0xb6, 0x0f, 0xcf, 0xac, 0xae, 0x76, 0xfa, 0x26,
	0xb1, 0xdc, 0x84, 0x8a, 0x13, 0x5a, 0xd3, 0xd8, 0x75, 0x99, 0x05, 0x55, 0xbc, 0xec, 0x84, 0xbd,
	0xd8, 0x75, 0x6f, 0x74, 0x4b, 0xf9, 0x46, 0xb7, 0x54, 0xff, 0x25, 0xc3, 0x13, 0xd1, 0xdc, 0x9a,
	0x5d, 0xb3, 0x69, 0x9c, 0x59, 0xda, 0x8f, 0x8e, 0xdb, 0xfb, 0x6d, 0xb3, 0xad, 0x77, 0x2d, 0xc3,
	0x6c, 0x9a, 0x1a, 0xfa, 0xec, 0xda, 0x06, 0x48, 0x2d, 0x54, 0x13, 0xdb, 0x8b, 0xec, 0x70, 0xa6,
	0x5d, 0x5d, 0x38, 0x7d, 0x87, 0x12, 0x19, 0x91, 0x1d, 0x91, 0xfc, 0x22, 0x68, 0x10, 0x07, 0xdd,
	0x78, 0x92, 0x4c, 0x25, 0x1c, 0xa2, 0xf8, 0x89, 0x7d, 0x45, 0xf1, 0x62, 0x28, 0xe1, 0x10, 0x7a,
	0x08, 0x55, 0xce, 0x29, 0x76, 0x54, 0x65, 0x9c, 0xc2, 0x34, 0x11, 0x86, 0x81, 0x3f, 0xa5, 0x4c,
	0xfc, 0x81, 0x90, 0x80, 0xe8, 0x09, 0x00, 0x1f, 0x6d, 0xe9, 0x08, 0x2f, 0xe6, 0x93, 0x1c, 0x06,
	0x6d, 0xd1, 0x1a, 0x43, 0xa1, 0xcf, 0x6d, 0x37, 0xe6, 0x33, 0x4a, 0x19, 0xe7, 0x51, 0x4c, 0x82,
	0xed, 0x8d, 0xc5, 0x52, 0xa6, 0x2a, 0x24, 0xa4, 0x18, 0xfa, 0x7d, 0xe0, 0x7b, 0x51, 0xe0, 0xf4,
	0xe3, 0x88, 0x34, 0x6a, 0xfc, 0x7b, 0x86, 0xa1, 0xf6, 0x78, 0xf1, 0xa4, 0x4f, 0x82, 0x06, 0x6c,
	0xc9, 0xd4, 0x1e, 0x0e, 0xa5, 0xb3, 0x54, 0xbd, 0xb8, 0x33, 0x10, 0x8b, 0x9b, 0x95, 0x5b, 0x16,
	0x37, 0xab, 0x85, 0x79, 0xec, 0x29, 0xac, 0x71, 0x55, 0xe9, 0x8c, 0xcd, 0x2c, 0x5c, 0x63, 0xdf,
	0xaf, 0x61, 0xd1, 0x0e, 0xac, 0x67, 0x18, 0x6e, 0xe9, 0x3a, 0xb3, 0xf4, 0x3a, 0x5a, 0xfd, 0x47,
	0xba, 0x97, 0x3c, 0xc0, 0x7a, 0x2f, 0x8d, 0x7c, 0x47, 0x37, 0x4d, 0x0d, 0x9f, 0xe5, 0xb6, 0x53,
	0xc5, 0x19, 0xb3, 0x01, 0x15, 0xf6, 0xd2, 0x4a, 0xd7, 0x56, 0x09, 0x98, 0x33, 0x5f, 0x2e, 0x98,
	0x7f, 0xdb, 0xee, 0xea, 0x5d, 0xa8, 0xb9, 0xce, 0x79, 0x44, 0xcb, 0x59, 0x28, 0x82, 0x99, 0x21,
	0xa8, 0xc1, 0x03, 0x3f, 0x8c, 0x72, 0x0e, 0x17, 0xbb, 0x9d, 0x22, 0x96, 0x4a, 0xb1, 0xa3, 0x88,
	0x78, 0x43, 0x2f, 0x9e, 0xb0, 0xa0, 0xae, 0xe2, 0x0c, 0xa1, 0xfe, 0x41, 0x82, 0x07, 0x37, 0xb2,
	0xf3, 0xbf, 0xb9, 0x95, 0x13, 0x41, 0x2c, 0xdf, 0x12, 0xc4, 0xc2, 0x7a, 0x27, 0xe7, 0xa1, 0xe5,
	0xbc, 0x87, 0xd4, 0xff, 0x83, 0xf7, 0xb3, 0x3e, 0x34, 0xe7, 0x0a, 0xb2, 0x87, 0xe4, 0x4f, 0x38,
	0x91, 0xb1, 0x88, 0x08, 0x7d, 0x9a, 0x5a, 0x44, 0xab, 0xf9, 0xff, 0x2f, 0xbc, 0xa4, 0xc5, 0x4d,
	0x9d, 0xda, 0x85, 0xed, 0x85, 0x4a, 0x24, 0x89, 0xf1, 0x14, 0xd6, 0x07, 0x71, 0x60, 0xb9, 0x7e,
	0x14, 0x91, 0x60, 0x66, 0x51, 0xb7, 0x8b, 0xca, 0x3a, 0x88, 0x83, 0x0e, 0xc7, 0x76, 0xe3, 0x89,
	0xda, 0xe7, 0xf2, 0x8c, 0x57, 0xc9, 0xfb, 0x0c, 0xca, 0xe2, 0x05, 0x40, 0x55, 0x7e, 0x7a, 0x73,
	0xc3, 0x30, 0x2f, 0x3d, 0x31, 0xe3, 0x51, 0x47, 0x80, 0x7a, 0xec, 0xa9, 0x89, 0x7d, 0x7f, 0x62,
	0xda, 0xe1, 0xf8, 0xd0, 0x09, 0x2f, 0xd8, 0x6b, 0xc7, 0x09, 0x2f, 0x72, 0x43, 0x3c, 0x05, 0xdb,
	0x6c, 0x7c, 0x64, 0x1f, 0xbc, 0xb4, 0x14, 0x31, 0x42, 0x5a, 0x3d, 0x1e, 0x03, 0xdf, 0x07, 0x0e,
	0xd9, 0x47, 0x5e, 0x8f, 0x6a, 0x1c, 0x43, 0x8d, 0xf9, 0xa5, 0x94, 0x2c, 0xad, 0xb1, 0xae, 0xbf,
	0xb0, 0xcc, 0xa6, 0xf1, 0xdc, 0xea, 0x61, 0xbd, 0xa5, 0x19, 0x06, 0x65, 0x65, 0x95, 0xd5, 0x1a,
	0xbe, 0x14, 0xe5, 0x31, 0xd9, 0xc6, 0x1f, 0xbc, 0xf4, 0x3d, 0xb4, 0x07, 0x65, 0x7a, 0x88, 0x68,
	0xb0, 0x4f, 0x0a, 0x8b, 0xa3, 0x1b, 0xba, 0x63, 0x46, 0x4b, 0x15, 0x75, 0x42, 0xda, 0xf5, 0x03,
	0x5e, 0xaf, 0xab, 0xb8, 0xe2, 0x84, 0x06, 0x05, 0xd5, 0xef, 0x24, 0x6b, 0xeb, 0x93, 0xde, 0x41,
	0xd3, 0xd4, 0x72, 0xfa, 0xb0, 0x04, 0xd8, 0x84, 0x4a, 0x48, 0xec, 0x88, 0xdb, 0xce, 0x72, 0x8c,
	0x82, 0xed, 0xa1, 0x3a, 0x4b, 0x5e, 0xd6, 0x6c, 0xc9, 0x9b, 0xb1, 0xa1, 0x47, 0x50, 0x7b, 0xe9,
	0x78, 0x5e, 0xbe, 0xb3, 0x54, 0x39, 0x82, 0x77, 0x95, 0x44, 0x9c, 0xb8, 0x0e, 0x5c, 0xdc, 0xeb,
	0x2c, 0xa9, 0x77, 0xff, 0x2c, 0x41, 0x3d, 0xd7, 0xfa, 0x16, 0x2d, 0x55, 0x90, 0x02, 0x2b, 0x5d,
	0x3f, 0x3a, 0xf4, 0x63, 0xde, 0xd8, 0x94, 0x12, 0x7a, 0x0b, 0xd6, 0xd9, 0x44, 0x8c, 0xc9, 0x94,
	0xd8, 0x11, 0x19, 0xba, 0x33, 0x45, 0x4e, 0x91, 0x27, 0xd3, 0x29, 0x7d, 0x59, 0x4c, 0x9c, 0x48,
	0x29, 0xa3, 0xb7, 0x41, 0x11, 0x73, 0x6d, 0x86, 0x5d, 0x42, 0xf7, 0x61, 0x95, 0x63, 0xb5, 0x2b,
	0x27, 0x8c, 0xc8, 0x50, 0x59, 0x46, 0x1b, 0x80, 0xc4, 0x82, 0xb2, 0xe5, 0x7b, 0xe7, 0x8e, 0x47,
	0x5a, 0x17, 0x76, 0xa0, 0x54, 0xa8, 0x54, 0x3d, 0xba, 0x20, 0x01, 0xa7, 0x3f, 0x8c, 0x5d, 0x57,
	0xa9, 0xee, 0x7e, 0x0c, 0xeb, 0xd7, 0xfe, 0xe1, 0x40, 0x55, 0x28, 0xb7, 0xfc, 0x09, 0x51, 0x24,
	0xb4, 0x02, 0x55, 0xfa, 0xab, 0x6f, 0x0f, 0xc6, 0x4a, 0x09, 0xd5, 0x60, 0xa9, 0x43, 0xec, 0x4b,
	0xa2, 0xc8, 0xbb, 0xdb, 0x50, 0x4d, 0xd7, 0xa3, 0x75, 0xa8, 0x88, 0x55, 0x89, 0x72, 0x8f, 0x02,
	0x2f, 0x7c, 0x2f, 0x8c, 0x48, 0xa0, 0x48, 0xbb, 0xdf, 0x85, 0x6a, 0xf2, 0xf2, 0xa0, 0xcc, 0xec,
	0xb7, 0x22, 0x51, 0x87, 0xb4, 0x6c, 0x6f, 0x40, 0x5c, 0x2e, 0xb3, 0x39, 0x0a, 0x08, 0x51, 0x64,
	0x8a, 0x0e, 0xc8, 0x79, 0x1c, 0x12, 0xa5, 0xbc, 0xdb, 0x82, 0x8d, 0xf9, 0x5d, 0x97, 0x2a, 0x77,
	0x6a, 0x3b, 0x91, 0x72, 0x8f, 0xb2, 0xb2, 0x9c, 0xe1, 0x12, 0xdb, 0x1e, 0x4d, 0x37, 0xa5, 0x44,
	0x09, 0xf4, 0x4b, 0x12, 0x28, 0xf2, 0x7e, 0xe9, 0x58, 0xfe, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xc4, 0x21, 0xdd, 0x88, 0xc3, 0x1a, 0x00, 0x00,
}
