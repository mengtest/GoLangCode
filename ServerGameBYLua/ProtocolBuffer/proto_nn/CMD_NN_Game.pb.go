// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CMD_NN_Game.CMD

/*
Package CMD_NN is a generated protocol buffer package.

Namespace: MESSAGE

It is generated from these files:
	CMD_NN_Game.CMD

It has these top-level messages:
	CMD_S_UserDownInfo
	CMD_S_History
	CMD_S_Game_Scene
	CMD_C_RequestBanker
	CMD_WaitBankerUserInfo
	CMD_S_RequestBanker
	CMD_S_UpdateBanker
	CMD_C_UserChip
	CMD_S_UserChipNotify
	CMD_C_ContinueChip
	CMD_S_ContinueChipResult
	CMD_S_GameInfo
	CMD_S_Card_Data
	CMD_S_RankInfo
	CMD_S_GameEnd
	CMD_S_SysMessage
	CMD_S_TableUeser
	CMD_S_UserStandUp
	CMD_SUB_C_ONLINE_TOTAL
	CMD_SUB_S_ONLINE_TOTAL
	CMD_SUB_C_ROBBANK
	CMD_SUB_S_AndroidUpdateChip
	CMD_S_CancelChip
	CMD_S_UpdateChip
*/
package CMD_NN

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the CMD package it is being compiled against.
// A compilation error at this line likely means your copy of the
// CMD package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the CMD package

// 请求上庄
type CMD_S_UserDownInfo struct {
	ChairId          *uint32  `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	GameId           *uint32  `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	UserId           *uint32  `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Score            *uint64  `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	DownScore        []uint64 `protobuf:"varint,5,rep,name=down_score,json=downScore" json:"down_score,omitempty"`
	NickName         []byte   `protobuf:"bytes,6,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	VipLev           *uint32  `protobuf:"varint,7,opt,name=vip_lev,json=vipLev" json:"vip_lev,omitempty"`
	KillProbability  *int32   `protobuf:"varint,8,opt,name=kill_probability,json=killProbability" json:"kill_probability,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_S_UserDownInfo) Reset()                    { *m = CMD_S_UserDownInfo{} }
func (m *CMD_S_UserDownInfo) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UserDownInfo) ProtoMessage()               {}
func (*CMD_S_UserDownInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CMD_S_UserDownInfo) GetChairId() uint32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_UserDownInfo) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *CMD_S_UserDownInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_UserDownInfo) GetScore() uint64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMD_S_UserDownInfo) GetDownScore() []uint64 {
	if m != nil {
		return m.DownScore
	}
	return nil
}

func (m *CMD_S_UserDownInfo) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *CMD_S_UserDownInfo) GetVipLev() uint32 {
	if m != nil && m.VipLev != nil {
		return *m.VipLev
	}
	return 0
}

func (m *CMD_S_UserDownInfo) GetKillProbability() int32 {
	if m != nil && m.KillProbability != nil {
		return *m.KillProbability
	}
	return 0
}

type CMD_S_History struct {
	Win              []bool `protobuf:"varint,1,rep,name=win" json:"win,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_History) Reset()                    { *m = CMD_S_History{} }
func (m *CMD_S_History) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_History) ProtoMessage()               {}
func (*CMD_S_History) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CMD_S_History) GetWin() []bool {
	if m != nil {
		return m.Win
	}
	return nil
}

type CMD_S_Game_Scene struct {
	BankerName       []byte           `protobuf:"bytes,1,opt,name=banker_name,json=bankerName" json:"banker_name,omitempty"`
	BankerChairId    *uint32          `protobuf:"varint,2,opt,name=banker_chair_id,json=bankerChairId" json:"banker_chair_id,omitempty"`
	BankerUserId     *uint32          `protobuf:"varint,3,opt,name=banker_user_id,json=bankerUserId" json:"banker_user_id,omitempty"`
	BankerTimes      *uint32          `protobuf:"varint,4,opt,name=banker_times,json=bankerTimes" json:"banker_times,omitempty"`
	BankerScore      *uint64          `protobuf:"varint,5,opt,name=banker_score,json=bankerScore" json:"banker_score,omitempty"`
	MinBankerScore   *uint64          `protobuf:"varint,6,opt,name=min_banker_score,json=minBankerScore" json:"min_banker_score,omitempty"`
	AppBankerCount   *uint32          `protobuf:"varint,7,opt,name=app_banker_count,json=appBankerCount" json:"app_banker_count,omitempty"`
	AppBankerChairId []uint32         `protobuf:"varint,8,rep,name=app_banker_chair_id,json=appBankerChairId" json:"app_banker_chair_id,omitempty"`
	GameState        *uint32          `protobuf:"varint,9,opt,name=game_state,json=gameState" json:"game_state,omitempty"`
	MyDownJetton     []uint64         `protobuf:"varint,10,rep,name=my_down_jetton,json=myDownJetton" json:"my_down_jetton,omitempty"`
	TotalJetton      []uint64         `protobuf:"varint,11,rep,name=total_jetton,json=totalJetton" json:"total_jetton,omitempty"`
	HisCount         *uint32          `protobuf:"varint,12,opt,name=his_count,json=hisCount" json:"his_count,omitempty"`
	History          []*CMD_S_History `protobuf:"bytes,13,rep,name=history" json:"history,omitempty"`
	TiemrIndex       *uint32          `protobuf:"varint,14,opt,name=tiemr_index,json=tiemrIndex" json:"tiemr_index,omitempty"`
	TotalBoard       *uint32          `protobuf:"varint,15,opt,name=total_board,json=totalBoard" json:"total_board,omitempty"`
	BoardCount       []uint32         `protobuf:"varint,16,rep,name=board_count,json=boardCount" json:"board_count,omitempty"`
	TableUserCount   *uint32          `protobuf:"varint,17,opt,name=table_user_count,json=tableUserCount" json:"table_user_count,omitempty"`
	TableChairId     []uint32         `protobuf:"varint,18,rep,name=table_chair_id,json=tableChairId" json:"table_chair_id,omitempty"`
	ChipValues       []uint64         `protobuf:"varint,19,rep,name=chip_values,json=chipValues" json:"chip_values,omitempty"`
	BankerFaceId     *uint32          `protobuf:"varint,20,opt,name=banker_face_id,json=bankerFaceId" json:"banker_face_id,omitempty"`
	BankerFaceUrl    []byte           `protobuf:"bytes,21,opt,name=banker_face_url,json=bankerFaceUrl" json:"banker_face_url,omitempty"`
	ChipUpLimit      *int32           `protobuf:"varint,22,opt,name=chip_up_limit,json=chipUpLimit" json:"chip_up_limit,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_S_Game_Scene) Reset()                    { *m = CMD_S_Game_Scene{} }
func (m *CMD_S_Game_Scene) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_Game_Scene) ProtoMessage()               {}
func (*CMD_S_Game_Scene) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CMD_S_Game_Scene) GetBankerName() []byte {
	if m != nil {
		return m.BankerName
	}
	return nil
}

func (m *CMD_S_Game_Scene) GetBankerChairId() uint32 {
	if m != nil && m.BankerChairId != nil {
		return *m.BankerChairId
	}
	return 0
}

func (m *CMD_S_Game_Scene) GetBankerUserId() uint32 {
	if m != nil && m.BankerUserId != nil {
		return *m.BankerUserId
	}
	return 0
}

func (m *CMD_S_Game_Scene) GetBankerTimes() uint32 {
	if m != nil && m.BankerTimes != nil {
		return *m.BankerTimes
	}
	return 0
}

func (m *CMD_S_Game_Scene) GetBankerScore() uint64 {
	if m != nil && m.BankerScore != nil {
		return *m.BankerScore
	}
	return 0
}

func (m *CMD_S_Game_Scene) GetMinBankerScore() uint64 {
	if m != nil && m.MinBankerScore != nil {
		return *m.MinBankerScore
	}
	return 0
}

func (m *CMD_S_Game_Scene) GetAppBankerCount() uint32 {
	if m != nil && m.AppBankerCount != nil {
		return *m.AppBankerCount
	}
	return 0
}

func (m *CMD_S_Game_Scene) GetAppBankerChairId() []uint32 {
	if m != nil {
		return m.AppBankerChairId
	}
	return nil
}

func (m *CMD_S_Game_Scene) GetGameState() uint32 {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return 0
}

func (m *CMD_S_Game_Scene) GetMyDownJetton() []uint64 {
	if m != nil {
		return m.MyDownJetton
	}
	return nil
}

func (m *CMD_S_Game_Scene) GetTotalJetton() []uint64 {
	if m != nil {
		return m.TotalJetton
	}
	return nil
}

func (m *CMD_S_Game_Scene) GetHisCount() uint32 {
	if m != nil && m.HisCount != nil {
		return *m.HisCount
	}
	return 0
}

func (m *CMD_S_Game_Scene) GetHistory() []*CMD_S_History {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *CMD_S_Game_Scene) GetTiemrIndex() uint32 {
	if m != nil && m.TiemrIndex != nil {
		return *m.TiemrIndex
	}
	return 0
}

func (m *CMD_S_Game_Scene) GetTotalBoard() uint32 {
	if m != nil && m.TotalBoard != nil {
		return *m.TotalBoard
	}
	return 0
}

func (m *CMD_S_Game_Scene) GetBoardCount() []uint32 {
	if m != nil {
		return m.BoardCount
	}
	return nil
}

func (m *CMD_S_Game_Scene) GetTableUserCount() uint32 {
	if m != nil && m.TableUserCount != nil {
		return *m.TableUserCount
	}
	return 0
}

func (m *CMD_S_Game_Scene) GetTableChairId() []uint32 {
	if m != nil {
		return m.TableChairId
	}
	return nil
}

func (m *CMD_S_Game_Scene) GetChipValues() []uint64 {
	if m != nil {
		return m.ChipValues
	}
	return nil
}

func (m *CMD_S_Game_Scene) GetBankerFaceId() uint32 {
	if m != nil && m.BankerFaceId != nil {
		return *m.BankerFaceId
	}
	return 0
}

func (m *CMD_S_Game_Scene) GetBankerFaceUrl() []byte {
	if m != nil {
		return m.BankerFaceUrl
	}
	return nil
}

func (m *CMD_S_Game_Scene) GetChipUpLimit() int32 {
	if m != nil && m.ChipUpLimit != nil {
		return *m.ChipUpLimit
	}
	return 0
}

// 申请上庄
type CMD_C_RequestBanker struct {
	AppBanker        *bool  `protobuf:"varint,1,opt,name=app_banker,json=appBanker" json:"app_banker,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_RequestBanker) Reset()                    { *m = CMD_C_RequestBanker{} }
func (m *CMD_C_RequestBanker) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_RequestBanker) ProtoMessage()               {}
func (*CMD_C_RequestBanker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CMD_C_RequestBanker) GetAppBanker() bool {
	if m != nil && m.AppBanker != nil {
		return *m.AppBanker
	}
	return false
}

type CMD_WaitBankerUserInfo struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName         []byte  `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	FaceId           *uint32 `protobuf:"varint,3,opt,name=face_id,json=faceId" json:"face_id,omitempty"`
	UserScore        *int64  `protobuf:"varint,4,opt,name=user_score,json=userScore" json:"user_score,omitempty"`
	FaceUrl          []byte  `protobuf:"bytes,5,opt,name=face_url,json=faceUrl" json:"face_url,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_WaitBankerUserInfo) Reset()                    { *m = CMD_WaitBankerUserInfo{} }
func (m *CMD_WaitBankerUserInfo) String() string            { return proto.CompactTextString(m) }
func (*CMD_WaitBankerUserInfo) ProtoMessage()               {}
func (*CMD_WaitBankerUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CMD_WaitBankerUserInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_WaitBankerUserInfo) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *CMD_WaitBankerUserInfo) GetFaceId() uint32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

func (m *CMD_WaitBankerUserInfo) GetUserScore() int64 {
	if m != nil && m.UserScore != nil {
		return *m.UserScore
	}
	return 0
}

func (m *CMD_WaitBankerUserInfo) GetFaceUrl() []byte {
	if m != nil {
		return m.FaceUrl
	}
	return nil
}

type CMD_S_RequestBanker struct {
	AppBanker        *bool                     `protobuf:"varint,1,opt,name=app_banker,json=appBanker" json:"app_banker,omitempty"`
	UserId           *uint32                   `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserWait         []*CMD_WaitBankerUserInfo `protobuf:"bytes,3,rep,name=user_wait,json=userWait" json:"user_wait,omitempty"`
	Monetaryt        *int32                    `protobuf:"varint,4,opt,name=monetaryt" json:"monetaryt,omitempty"`
	Monetaryv        *int64                    `protobuf:"varint,5,opt,name=monetaryv" json:"monetaryv,omitempty"`
	FrobUser         *bool                     `protobuf:"varint,6,opt,name=frob_user,json=frobUser" json:"frob_user,omitempty"`
	IrobAct          *bool                     `protobuf:"varint,7,opt,name=irob_act,json=irobAct" json:"irob_act,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMD_S_RequestBanker) Reset()                    { *m = CMD_S_RequestBanker{} }
func (m *CMD_S_RequestBanker) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_RequestBanker) ProtoMessage()               {}
func (*CMD_S_RequestBanker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CMD_S_RequestBanker) GetAppBanker() bool {
	if m != nil && m.AppBanker != nil {
		return *m.AppBanker
	}
	return false
}

func (m *CMD_S_RequestBanker) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_RequestBanker) GetUserWait() []*CMD_WaitBankerUserInfo {
	if m != nil {
		return m.UserWait
	}
	return nil
}

func (m *CMD_S_RequestBanker) GetMonetaryt() int32 {
	if m != nil && m.Monetaryt != nil {
		return *m.Monetaryt
	}
	return 0
}

func (m *CMD_S_RequestBanker) GetMonetaryv() int64 {
	if m != nil && m.Monetaryv != nil {
		return *m.Monetaryv
	}
	return 0
}

func (m *CMD_S_RequestBanker) GetFrobUser() bool {
	if m != nil && m.FrobUser != nil {
		return *m.FrobUser
	}
	return false
}

func (m *CMD_S_RequestBanker) GetIrobAct() bool {
	if m != nil && m.IrobAct != nil {
		return *m.IrobAct
	}
	return false
}

// 更新庄家信息
type CMD_S_UpdateBanker struct {
	BankerName       []byte  `protobuf:"bytes,1,opt,name=banker_name,json=bankerName" json:"banker_name,omitempty"`
	BankerChairId    *uint32 `protobuf:"varint,2,opt,name=banker_chair_id,json=bankerChairId" json:"banker_chair_id,omitempty"`
	BankerUserId     *uint32 `protobuf:"varint,3,opt,name=banker_user_id,json=bankerUserId" json:"banker_user_id,omitempty"`
	BankerTimes      *uint32 `protobuf:"varint,4,opt,name=banker_times,json=bankerTimes" json:"banker_times,omitempty"`
	BankerScore      *uint64 `protobuf:"varint,5,opt,name=banker_score,json=bankerScore" json:"banker_score,omitempty"`
	BankerFaceId     *uint32 `protobuf:"varint,6,opt,name=banker_face_id,json=bankerFaceId" json:"banker_face_id,omitempty"`
	BankerFaceUrl    []byte  `protobuf:"bytes,7,opt,name=banker_face_url,json=bankerFaceUrl" json:"banker_face_url,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_UpdateBanker) Reset()                    { *m = CMD_S_UpdateBanker{} }
func (m *CMD_S_UpdateBanker) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UpdateBanker) ProtoMessage()               {}
func (*CMD_S_UpdateBanker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CMD_S_UpdateBanker) GetBankerName() []byte {
	if m != nil {
		return m.BankerName
	}
	return nil
}

func (m *CMD_S_UpdateBanker) GetBankerChairId() uint32 {
	if m != nil && m.BankerChairId != nil {
		return *m.BankerChairId
	}
	return 0
}

func (m *CMD_S_UpdateBanker) GetBankerUserId() uint32 {
	if m != nil && m.BankerUserId != nil {
		return *m.BankerUserId
	}
	return 0
}

func (m *CMD_S_UpdateBanker) GetBankerTimes() uint32 {
	if m != nil && m.BankerTimes != nil {
		return *m.BankerTimes
	}
	return 0
}

func (m *CMD_S_UpdateBanker) GetBankerScore() uint64 {
	if m != nil && m.BankerScore != nil {
		return *m.BankerScore
	}
	return 0
}

func (m *CMD_S_UpdateBanker) GetBankerFaceId() uint32 {
	if m != nil && m.BankerFaceId != nil {
		return *m.BankerFaceId
	}
	return 0
}

func (m *CMD_S_UpdateBanker) GetBankerFaceUrl() []byte {
	if m != nil {
		return m.BankerFaceUrl
	}
	return nil
}

type CMD_C_UserChip struct {
	ChipIndex        *uint32 `protobuf:"varint,1,opt,name=chip_index,json=chipIndex" json:"chip_index,omitempty"`
	ChipValue        *uint64 `protobuf:"varint,2,opt,name=chip_value,json=chipValue" json:"chip_value,omitempty"`
	AndroidCheat     *bool   `protobuf:"varint,3,opt,name=android_cheat,json=androidCheat" json:"android_cheat,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_UserChip) Reset()                    { *m = CMD_C_UserChip{} }
func (m *CMD_C_UserChip) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_UserChip) ProtoMessage()               {}
func (*CMD_C_UserChip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CMD_C_UserChip) GetChipIndex() uint32 {
	if m != nil && m.ChipIndex != nil {
		return *m.ChipIndex
	}
	return 0
}

func (m *CMD_C_UserChip) GetChipValue() uint64 {
	if m != nil && m.ChipValue != nil {
		return *m.ChipValue
	}
	return 0
}

func (m *CMD_C_UserChip) GetAndroidCheat() bool {
	if m != nil && m.AndroidCheat != nil {
		return *m.AndroidCheat
	}
	return false
}

type CMD_S_UserChipNotify struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChipIndex        *uint32 `protobuf:"varint,2,opt,name=chip_index,json=chipIndex" json:"chip_index,omitempty"`
	ChipValue        *uint32 `protobuf:"varint,3,opt,name=chip_value,json=chipValue" json:"chip_value,omitempty"`
	IsAndroid        *bool   `protobuf:"varint,4,opt,name=is_android,json=isAndroid" json:"is_android,omitempty"`
	AndroidCheat     *bool   `protobuf:"varint,5,opt,name=android_cheat,json=androidCheat" json:"android_cheat,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_UserChipNotify) Reset()                    { *m = CMD_S_UserChipNotify{} }
func (m *CMD_S_UserChipNotify) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UserChipNotify) ProtoMessage()               {}
func (*CMD_S_UserChipNotify) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CMD_S_UserChipNotify) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_UserChipNotify) GetChipIndex() uint32 {
	if m != nil && m.ChipIndex != nil {
		return *m.ChipIndex
	}
	return 0
}

func (m *CMD_S_UserChipNotify) GetChipValue() uint32 {
	if m != nil && m.ChipValue != nil {
		return *m.ChipValue
	}
	return 0
}

func (m *CMD_S_UserChipNotify) GetIsAndroid() bool {
	if m != nil && m.IsAndroid != nil {
		return *m.IsAndroid
	}
	return false
}

func (m *CMD_S_UserChipNotify) GetAndroidCheat() bool {
	if m != nil && m.AndroidCheat != nil {
		return *m.AndroidCheat
	}
	return false
}

type CMD_C_ContinueChip struct {
	LlDownTotal      []uint64 `protobuf:"varint,1,rep,name=llDownTotal" json:"llDownTotal,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_C_ContinueChip) Reset()                    { *m = CMD_C_ContinueChip{} }
func (m *CMD_C_ContinueChip) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_ContinueChip) ProtoMessage()               {}
func (*CMD_C_ContinueChip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CMD_C_ContinueChip) GetLlDownTotal() []uint64 {
	if m != nil {
		return m.LlDownTotal
	}
	return nil
}

// 续投成功
type CMD_S_ContinueChipResult struct {
	Success          *bool    `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	UserId           *uint32  `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	DownTotal        []uint64 `protobuf:"varint,3,rep,name=down_total,json=downTotal" json:"down_total,omitempty"`
	IsAndroid        *bool    `protobuf:"varint,4,opt,name=is_android,json=isAndroid" json:"is_android,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_S_ContinueChipResult) Reset()                    { *m = CMD_S_ContinueChipResult{} }
func (m *CMD_S_ContinueChipResult) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_ContinueChipResult) ProtoMessage()               {}
func (*CMD_S_ContinueChipResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CMD_S_ContinueChipResult) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *CMD_S_ContinueChipResult) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_ContinueChipResult) GetDownTotal() []uint64 {
	if m != nil {
		return m.DownTotal
	}
	return nil
}

func (m *CMD_S_ContinueChipResult) GetIsAndroid() bool {
	if m != nil && m.IsAndroid != nil {
		return *m.IsAndroid
	}
	return false
}

// 游戏的数据
type CMD_S_GameInfo struct {
	GameStatus       *uint32 `protobuf:"varint,1,opt,name=game_status,json=gameStatus" json:"game_status,omitempty"`
	TimerValue       *uint32 `protobuf:"varint,2,opt,name=timer_value,json=timerValue" json:"timer_value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_GameInfo) Reset()                    { *m = CMD_S_GameInfo{} }
func (m *CMD_S_GameInfo) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GameInfo) ProtoMessage()               {}
func (*CMD_S_GameInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CMD_S_GameInfo) GetGameStatus() uint32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *CMD_S_GameInfo) GetTimerValue() uint32 {
	if m != nil && m.TimerValue != nil {
		return *m.TimerValue
	}
	return 0
}

// 游戏的数据
type CMD_S_Card_Data struct {
	CardData         []uint32 `protobuf:"varint,1,rep,name=card_data,json=cardData" json:"card_data,omitempty"`
	Mutil            *uint32  `protobuf:"varint,2,opt,name=mutil" json:"mutil,omitempty"`
	Score            *int64   `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_S_Card_Data) Reset()                    { *m = CMD_S_Card_Data{} }
func (m *CMD_S_Card_Data) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_Card_Data) ProtoMessage()               {}
func (*CMD_S_Card_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CMD_S_Card_Data) GetCardData() []uint32 {
	if m != nil {
		return m.CardData
	}
	return nil
}

func (m *CMD_S_Card_Data) GetMutil() uint32 {
	if m != nil && m.Mutil != nil {
		return *m.Mutil
	}
	return 0
}

func (m *CMD_S_Card_Data) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 游戏结果排名
type CMD_S_RankInfo struct {
	Rank             *uint32 `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	RankResult       *uint64 `protobuf:"varint,2,opt,name=rank_result,json=rankResult" json:"rank_result,omitempty"`
	RankNicname      []byte  `protobuf:"bytes,3,opt,name=rank_nicname,json=rankNicname" json:"rank_nicname,omitempty"`
	UserId           *uint32 `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_RankInfo) Reset()                    { *m = CMD_S_RankInfo{} }
func (m *CMD_S_RankInfo) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_RankInfo) ProtoMessage()               {}
func (*CMD_S_RankInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CMD_S_RankInfo) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *CMD_S_RankInfo) GetRankResult() uint64 {
	if m != nil && m.RankResult != nil {
		return *m.RankResult
	}
	return 0
}

func (m *CMD_S_RankInfo) GetRankNicname() []byte {
	if m != nil {
		return m.RankNicname
	}
	return nil
}

func (m *CMD_S_RankInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type CMD_S_GameEnd struct {
	BankerResult     *int64             `protobuf:"varint,1,opt,name=banker_result,json=bankerResult" json:"banker_result,omitempty"`
	BankerScore      *int64             `protobuf:"varint,2,opt,name=banker_score,json=bankerScore" json:"banker_score,omitempty"`
	AreaTotalResult  []int64            `protobuf:"varint,3,rep,name=area_total_result,json=areaTotalResult" json:"area_total_result,omitempty"`
	AreaMyChips      *int64             `protobuf:"varint,4,opt,name=area_my_chips,json=areaMyChips" json:"area_my_chips,omitempty"`
	BankerTimes      *uint32            `protobuf:"varint,5,opt,name=banker_times,json=bankerTimes" json:"banker_times,omitempty"`
	SendCardData     []*CMD_S_Card_Data `protobuf:"bytes,6,rep,name=send_card_data,json=sendCardData" json:"send_card_data,omitempty"`
	CardType         []uint32           `protobuf:"varint,7,rep,name=card_type,json=cardType" json:"card_type,omitempty"`
	PlayerWin        []bool             `protobuf:"varint,8,rep,name=player_win,json=playerWin" json:"player_win,omitempty"`
	SendRankInfo     []*CMD_S_RankInfo  `protobuf:"bytes,9,rep,name=send_rank_info,json=sendRankInfo" json:"send_rank_info,omitempty"`
	IsBanker         *bool              `protobuf:"varint,10,opt,name=isBanker" json:"isBanker,omitempty"`
	AreaAllChips     *int64             `protobuf:"varint,11,opt,name=area_all_chips,json=areaAllChips" json:"area_all_chips,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CMD_S_GameEnd) Reset()                    { *m = CMD_S_GameEnd{} }
func (m *CMD_S_GameEnd) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GameEnd) ProtoMessage()               {}
func (*CMD_S_GameEnd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CMD_S_GameEnd) GetBankerResult() int64 {
	if m != nil && m.BankerResult != nil {
		return *m.BankerResult
	}
	return 0
}

func (m *CMD_S_GameEnd) GetBankerScore() int64 {
	if m != nil && m.BankerScore != nil {
		return *m.BankerScore
	}
	return 0
}

func (m *CMD_S_GameEnd) GetAreaTotalResult() []int64 {
	if m != nil {
		return m.AreaTotalResult
	}
	return nil
}

func (m *CMD_S_GameEnd) GetAreaMyChips() int64 {
	if m != nil && m.AreaMyChips != nil {
		return *m.AreaMyChips
	}
	return 0
}

func (m *CMD_S_GameEnd) GetBankerTimes() uint32 {
	if m != nil && m.BankerTimes != nil {
		return *m.BankerTimes
	}
	return 0
}

func (m *CMD_S_GameEnd) GetSendCardData() []*CMD_S_Card_Data {
	if m != nil {
		return m.SendCardData
	}
	return nil
}

func (m *CMD_S_GameEnd) GetCardType() []uint32 {
	if m != nil {
		return m.CardType
	}
	return nil
}

func (m *CMD_S_GameEnd) GetPlayerWin() []bool {
	if m != nil {
		return m.PlayerWin
	}
	return nil
}

func (m *CMD_S_GameEnd) GetSendRankInfo() []*CMD_S_RankInfo {
	if m != nil {
		return m.SendRankInfo
	}
	return nil
}

func (m *CMD_S_GameEnd) GetIsBanker() bool {
	if m != nil && m.IsBanker != nil {
		return *m.IsBanker
	}
	return false
}

func (m *CMD_S_GameEnd) GetAreaAllChips() int64 {
	if m != nil && m.AreaAllChips != nil {
		return *m.AreaAllChips
	}
	return 0
}

type CMD_S_SysMessage struct {
	SysType          *uint32 `protobuf:"varint,1,opt,name=sys_type,json=sysType" json:"sys_type,omitempty"`
	SysMessage       []byte  `protobuf:"bytes,2,opt,name=sys_message,json=sysMessage" json:"sys_message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_SysMessage) Reset()                    { *m = CMD_S_SysMessage{} }
func (m *CMD_S_SysMessage) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SysMessage) ProtoMessage()               {}
func (*CMD_S_SysMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CMD_S_SysMessage) GetSysType() uint32 {
	if m != nil && m.SysType != nil {
		return *m.SysType
	}
	return 0
}

func (m *CMD_S_SysMessage) GetSysMessage() []byte {
	if m != nil {
		return m.SysMessage
	}
	return nil
}

// 上桌玩家
type CMD_S_TableUeser struct {
	ChairId          []uint32 `protobuf:"varint,1,rep,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_S_TableUeser) Reset()                    { *m = CMD_S_TableUeser{} }
func (m *CMD_S_TableUeser) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_TableUeser) ProtoMessage()               {}
func (*CMD_S_TableUeser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CMD_S_TableUeser) GetChairId() []uint32 {
	if m != nil {
		return m.ChairId
	}
	return nil
}

type CMD_S_UserStandUp struct {
	ChairId          *uint32 `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	GameId           *uint32 `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	UserId           *uint32 `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_UserStandUp) Reset()                    { *m = CMD_S_UserStandUp{} }
func (m *CMD_S_UserStandUp) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UserStandUp) ProtoMessage()               {}
func (*CMD_S_UserStandUp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CMD_S_UserStandUp) GetChairId() uint32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_UserStandUp) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *CMD_S_UserStandUp) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type CMD_SUB_C_ONLINE_TOTAL struct {
	ServerKind       *uint32 `protobuf:"varint,1,opt,name=server_kind,json=serverKind" json:"server_kind,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SUB_C_ONLINE_TOTAL) Reset()                    { *m = CMD_SUB_C_ONLINE_TOTAL{} }
func (m *CMD_SUB_C_ONLINE_TOTAL) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_C_ONLINE_TOTAL) ProtoMessage()               {}
func (*CMD_SUB_C_ONLINE_TOTAL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CMD_SUB_C_ONLINE_TOTAL) GetServerKind() uint32 {
	if m != nil && m.ServerKind != nil {
		return *m.ServerKind
	}
	return 0
}

type CMD_SUB_S_ONLINE_TOTAL struct {
	ServerKind       *uint32 `protobuf:"varint,1,opt,name=server_kind,json=serverKind" json:"server_kind,omitempty"`
	OnlineTotal      *uint32 `protobuf:"varint,2,opt,name=online_total,json=onlineTotal" json:"online_total,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SUB_S_ONLINE_TOTAL) Reset()                    { *m = CMD_SUB_S_ONLINE_TOTAL{} }
func (m *CMD_SUB_S_ONLINE_TOTAL) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_S_ONLINE_TOTAL) ProtoMessage()               {}
func (*CMD_SUB_S_ONLINE_TOTAL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CMD_SUB_S_ONLINE_TOTAL) GetServerKind() uint32 {
	if m != nil && m.ServerKind != nil {
		return *m.ServerKind
	}
	return 0
}

func (m *CMD_SUB_S_ONLINE_TOTAL) GetOnlineTotal() uint32 {
	if m != nil && m.OnlineTotal != nil {
		return *m.OnlineTotal
	}
	return 0
}

type CMD_SUB_C_ROBBANK struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_SUB_C_ROBBANK) Reset()                    { *m = CMD_SUB_C_ROBBANK{} }
func (m *CMD_SUB_C_ROBBANK) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_C_ROBBANK) ProtoMessage()               {}
func (*CMD_SUB_C_ROBBANK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type CMD_SUB_S_AndroidUpdateChip struct {
	CheatMode        *bool   `protobuf:"varint,1,opt,name=cheat_mode,json=cheatMode" json:"cheat_mode,omitempty"`
	ChipIndex        *uint32 `protobuf:"varint,2,opt,name=chip_index,json=chipIndex" json:"chip_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SUB_S_AndroidUpdateChip) Reset()                    { *m = CMD_SUB_S_AndroidUpdateChip{} }
func (m *CMD_SUB_S_AndroidUpdateChip) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_S_AndroidUpdateChip) ProtoMessage()               {}
func (*CMD_SUB_S_AndroidUpdateChip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CMD_SUB_S_AndroidUpdateChip) GetCheatMode() bool {
	if m != nil && m.CheatMode != nil {
		return *m.CheatMode
	}
	return false
}

func (m *CMD_SUB_S_AndroidUpdateChip) GetChipIndex() uint32 {
	if m != nil && m.ChipIndex != nil {
		return *m.ChipIndex
	}
	return 0
}

// 取消下注结果
type CMD_S_CancelChip struct {
	Succsce          *bool   `protobuf:"varint,1,opt,name=succsce" json:"succsce,omitempty"`
	ChairId          *int32  `protobuf:"varint,2,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	DownTotal        []int64 `protobuf:"varint,3,rep,name=down_total,json=downTotal" json:"down_total,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_CancelChip) Reset()                    { *m = CMD_S_CancelChip{} }
func (m *CMD_S_CancelChip) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CancelChip) ProtoMessage()               {}
func (*CMD_S_CancelChip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CMD_S_CancelChip) GetSuccsce() bool {
	if m != nil && m.Succsce != nil {
		return *m.Succsce
	}
	return false
}

func (m *CMD_S_CancelChip) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_CancelChip) GetDownTotal() []int64 {
	if m != nil {
		return m.DownTotal
	}
	return nil
}

type CMD_S_UpdateChip struct {
	ChipScore        []int64 `protobuf:"varint,1,rep,name=chip_score,json=chipScore" json:"chip_score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_UpdateChip) Reset()                    { *m = CMD_S_UpdateChip{} }
func (m *CMD_S_UpdateChip) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UpdateChip) ProtoMessage()               {}
func (*CMD_S_UpdateChip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CMD_S_UpdateChip) GetChipScore() []int64 {
	if m != nil {
		return m.ChipScore
	}
	return nil
}

func init() {
	proto.RegisterType((*CMD_S_UserDownInfo)(nil), "CMD_NN.CMD_S_UserDownInfo")
	proto.RegisterType((*CMD_S_History)(nil), "CMD_NN.CMD_S_History")
	proto.RegisterType((*CMD_S_Game_Scene)(nil), "CMD_NN.CMD_S_Game_Scene")
	proto.RegisterType((*CMD_C_RequestBanker)(nil), "CMD_NN.CMD_C_RequestBanker")
	proto.RegisterType((*CMD_WaitBankerUserInfo)(nil), "CMD_NN.CMD_WaitBankerUserInfo")
	proto.RegisterType((*CMD_S_RequestBanker)(nil), "CMD_NN.CMD_S_RequestBanker")
	proto.RegisterType((*CMD_S_UpdateBanker)(nil), "CMD_NN.CMD_S_UpdateBanker")
	proto.RegisterType((*CMD_C_UserChip)(nil), "CMD_NN.CMD_C_UserChip")
	proto.RegisterType((*CMD_S_UserChipNotify)(nil), "CMD_NN.CMD_S_UserChipNotify")
	proto.RegisterType((*CMD_C_ContinueChip)(nil), "CMD_NN.CMD_C_ContinueChip")
	proto.RegisterType((*CMD_S_ContinueChipResult)(nil), "CMD_NN.CMD_S_ContinueChipResult")
	proto.RegisterType((*CMD_S_GameInfo)(nil), "CMD_NN.CMD_S_GameInfo")
	proto.RegisterType((*CMD_S_Card_Data)(nil), "CMD_NN.CMD_S_Card_Data")
	proto.RegisterType((*CMD_S_RankInfo)(nil), "CMD_NN.CMD_S_RankInfo")
	proto.RegisterType((*CMD_S_GameEnd)(nil), "CMD_NN.CMD_S_GameEnd")
	proto.RegisterType((*CMD_S_SysMessage)(nil), "CMD_NN.CMD_S_SysMessage")
	proto.RegisterType((*CMD_S_TableUeser)(nil), "CMD_NN.CMD_S_TableUeser")
	proto.RegisterType((*CMD_S_UserStandUp)(nil), "CMD_NN.CMD_S_UserStandUp")
	proto.RegisterType((*CMD_SUB_C_ONLINE_TOTAL)(nil), "CMD_NN.CMD_SUB_C_ONLINE_TOTAL")
	proto.RegisterType((*CMD_SUB_S_ONLINE_TOTAL)(nil), "CMD_NN.CMD_SUB_S_ONLINE_TOTAL")
	proto.RegisterType((*CMD_SUB_C_ROBBANK)(nil), "CMD_NN.CMD_SUB_C_ROBBANK")
	proto.RegisterType((*CMD_SUB_S_AndroidUpdateChip)(nil), "CMD_NN.CMD_SUB_S_AndroidUpdateChip")
	proto.RegisterType((*CMD_S_CancelChip)(nil), "CMD_NN.CMD_S_CancelChip")
	proto.RegisterType((*CMD_S_UpdateChip)(nil), "CMD_NN.CMD_S_UpdateChip")
}

func init() { proto.RegisterFile("CMD_NN_Game.CMD", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x5f, 0x6f, 0xdb, 0xc8,
	0x11, 0x07, 0x45, 0xcb, 0xa2, 0x46, 0x92, 0xed, 0xd0, 0x4e, 0xc2, 0xd4, 0x75, 0xad, 0xb0, 0x41,
	0xa1, 0x16, 0x48, 0x8a, 0x16, 0x45, 0x81, 0xa2, 0xed, 0x83, 0xad, 0xa4, 0x8d, 0x1b, 0x5b, 0x29,
	0x28, 0xbb, 0x01, 0xda, 0x02, 0xec, 0x9a, 0x5a, 0xc7, 0x5b, 0xf3, 0x5f, 0xb9, 0x94, 0x5c, 0x3d,
	0xf6, 0xb9, 0x1f, 0xe0, 0x9e, 0xef, 0x23, 0xdc, 0x87, 0xb8, 0xfb, 0x4a, 0xf7, 0x76, 0x38, 0xcc,
	0xcc, 0x52, 0xa4, 0xce, 0xc9, 0xe5, 0x02, 0xdc, 0xcb, 0x3d, 0x49, 0xfb, 0xdb, 0xd9, 0x9d, 0x99,
	0xdf, 0xfc, 0x5b, 0xc2, 0xbd, 0xf1, 0xd9, 0xf3, 0x70, 0x32, 0x09, 0xff, 0x2c, 0x12, 0xf9, 0x2c,
	0x2f, 0xb2, 0x32, 0x73, 0x37, 0x19, 0xf2, 0xbf, 0xb4, 0xc0, 0xc5, 0xbf, 0xd3, 0xf0, 0x42, 0xcb,
	0xe2, 0x79, 0x76, 0x9b, 0x9e, 0xa4, 0x57, 0x99, 0xfb, 0x08, 0x9c, 0xe8, 0x5a, 0xa8, 0x22, 0x54,
	0x33, 0xcf, 0x1a, 0x5a, 0xa3, 0x41, 0xd0, 0xa1, 0xf5, 0xc9, 0xcc, 0x7d, 0x08, 0x9d, 0xb7, 0x22,
	0x91, 0xb8, 0xd3, 0xa2, 0x9d, 0x4d, 0x5c, 0xf2, 0xc6, 0x5c, 0x4b, 0x3a, 0x62, 0xf3, 0x06, 0x2e,
	0x4f, 0x66, 0xee, 0x1e, 0xb4, 0x75, 0x94, 0x15, 0xd2, 0xdb, 0x18, 0x5a, 0xa3, 0x8d, 0x80, 0x17,
	0xee, 0x01, 0xc0, 0x2c, 0xbb, 0x4d, 0x43, 0xde, 0x6a, 0x0f, 0xed, 0xd1, 0x46, 0xd0, 0x45, 0x64,
	0x4a, 0xdb, 0xfb, 0xd0, 0x4d, 0x55, 0x74, 0x13, 0xa6, 0x22, 0x91, 0xde, 0xe6, 0xd0, 0x1a, 0xf5,
	0x03, 0x07, 0x81, 0x89, 0x48, 0x24, 0xaa, 0x5a, 0xa8, 0x3c, 0x8c, 0xe5, 0xc2, 0xeb, 0xb0, 0xaa,
	0x85, 0xca, 0x4f, 0xe5, 0xc2, 0xfd, 0x39, 0xec, 0xdc, 0xa8, 0x38, 0x0e, 0xf3, 0x22, 0xbb, 0x14,
	0x97, 0x2a, 0x56, 0xe5, 0xd2, 0x73, 0x86, 0xd6, 0xa8, 0x1d, 0x6c, 0x23, 0xfe, 0xd7, 0x1a, 0xf6,
	0x1f, 0xc3, 0x80, 0x1d, 0x7f, 0xa9, 0x74, 0x99, 0x15, 0x4b, 0x77, 0x07, 0xec, 0x5b, 0x95, 0x7a,
	0xd6, 0xd0, 0x1e, 0x39, 0x01, 0xfe, 0xf5, 0xbf, 0xd8, 0x84, 0x1d, 0x96, 0x41, 0xe6, 0xc2, 0x69,
	0x24, 0x53, 0xe9, 0x1e, 0x42, 0xef, 0x52, 0xa4, 0x37, 0xb2, 0x60, 0xd3, 0x2c, 0x32, 0x0d, 0x18,
	0x22, 0xe3, 0x7e, 0x06, 0xdb, 0x46, 0x60, 0x45, 0x21, 0x13, 0x35, 0x60, 0x78, 0x6c, 0x88, 0x7c,
	0x02, 0x5b, 0x46, 0x6e, 0x9d, 0xb6, 0x3e, 0xa3, 0x17, 0x4c, 0xde, 0x63, 0x30, 0xeb, 0xb0, 0x54,
	0x89, 0xd4, 0xc4, 0xe1, 0x20, 0x30, 0x26, 0x9c, 0x23, 0xd4, 0x10, 0xa9, 0xb8, 0x44, 0x9a, 0x8d,
	0x08, 0xb3, 0x39, 0x82, 0x9d, 0x44, 0xa5, 0xe1, 0x9a, 0xd8, 0x26, 0x89, 0x6d, 0x25, 0x2a, 0x3d,
	0x5e, 0x97, 0x14, 0x79, 0x5e, 0x49, 0x46, 0xd9, 0x3c, 0x2d, 0x0d, 0xc7, 0x5b, 0x22, 0xcf, 0x59,
	0x72, 0x8c, 0xa8, 0xfb, 0x14, 0x76, 0x9b, 0x92, 0x95, 0xaf, 0xce, 0xd0, 0x1e, 0x0d, 0x82, 0x9d,
	0x5a, 0xd8, 0xb8, 0x7b, 0x00, 0x40, 0x79, 0xa3, 0x4b, 0x51, 0x4a, 0xaf, 0x4b, 0x57, 0x76, 0x11,
	0x99, 0x22, 0x80, 0x6c, 0x24, 0xcb, 0x90, 0x32, 0xe2, 0xdf, 0xb2, 0x2c, 0xb3, 0xd4, 0x03, 0x4a,
	0x89, 0x7e, 0xb2, 0xc4, 0xac, 0xfc, 0x0b, 0x61, 0xe8, 0x6a, 0x99, 0x95, 0x22, 0xae, 0x64, 0x7a,
	0x24, 0xd3, 0x23, 0xcc, 0x88, 0xec, 0x43, 0xf7, 0x5a, 0x69, 0x63, 0x79, 0x9f, 0xd4, 0x38, 0xd7,
	0x4a, 0xb3, 0xcd, 0xbf, 0x84, 0xce, 0x35, 0x87, 0xdb, 0x1b, 0x0c, 0xed, 0x51, 0xef, 0xd7, 0xf7,
	0x9f, 0x71, 0x21, 0x3c, 0x5b, 0xcb, 0x85, 0xa0, 0x92, 0xc2, 0x68, 0x97, 0x4a, 0x26, 0x45, 0xa8,
	0xd2, 0x99, 0xfc, 0xaf, 0xb7, 0x45, 0xf7, 0x01, 0x41, 0x27, 0x88, 0x90, 0x00, 0x59, 0x74, 0x99,
	0x89, 0x62, 0xe6, 0x6d, 0x1b, 0x01, 0x84, 0x8e, 0x11, 0xa1, 0x7c, 0xc1, 0x3f, 0xc6, 0xa2, 0x1d,
	0xa2, 0x07, 0x08, 0x62, 0x9b, 0x46, 0xb0, 0x53, 0x8a, 0xcb, 0x58, 0x72, 0x1a, 0xb0, 0xd4, 0x3d,
	0x66, 0x9c, 0x70, 0x4c, 0x04, 0x96, 0x7c, 0x02, 0x8c, 0xd4, 0x64, 0xbb, 0x74, 0x5b, 0x9f, 0xd0,
	0x8a, 0xe8, 0x43, 0xe8, 0x45, 0xd7, 0x2a, 0x0f, 0x17, 0x22, 0x9e, 0x4b, 0xed, 0xed, 0x12, 0x45,
	0x80, 0xd0, 0xdf, 0x08, 0x69, 0x24, 0xde, 0x95, 0x88, 0xa8, 0x90, 0xf7, 0x9a, 0x89, 0xf7, 0x27,
	0x11, 0x61, 0x39, 0xd7, 0x69, 0x4c, 0x52, 0xf3, 0x22, 0xf6, 0xee, 0x53, 0xae, 0x0f, 0x6a, 0xb1,
	0x8b, 0x22, 0x76, 0x7d, 0x18, 0x90, 0xba, 0x79, 0x1e, 0xc6, 0x2a, 0x51, 0xa5, 0xf7, 0x80, 0xea,
	0x8d, 0x6c, 0xb8, 0xc8, 0x4f, 0x11, 0xf2, 0x7f, 0x03, 0xbb, 0xc8, 0xef, 0x38, 0x0c, 0xe4, 0x7f,
	0xe6, 0x52, 0x97, 0x9c, 0x19, 0x98, 0x12, 0x75, 0x06, 0x51, 0x25, 0x39, 0x41, 0x77, 0x95, 0x38,
	0xfe, 0xa7, 0x16, 0x3c, 0xc0, 0x63, 0x6f, 0x84, 0x32, 0x27, 0xa8, 0x26, 0xb0, 0x3f, 0x35, 0x7a,
	0x8d, 0xb5, 0xd6, 0x6b, 0xf6, 0xa1, 0x4b, 0x1b, 0x54, 0x9b, 0x2d, 0x6e, 0x1b, 0x08, 0x54, 0x6d,
	0xa3, 0xf2, 0xd8, 0x74, 0xa8, 0x2b, 0xf6, 0xf5, 0x00, 0x80, 0x4e, 0xd5, 0x6d, 0xca, 0x0e, 0xe8,
	0x1e, 0xae, 0x89, 0x47, 0xe0, 0xac, 0x38, 0x68, 0xd3, 0x9d, 0x74, 0xcf, 0x45, 0x11, 0xfb, 0x5f,
	0x59, 0xec, 0xda, 0xf4, 0xa3, 0x5c, 0x6b, 0xda, 0xdf, 0x5a, 0xb3, 0xff, 0xf7, 0xc6, 0xfe, 0x5b,
	0xa1, 0x4a, 0xcf, 0xa6, 0x14, 0xfd, 0x49, 0x33, 0x45, 0xef, 0x72, 0xc1, 0xfe, 0x21, 0xee, 0xfe,
	0x18, 0xba, 0x49, 0x96, 0xca, 0x52, 0x14, 0xcb, 0x92, 0xbc, 0x68, 0x07, 0x35, 0xd0, 0xdc, 0x5d,
	0x90, 0x1b, 0x76, 0xbd, 0xbb, 0x40, 0xe2, 0xae, 0x8a, 0xec, 0x92, 0x92, 0x90, 0x5a, 0x83, 0x13,
	0x38, 0x08, 0xa0, 0x1a, 0x24, 0x40, 0xe1, 0xa6, 0x88, 0xb8, 0x19, 0x38, 0x41, 0x07, 0xd7, 0x47,
	0x51, 0xe9, 0x7f, 0xd2, 0x5a, 0x0d, 0x90, 0x7c, 0x26, 0x4a, 0x69, 0x1c, 0xfc, 0x41, 0x76, 0xc9,
	0xbb, 0x85, 0xb1, 0xf9, 0xdd, 0x0a, 0xa3, 0xf3, 0x8e, 0xc2, 0xf0, 0x35, 0x6c, 0x71, 0xd2, 0x53,
	0x01, 0x5f, 0xab, 0x1c, 0x93, 0x82, 0x4a, 0x85, 0x7b, 0x09, 0x27, 0x6e, 0x17, 0x11, 0x6e, 0x25,
	0xd5, 0x36, 0x15, 0x2e, 0xb1, 0xb1, 0xc1, 0xdb, 0x54, 0xb7, 0xee, 0x4f, 0x61, 0x20, 0xd2, 0x59,
	0x91, 0xa9, 0x59, 0x18, 0x5d, 0x4b, 0x51, 0x12, 0x11, 0x4e, 0xd0, 0x37, 0xe0, 0x18, 0x31, 0xff,
	0x33, 0x0b, 0xf6, 0xea, 0x79, 0x8e, 0x5a, 0x27, 0x59, 0xa9, 0xae, 0x96, 0xef, 0xaf, 0x98, 0x75,
	0xa3, 0x5a, 0xdf, 0x6e, 0x94, 0x5d, 0x6f, 0xb3, 0x51, 0x07, 0x00, 0x4a, 0x87, 0xc6, 0x04, 0xa2,
	0xdd, 0x09, 0xba, 0x4a, 0x1f, 0x31, 0x70, 0xd7, 0xe6, 0xf6, 0x3b, 0x6c, 0xfe, 0x2d, 0x67, 0xd0,
	0x38, 0x1c, 0x67, 0x69, 0xa9, 0xd2, 0xb9, 0x24, 0xb2, 0x86, 0xd0, 0x8b, 0x63, 0x6c, 0xfd, 0xe7,
	0xd8, 0x4b, 0x69, 0x2c, 0x6f, 0x04, 0x4d, 0xc8, 0xff, 0xbf, 0x05, 0x1e, 0xfb, 0xda, 0x3c, 0x18,
	0x48, 0x3d, 0x8f, 0x4b, 0xd7, 0x83, 0x8e, 0x9e, 0x47, 0x91, 0xd4, 0xda, 0x54, 0x5f, 0xb5, 0x7c,
	0x7f, 0xed, 0x55, 0x2f, 0x12, 0x6a, 0xde, 0x54, 0x7c, 0xe6, 0x45, 0x42, 0xea, 0x3e, 0xe0, 0xaa,
	0x1f, 0x70, 0xb8, 0xf9, 0xad, 0x40, 0x4d, 0xea, 0x10, 0x7a, 0xab, 0x89, 0x37, 0xd7, 0x86, 0x76,
	0xa8, 0x46, 0xde, 0x5c, 0xf3, 0x70, 0x49, 0x64, 0xd1, 0x88, 0x38, 0x0d, 0x97, 0x44, 0x16, 0xc4,
	0xae, 0xff, 0x77, 0xd8, 0x36, 0x0e, 0xe2, 0x00, 0x79, 0x2e, 0x4a, 0x81, 0x75, 0x1a, 0xe1, 0x62,
	0x26, 0x4a, 0x41, 0xa4, 0x0c, 0x02, 0x07, 0x01, 0xda, 0xdc, 0x83, 0x76, 0x32, 0x2f, 0x55, 0x6c,
	0xae, 0xe2, 0x45, 0xfd, 0xfe, 0xb2, 0xa9, 0xe8, 0x79, 0xe1, 0xff, 0xcf, 0xaa, 0x0c, 0x0e, 0x44,
	0x7a, 0x43, 0x06, 0xbb, 0xb0, 0x51, 0x88, 0xf4, 0xc6, 0x58, 0x4a, 0xff, 0xd1, 0x46, 0xfc, 0x0d,
	0x0b, 0xa2, 0xd5, 0x64, 0x25, 0x20, 0x64, 0x88, 0x7e, 0x0c, 0x7d, 0x12, 0x48, 0x55, 0x44, 0xa5,
	0x6e, 0x53, 0x2d, 0xd0, 0xa1, 0x09, 0x43, 0x4d, 0xc6, 0x37, 0x9a, 0x8c, 0xfb, 0x9f, 0xdb, 0xd5,
	0x23, 0x0c, 0x49, 0x7b, 0x91, 0x52, 0xc2, 0x98, 0xe2, 0x32, 0x0a, 0x2d, 0xb2, 0xd9, 0x54, 0x60,
	0xad, 0x72, 0xad, 0x94, 0x5b, 0x24, 0xb3, 0x56, 0xca, 0xbf, 0x80, 0x7b, 0xa2, 0x90, 0x82, 0x63,
	0x59, 0xdd, 0x85, 0x21, 0xb5, 0x83, 0x6d, 0xdc, 0xa0, 0x90, 0x9a, 0xeb, 0x7c, 0x18, 0x90, 0x6c,
	0xb2, 0x0c, 0x31, 0xb1, 0xb5, 0x19, 0x00, 0x3d, 0x04, 0xcf, 0x96, 0x98, 0x53, 0xfa, 0x4e, 0x83,
	0x69, 0xdf, 0x6d, 0x30, 0x7f, 0x84, 0x2d, 0x2d, 0xd3, 0x59, 0x58, 0x87, 0x67, 0x93, 0xfa, 0xf7,
	0xc3, 0xf5, 0x27, 0xc6, 0x2a, 0x94, 0x41, 0x1f, 0xc5, 0xc7, 0x55, 0xec, 0xaa, 0xc0, 0x96, 0xcb,
	0x5c, 0x7a, 0x9d, 0x3a, 0xb0, 0xe7, 0xcb, 0x9c, 0xca, 0x2c, 0x8f, 0xc5, 0x12, 0x07, 0x83, 0x4a,
	0xe9, 0x89, 0xe5, 0x04, 0x5d, 0x46, 0xde, 0xa8, 0xd4, 0xfd, 0x83, 0x51, 0x4d, 0x81, 0x50, 0xe9,
	0x55, 0xe6, 0x75, 0x49, 0xf5, 0x83, 0x75, 0xd5, 0x55, 0xa0, 0x59, 0xf3, 0x2a, 0xec, 0x3f, 0x02,
	0x47, 0x69, 0xee, 0xdb, 0x1e, 0x70, 0xe7, 0xaf, 0xd6, 0xd8, 0x12, 0x89, 0x1b, 0x11, 0xc7, 0x86,
	0x9c, 0x1e, 0x07, 0x04, 0xd1, 0xa3, 0x38, 0x26, 0x76, 0xfc, 0x49, 0xf5, 0x4e, 0x9e, 0x2e, 0xf5,
	0x99, 0xd4, 0x5a, 0xbc, 0xa5, 0xa1, 0xa9, 0x97, 0x9a, 0xdd, 0x31, 0x9f, 0x10, 0x7a, 0xa9, 0xc9,
	0x9b, 0x43, 0xe8, 0xe1, 0x56, 0xc2, 0x92, 0x66, 0x4c, 0x83, 0x5e, 0x9d, 0xf5, 0x9f, 0x56, 0xf7,
	0x9d, 0xd3, 0x03, 0x48, 0x9a, 0x19, 0xd4, 0xf8, 0x24, 0xb1, 0x1b, 0x9f, 0x24, 0xfe, 0xbf, 0xf8,
	0x0b, 0x87, 0x7b, 0xde, 0xb4, 0x14, 0xe9, 0xec, 0x22, 0xff, 0x5e, 0x3f, 0x61, 0xfc, 0xdf, 0xf1,
	0x4b, 0x64, 0x7a, 0x71, 0x1c, 0x8e, 0xc3, 0xd7, 0x93, 0xd3, 0x93, 0xc9, 0x8b, 0xf0, 0xfc, 0xf5,
	0xf9, 0xd1, 0x29, 0xf9, 0x22, 0x8b, 0x85, 0x2c, 0xc2, 0x1b, 0x95, 0x56, 0x9a, 0x80, 0xa1, 0x57,
	0x2a, 0x9d, 0xf9, 0xff, 0xac, 0x8f, 0x4e, 0x3f, 0xee, 0x28, 0x26, 0x5d, 0x96, 0xc6, 0x2a, 0x95,
	0xa6, 0x25, 0xb1, 0xb1, 0x3d, 0xc6, 0xb8, 0x07, 0xee, 0x1a, 0xd7, 0xc9, 0xb0, 0xe0, 0xf5, 0xf1,
	0xf1, 0xd1, 0xe4, 0x95, 0xff, 0x0f, 0xd8, 0xaf, 0x55, 0x9a, 0xfe, 0xc4, 0xd3, 0xb9, 0x1e, 0x43,
	0x52, 0x94, 0x61, 0x92, 0xcd, 0x64, 0xf5, 0x36, 0x21, 0xe4, 0x2c, 0x9b, 0xc9, 0x0f, 0x0c, 0x04,
	0xff, 0xaa, 0x8a, 0xcd, 0x58, 0xa4, 0x91, 0xa4, 0x04, 0xa8, 0x9a, 0xad, 0x8e, 0x64, 0xb3, 0xd9,
	0xea, 0x48, 0xae, 0x45, 0xa1, 0x45, 0x2f, 0x92, 0x55, 0x14, 0xee, 0xb6, 0x5b, 0xbb, 0xd1, 0x6e,
	0xfd, 0x5f, 0x55, 0x7a, 0xbe, 0x69, 0xb9, 0xca, 0x4d, 0xd9, 0x5b, 0x7c, 0x04, 0x11, 0x2a, 0xfa,
	0xe3, 0xd6, 0x4b, 0xfb, 0xeb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x5d, 0x6e, 0x21, 0xec, 0x0e,
	0x00, 0x00,
}
