---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/11/1 14:59
---

require("byBullet")
require("byFish")

ByTable = {}


function ByTable:New(tableId,gameTypeId)
    c = {
        GameID = gameTypeId,
        TableID = tableId,
        TableMax = BY_TABLE_MAX_PLAYER, --桌子容纳玩家数量
        RoomScore = 0,  --房间分数

        UserSeatArray = {},  -- 座椅对应玩家uid的哈希表 ， key ： seat ，value： 玩家uid


        GenerateFishUid = 0, -- 生成鱼的uid
        GenerateBulletUid = 0, -- 生成子弹的uid

        FishArray = {},   -- 鱼的哈希表
        BulletArray = {},   -- 子弹的哈希表


        DistributeArray = {},   -- 鱼的生成信息数据
        BossDistributeArray = {},   -- Boss鱼的生成信息数组
    }
    setmetatable(c,self)
    self.__index = self
    return c
end

------------主循环-------------------
function ByTable:RunTable()
    --    luaCallGoCreateGoroutine("RunTable")
    self:InitTable()        -- 可以进行初始化

    -- 开始桌子的主循环
    local RunTable = function()
        print("RunTable")
        if self:CheckTableEmpty() then
            print("这是一个空桌子")
        else

            --self:RunDistributeInfo(table.GetRoomScore())
            --self:RunBossDistributeInfo(table.GetRoomScore())


            --for _,bullet :=range self.BulletArray{
            --bullet.BulletRun(table)				// 遍历所有子弹，并且run
            --}
            --for _,fish :=range self.FishArray{
            --fish.FishRun(table)					// 遍历所有鱼，并且run
            --}

        end


    end
    FindGoRoutineAndRegisterTableRun(RunTable)    -- 注册开始一个新的协程
end

function ByTable:InitTable()

end
--------------------------------------------------------------------------------
---玩家逻辑
--------------------------------------------------------------------------------

-------判断桌子是有人，还是空桌子------------------
function ByTable:CheckTableEmpty()
    if #self.UserSeatArray>0 then
        return false
    end

    return true -- 空桌子
end

-------- 获取桌子的所有玩家------------------
function ByTable:GetUsersSeatInTable()

end

----------获取桌子的空座位, 返回座椅的编号，从0开始到tableMax， 如果返回-1说明满了-
function ByTable:GetEmptySeatInTable()

end

-------------玩家坐到椅子上-------------------------------
function ByTable:PlayerSeat(seatID,user)
    self.UserSeatArray[seatID] = user
end
------- 玩家离开椅子 ------------------
function ByTable:PlayerStandUp(seatID,user)
    table.remove(self.UserSeatArray,seatID)
    -- 清理掉玩家所有子弹
    self:DelBullets(user.UserId)
    --如果是空桌子的话，清理一下桌子
    if self:CheckTableEmpty() then
        self:ClearTable()
    end
end

---------清理桌子----------------------
function ByTable:ClearTable()

end

--------------------------------------------------------------------------------
---子弹
--------------------------------------------------------------------------------
-----玩家发射一个新的子弹
function ByTable:FireBullet(player , lockFishId)
    local num = player.ActivityBulletNum
    if num > MAX_BULLET_NUMBER then
        print("子弹超过上限了")
    end
    local cost = self.RoomScore
    if player.User.Score < cost then
        print("玩家没钱了")
    end
    -- 创建新的子弹
    local bullet = Bullet:New(self.GenerateBulletUid)
    self.BulletArray[bullet.BulletUID] = bullet     --把bullet加入列表
    bullet.UserID = player.User.UserID              --子弹的主人
    bullet.lockFishID = lockFishId                  --锁定鱼
    player.ActivityBulletNum = player.ActivityBulletNum + 1  --玩家已激活子弹增加
    self.GenerateBulletUid  = self.GenerateBulletUid + 1        -- 生成子弹id，自增
end

-----击中一条鱼
function ByTable:HitFish(userId ,bulletId, fishId)
    -- 增加CD判断，不可以太频繁

    --删除子弹
    self:DelBullet(bulletId)

    -- 获得鱼的金币
    local fish = self.FishArray[fishId]
    if fish ~= nil then
        print("捕鱼成功")
    end

    -- 删除鱼

end