---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/11/1 13:32
---
----------------------------------------------------------------
-----------------------------game管理桌子和玩家-----------------
----------------------------------------------------------------
package.path = "Script/Games/BY/?.lua;"..package.path
require("byTable")

Game = {}

function Game:New(name,gameTypeId, switch)
    c = {
        Name = name,
        Id = gameTypeId,
        Switch = switch,    -- 游戏是否开启

        AllTableList = {},  -- 所有桌子列表       key tableUid  ,value table
        TableUUID = 1 ,     -- tableUid 从1开始

        AllUserList = {},   -- 所有玩家列表   key  userId , value player

        gameScore = 0 ,     --  游戏倍率
    }
    setmetatable(c,self)
    self.__index = self
    return c
end


----------------------------------------------------------------
-----------------------------管理桌子---------------------------
----------------------------------------------------------------

-- 创建桌子，并启动它， 参数带底分的， 不同底分的房间可以在一起管理，因为逻辑一样的，进入的时候判断一下，引导玩家进入不同底分的桌子
function Game:CreateTable(gameType,gameScore)
    local table_t
    if gameType == GameTypeBY or gameType == GameTypeBY30 then
        table_t =  ByTable:New(self.TableUUID, gameType)
        --printTable(table_t)
    elseif gameType == GameTypeBY2 then

    elseif gameType == GameTypeBY3 then

    end
    if table_t == nil then
        Logger("CreateTable error , gameType"..gameType)
        return
    end
    table_t.RoomScore = gameScore
    Logger("创建了一个新的桌子,type:"..gameType)

    --增加该桌子到总列表中
    self.AllTableList[self.TableUUID] = table_t
    self.TableUUID = self.TableUUID + 1     -- table uuid 自增

    -- 桌子开始自行启动计算
    table_t:RunTable()

    return table_t

end

-- 根据桌子uid 返回桌子的句柄
function Game:GetTableByUID(tableId)
    return self.AllTableList[tableId]
end

----------------------------------------------------------------
-----------------------------管理玩家---------------------------
----------------------------------------------------------------
-- 根据user uid 返回user的句柄
function Game:GetUserByUID(uid)
    return self.AllUserList[uid]
end

-- 有玩家登陆游戏，想进入对应分数的房间
function Game:PlayerLoginGame(user)
    local player = Player:New(user)
    self.AllUserList[user.UserId] = player      --创建好之后加入玩家总列表

    --然后找一个有空位的桌子让玩家加入游戏
    for k,v in pairs(self.AllTableList) do
        if v.RoomScore == self.gameScore then    -- 进入底分一致的桌子
            local seatId = v:GetEmptySeatInTable()
            if seatId > 0 then
                print("有空座位")
                v:InitTable()    -- 看看是不是空桌子，如果是，需要初始化

                v:PlayerSeat(seatId,player)
                player.TableID = v.TableID
                player.ChairID = seatId

                return v
            end
        else
            print("有底分不一致的情况？"..k)
        end
    end

    print("没有空座位的房间了，创建一个吧,  score".. self.Id)
    local gameType = self.AllTableList[1].GameID
    local table = self:CreateTable(gameType, self.gameScore)
    local seatId = table:GetEmptySeatInTable()  --获取空椅位
    table:InitTable()
    table:PlayerSeat(seatId,player)     --让玩家坐下.
    player.TableID = table.TableID
    player.ChairID = seatId
    return table

end

--玩家登出
function Game:PlayerLogOutGame(player)
    local table = Game:GetTableByUID(player.TableID)
    table:PlayerStandUp(player.ChairID, player.User)        -- 玩家离开桌子
    player.TableID = TABLE_CHAIR_NOBODY
    player.ChairID = TABLE_CHAIR_NOBODY

    print("玩家"..player.User.UserId.."离开了")
end
