// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CMD_Game.CMD

/*
Package CMD is a generated protocol buffer package.

Namespace: MESSAGE

It is generated from these files:
	CMD_Game.CMD

It has these top-level messages:
	TagUsedSkill
	TagUserInfo
	TagRewardPoolOption
	TagBuff
	CMD_S_ENTER_SCENE
	CMD_S_OTHER_ENTER_SCENE
	CMD_S_EXIT_SCENE
	CMD_S_SWITCH_SCENE
	CMD_S_FISH_FORM_END
	CMD_S_SCENE_STATE
	CMD_S_FISH_STATE_INFO
	CMD_S_PIRANHA_ATTACK_INFO
	TagSceneFish
	CMD_S_SCENE_FISH
	TagSceneBullet
	CMD_S_SCENE_BULLET
	CMD_S_DISTRIBUTE_FISH
	CMD_C_USER_FIRE
	CMD_S_USER_FIRE
	CMD_C_USE_SKILL
	CMD_S_USE_SKILL
	CMD_C_SKILL_FINISH
	CMD_C_BUY_SKILL
	CMD_S_BUY_SKILL
	CMD_C_CATCH_FISH
	CMD_SUB_C_DRILL_CATCH_FISH
	CMD_SUB_S_DRILL_DISAPPEAR
	TagDropItem
	TagCatchFish
	CMD_S_CATCH_FISH
	CMD_C_SKILL_CATCH_FISH
	CMD_C_LASER_CANNON_CATCH_FISH
	CMD_S_LASER_CANNON_CATCH_FISH
	CMD_S_UPDATE_LASER_ENERGY
	CMD_S_UPDATE_USER_SCORE
	CMD_S_START_ALMS
	CMD_C_REFRESH_ALMS
	CMD_S_STOP_ALMS
	CMD_C_GET_ALMS
	CMD_S_GET_ALMS
	CMD_S_BOSS_COME
	CMD_C_CHANGE_FIRE
	CMD_S_CHANGE_FIRE
	CMD_S_TRRIGER_EGG
	CMD_S_TRRIGER_NUM
	CMD_C_SMASH_EGG
	CMD_S_SMASH_EGG
	CMD_S_TRRIGER_MONEY_TREE
	CMD_C_SMASH_MONEY_TREE
	CMD_S_SMASH_MONEY_TREE
	CMD_C_NUM_VAL
	CMD_S_NUM_VAL
	CMD_S_GUESS_SINDOU
	CMD_C_SINDOU_REQ
	CMD_S_SINDOU_REQ
	CMD_S_BOMB_FISH
	CMD_C_VIP_GET_ALMS
	CMD_C_GET_RED_ENVELOPE
	CMD_S_GET_RED_ENVELOPE
	CMD_S_SUMMON_FISH_INFO
	CMD_S_SHENDENG_FISH
	CMD_C_SHENDENG_FISH
	CMD_S_FISH_CHANGE_PATH
	CMD_S_REQ_REWARD_POOL_DETAIL
	CMD_S_READY_REWARDPOOL
	CMD_S_OPEN_REWARDPOOL
	CMD_S_CLOSE_REWARDPOOL
	TagUserRewardPoolRank
	CMD_S_UPDATE_REWARDPOOL_RANK
	CMD_S_UPDATE_REWARDPOOL_TASK
	CMD_C_UNLOCK_CANNON_MULTIPLE
	TagUpLevelReward
	CMD_S_UPLEVEL_REWARD
	CMD_S_UNLOCK_CANNON_MULTIPLE
	CMD_S_ALL_CANNON_LEVEL
	CMD_S_USER_UP_LEVEL
	CMD_S_USER_ADD_EXP
	CMD_S_UPDATE_GAME_NEWGUIDE_STATUS
	CMD_S_GAME_START
	CMD_S_GAME_END
	TagUserResult
	CMD_S_GAME_RESULT
	CMD_S_GAME_RANK
	CMD_C_CANNON_ANGLE
	CMD_S_CANNON_ANGLE
	CMD_C_ENTER_BACKSTAGE
	CMD_C_BACK_GAME
	CMD_S_MATCH_UP_CANNON
	CMD_C_START_EGG
	CMD_S_START_EGG
	CMD_C_START_TREE
	CMD_S_START_TREE
	CMD_S_TREASURE_INFO
	CMD_C_TREASURE_START
	CMD_S_TREASURE_REULST
	CMD_C_START_SKILL
	CMD_S_START_SKILL
	CMD_C_CANCEL_SKILL
	CMD_S_CANCEL_SKILL
	TagTaskFish
	CMD_S_START_MYSTERIOUS_TASK
	CMD_S_CLOSE_MYSTERIOUS_TASK
	CMD_S_UPDATE_MYSTERIOUS_TASK
	CMD_S_ARENA_GAME_END
	CMD_S_ARENA_CLOSE
	CMD_S_CHANGE_ACHIEVEMENT_TITLE
	CMD_S_ARENA_ACTIVITY_END
	CMD_C_BUY_BULLET_SKIN
	CMD_S_BUY_BULLET_SKIN
	CMD_C_CHANGE_BULLET_SKIN
	CMD_S_CHANGE_BULLET_SKIN
	CMD_S_BC_USER_CHANGE_BULLET_SKIN
	TagUserBulletSkinInfo
	CMD_S_UserBulletSkin
	CMD_C_RESIGNUP_ARENA_ACTIVITY
	CMD_S_RESIGNUP_ARENA_ACTIVITY
	CMD_S_DROP_CARD
	CMD_S_CARD_REWARD
	CMD_S_SLOT_PLAYER_PROGRESS
	CMD_S_SLOT_GAME_REWARD
	CMD_S_MULTIPLE_REWARD_OPEN
	CMD_S_GET_MULTIPLE_REWARD
	CMD_S_SYNC_TIGER_MAC
	TagCasinoRankPlayerInfo
	CMD_S_CASINO_ARENA_RANK
	TagRankDetailInfo
	CMD_S_ARENA_RANK_DETAIL
	CMD_S_SLAM_POOL
	CMD_S_CASINO_ARENA
	CMD_S_SLAM_POOL_PLAYER
	CMD_S_BOSS_ROULETTE
	CMD_C_START_BOSS_ROULETTE
	CMD_S_START_BOSS_ROULETTE
	CMD_C_BOSS_ROULETTE_REQ
	CMD_S_BOSS_ROULETTE_REQ
	CMD_S_RANDOM_MULTIPLE
	CMD_C_RANDOM_MULTIPLE_REQ
	CMD_S_RANDOM_MULTIPLE_RESULT
	CMD_S_CLASSIC_PRIZE_POOL_UPDATE_STAR
	CMD_C_CLASSIC_PRIZE_POOL_GUESS
	CMD_S_CLASSIC_PRIZE_POOL_GUESS
	CMD_C_CLASSIC_PRIZE_POOL_GUESS_GET
	CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET
	CMD_C_CLASSIC_PRIZE_POOL_GET_STAR
	CMD_S_CLASSIC_PRIZE_POOL_GET_STAR
	CMD_C_BUY_MONSTER_SKIN
	CMD_S_BUY_MONSTER_SKIN
	CMD_C_CHANGE_MONSTER_SKIN
	CMD_S_CHANGE_MONSTER_SKIN
	CMD_S_BC_USER_CHANGE_MONSTER_SKIN
	TagUserMonsterSkinInfo
	CMD_S_UserMonsterSkin
	CMD_S_UPDATE_SAVING_POT
	CMD_S_PERSONAL_POOL_INFO
	CMD_C_PERSONALPOOL_REWARD_REQ
	CMD_S_PERSONAL_POOL_UPDATE
	CMD_S_PERSONAL_POOL_REWARD
	CMD_GR_S_SYNC_SCORE
	CMD_S_TREASURE_ENERGY
	CMD_S_TREASURE_REWARD
	CMD_C_CLEAR_FISH
	CMD_S_WORLD_BOSS_DO_SKILL
	TagSkillEffect
	CMD_S_SKILL_EFFECT
	CMD_S_PSEIDON_SHIELD_VALUE
	CMD_S_PSEIDON_WEAKNESS
	CMD_S_WEAKNESS_EXPLODE
	CMD_C_CANNON_REPAIR
	CMD_S_CANNON_REPAIR
	CMD_S_WEAK_STATUS_END
	CMD_S_PLAYER_SKILL_EFFECT
	TagSkillStatus
	TagPlayerSkillStatus
	CMD_S_PLAYER_SKILL_STATUS
	CMD_C_SYNC_USER_STATE
	CMD_S_SYNC_USER_STATE
	CMD_S_TRIGER_USER_TIPS
	CMD_C_CHANGE_MAONSTER_MULTIPLE
	CMD_S_CHANGE_MAONSTER_MULTIPLE
	CMD_C_START_ADVENTURE
	CMD_S_WHEEL_INFO
	CMD_C_PREDICTION_CHIP
	CMD_S_PREDICTION_INFO
	CMD_S_BOSS_DATA
	CMD_S_BossSkillStatus
	TagGameItemInfo
	CMD_S_SelectCard
	CMD_C_SelectCard
	CMD_S_SelectCardAward
	CMD_S_SelectCardEnd
	CMD_C_EndGame
	CMD_S_ClosAnAccount
	CMD_S_GameEndLeadTime
	CMD_S_DialAwardInfo
	CMD_C_DialCartoonComplete
*/
package CMD

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the CMD package it is being compiled against.
// A compilation error at this line likely means your copy of the
// CMD package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the CMD package

type CMD_S_TREASURE_REULST_REULST_TYPE int32

const (
	CMD_S_TREASURE_REULST_RT_SUCESS          CMD_S_TREASURE_REULST_REULST_TYPE = 1
	CMD_S_TREASURE_REULST_RT_NOT_ENOUGH_FISH CMD_S_TREASURE_REULST_REULST_TYPE = 2
	CMD_S_TREASURE_REULST_RT_NOT_ENOUGH_GOLD CMD_S_TREASURE_REULST_REULST_TYPE = 3
)

var CMD_S_TREASURE_REULST_REULST_TYPE_name = map[int32]string{
	1: "RT_SUCESS",
	2: "RT_NOT_ENOUGH_FISH",
	3: "RT_NOT_ENOUGH_GOLD",
}
var CMD_S_TREASURE_REULST_REULST_TYPE_value = map[string]int32{
	"RT_SUCESS":          1,
	"RT_NOT_ENOUGH_FISH": 2,
	"RT_NOT_ENOUGH_GOLD": 3,
}

func (x CMD_S_TREASURE_REULST_REULST_TYPE) Enum() *CMD_S_TREASURE_REULST_REULST_TYPE {
	p := new(CMD_S_TREASURE_REULST_REULST_TYPE)
	*p = x
	return p
}
func (x CMD_S_TREASURE_REULST_REULST_TYPE) String() string {
	return proto.EnumName(CMD_S_TREASURE_REULST_REULST_TYPE_name, int32(x))
}
func (x *CMD_S_TREASURE_REULST_REULST_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_S_TREASURE_REULST_REULST_TYPE_value, data, "CMD_S_TREASURE_REULST_REULST_TYPE")
	if err != nil {
		return err
	}
	*x = CMD_S_TREASURE_REULST_REULST_TYPE(value)
	return nil
}
func (CMD_S_TREASURE_REULST_REULST_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{94, 0}
}

type CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType int32

const (
	CMD_C_CLASSIC_PRIZE_POOL_GUESS_Small CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType = 0
	CMD_C_CLASSIC_PRIZE_POOL_GUESS_Big   CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType = 1
	CMD_C_CLASSIC_PRIZE_POOL_GUESS_Lucky CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType = 2
)

var CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType_name = map[int32]string{
	0: "Small",
	1: "Big",
	2: "Lucky",
}
var CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType_value = map[string]int32{
	"Small": 0,
	"Big":   1,
	"Lucky": 2,
}

func (x CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType) Enum() *CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType {
	p := new(CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType)
	*p = x
	return p
}
func (x CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType) String() string {
	return proto.EnumName(CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType_name, int32(x))
}
func (x *CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType_value, data, "CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType")
	if err != nil {
		return err
	}
	*x = CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType(value)
	return nil
}
func (CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{139, 0}
}

type CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result int32

const (
	CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Successful CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result = 0
	CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Failed     CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result = 1
)

var CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result_name = map[int32]string{
	0: "Successful",
	1: "Failed",
}
var CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result_value = map[string]int32{
	"Successful": 0,
	"Failed":     1,
}

func (x CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result) Enum() *CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result {
	p := new(CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result)
	*p = x
	return p
}
func (x CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result) String() string {
	return proto.EnumName(CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result_name, int32(x))
}
func (x *CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result_value, data, "CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result")
	if err != nil {
		return err
	}
	*x = CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result(value)
	return nil
}
func (CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{142, 0}
}

type CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID int32

const (
	CMD_S_WORLD_BOSS_DO_SKILL_BSID_CALL    CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID = 1
	CMD_S_WORLD_BOSS_DO_SKILL_BSID_STOP    CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID = 2
	CMD_S_WORLD_BOSS_DO_SKILL_BSID_WEAKEN  CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID = 3
	CMD_S_WORLD_BOSS_DO_SKILL_BSID_PROTECT CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID = 4
)

var CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID_name = map[int32]string{
	1: "BSID_CALL",
	2: "BSID_STOP",
	3: "BSID_WEAKEN",
	4: "BSID_PROTECT",
}
var CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID_value = map[string]int32{
	"BSID_CALL":    1,
	"BSID_STOP":    2,
	"BSID_WEAKEN":  3,
	"BSID_PROTECT": 4,
}

func (x CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID) Enum() *CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID {
	p := new(CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID)
	*p = x
	return p
}
func (x CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID) String() string {
	return proto.EnumName(CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID_name, int32(x))
}
func (x *CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID_value, data, "CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID")
	if err != nil {
		return err
	}
	*x = CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID(value)
	return nil
}
func (CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{161, 0}
}

type CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason int32

const (
	CMD_S_PSEIDON_SHIELD_VALUE_UR_CREATE  CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason = 1
	CMD_S_PSEIDON_SHIELD_VALUE_UR_ATTACK  CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason = 2
	CMD_S_PSEIDON_SHIELD_VALUE_UR_DESTROY CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason = 3
)

var CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason_name = map[int32]string{
	1: "UR_CREATE",
	2: "UR_ATTACK",
	3: "UR_DESTROY",
}
var CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason_value = map[string]int32{
	"UR_CREATE":  1,
	"UR_ATTACK":  2,
	"UR_DESTROY": 3,
}

func (x CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason) Enum() *CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason {
	p := new(CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason)
	*p = x
	return p
}
func (x CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason) String() string {
	return proto.EnumName(CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason_name, int32(x))
}
func (x *CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason_value, data, "CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason")
	if err != nil {
		return err
	}
	*x = CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason(value)
	return nil
}
func (CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{164, 0}
}

type TagSkillStatus_SkillEffectType int32

const (
	TagSkillStatus_SET_NULL    TagSkillStatus_SkillEffectType = 0
	TagSkillStatus_SET_STOP    TagSkillStatus_SkillEffectType = 1
	TagSkillStatus_SET_WEAKEN  TagSkillStatus_SkillEffectType = 2
	TagSkillStatus_SET_PROTECT TagSkillStatus_SkillEffectType = 3
	TagSkillStatus_SET_MISSILE TagSkillStatus_SkillEffectType = 4
	TagSkillStatus_SET_TRIDENT TagSkillStatus_SkillEffectType = 5
)

var TagSkillStatus_SkillEffectType_name = map[int32]string{
	0: "SET_NULL",
	1: "SET_STOP",
	2: "SET_WEAKEN",
	3: "SET_PROTECT",
	4: "SET_MISSILE",
	5: "SET_TRIDENT",
}
var TagSkillStatus_SkillEffectType_value = map[string]int32{
	"SET_NULL":    0,
	"SET_STOP":    1,
	"SET_WEAKEN":  2,
	"SET_PROTECT": 3,
	"SET_MISSILE": 4,
	"SET_TRIDENT": 5,
}

func (x TagSkillStatus_SkillEffectType) Enum() *TagSkillStatus_SkillEffectType {
	p := new(TagSkillStatus_SkillEffectType)
	*p = x
	return p
}
func (x TagSkillStatus_SkillEffectType) String() string {
	return proto.EnumName(TagSkillStatus_SkillEffectType_name, int32(x))
}
func (x *TagSkillStatus_SkillEffectType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TagSkillStatus_SkillEffectType_value, data, "TagSkillStatus_SkillEffectType")
	if err != nil {
		return err
	}
	*x = TagSkillStatus_SkillEffectType(value)
	return nil
}
func (TagSkillStatus_SkillEffectType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{171, 0}
}

type CMD_S_SYNC_USER_STATE_StateType int32

const (
	CMD_S_SYNC_USER_STATE_State_TREE         CMD_S_SYNC_USER_STATE_StateType = 0
	CMD_S_SYNC_USER_STATE_State_Egg          CMD_S_SYNC_USER_STATE_StateType = 1
	CMD_S_SYNC_USER_STATE_State_MULTIPLE     CMD_S_SYNC_USER_STATE_StateType = 2
	CMD_S_SYNC_USER_STATE_State_CLASSIC      CMD_S_SYNC_USER_STATE_StateType = 3
	CMD_S_SYNC_USER_STATE_State_PERSONALPOOL CMD_S_SYNC_USER_STATE_StateType = 4
)

var CMD_S_SYNC_USER_STATE_StateType_name = map[int32]string{
	0: "State_TREE",
	1: "State_Egg",
	2: "State_MULTIPLE",
	3: "State_CLASSIC",
	4: "State_PERSONALPOOL",
}
var CMD_S_SYNC_USER_STATE_StateType_value = map[string]int32{
	"State_TREE":         0,
	"State_Egg":          1,
	"State_MULTIPLE":     2,
	"State_CLASSIC":      3,
	"State_PERSONALPOOL": 4,
}

func (x CMD_S_SYNC_USER_STATE_StateType) Enum() *CMD_S_SYNC_USER_STATE_StateType {
	p := new(CMD_S_SYNC_USER_STATE_StateType)
	*p = x
	return p
}
func (x CMD_S_SYNC_USER_STATE_StateType) String() string {
	return proto.EnumName(CMD_S_SYNC_USER_STATE_StateType_name, int32(x))
}
func (x *CMD_S_SYNC_USER_STATE_StateType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_S_SYNC_USER_STATE_StateType_value, data, "CMD_S_SYNC_USER_STATE_StateType")
	if err != nil {
		return err
	}
	*x = CMD_S_SYNC_USER_STATE_StateType(value)
	return nil
}
func (CMD_S_SYNC_USER_STATE_StateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{175, 0}
}

type CMD_S_TRIGER_USER_TIPS_TipsType int32

const (
	CMD_S_TRIGER_USER_TIPS_Tips_LOCK CMD_S_TRIGER_USER_TIPS_TipsType = 1
)

var CMD_S_TRIGER_USER_TIPS_TipsType_name = map[int32]string{
	1: "Tips_LOCK",
}
var CMD_S_TRIGER_USER_TIPS_TipsType_value = map[string]int32{
	"Tips_LOCK": 1,
}

func (x CMD_S_TRIGER_USER_TIPS_TipsType) Enum() *CMD_S_TRIGER_USER_TIPS_TipsType {
	p := new(CMD_S_TRIGER_USER_TIPS_TipsType)
	*p = x
	return p
}
func (x CMD_S_TRIGER_USER_TIPS_TipsType) String() string {
	return proto.EnumName(CMD_S_TRIGER_USER_TIPS_TipsType_name, int32(x))
}
func (x *CMD_S_TRIGER_USER_TIPS_TipsType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_S_TRIGER_USER_TIPS_TipsType_value, data, "CMD_S_TRIGER_USER_TIPS_TipsType")
	if err != nil {
		return err
	}
	*x = CMD_S_TRIGER_USER_TIPS_TipsType(value)
	return nil
}
func (CMD_S_TRIGER_USER_TIPS_TipsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{176, 0}
}

type CMD_S_CHANGE_MAONSTER_MULTIPLE_Result int32

const (
	CMD_S_CHANGE_MAONSTER_MULTIPLE_Successful CMD_S_CHANGE_MAONSTER_MULTIPLE_Result = 0
	CMD_S_CHANGE_MAONSTER_MULTIPLE_Failed     CMD_S_CHANGE_MAONSTER_MULTIPLE_Result = 1
)

var CMD_S_CHANGE_MAONSTER_MULTIPLE_Result_name = map[int32]string{
	0: "Successful",
	1: "Failed",
}
var CMD_S_CHANGE_MAONSTER_MULTIPLE_Result_value = map[string]int32{
	"Successful": 0,
	"Failed":     1,
}

func (x CMD_S_CHANGE_MAONSTER_MULTIPLE_Result) Enum() *CMD_S_CHANGE_MAONSTER_MULTIPLE_Result {
	p := new(CMD_S_CHANGE_MAONSTER_MULTIPLE_Result)
	*p = x
	return p
}
func (x CMD_S_CHANGE_MAONSTER_MULTIPLE_Result) String() string {
	return proto.EnumName(CMD_S_CHANGE_MAONSTER_MULTIPLE_Result_name, int32(x))
}
func (x *CMD_S_CHANGE_MAONSTER_MULTIPLE_Result) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_S_CHANGE_MAONSTER_MULTIPLE_Result_value, data, "CMD_S_CHANGE_MAONSTER_MULTIPLE_Result")
	if err != nil {
		return err
	}
	*x = CMD_S_CHANGE_MAONSTER_MULTIPLE_Result(value)
	return nil
}
func (CMD_S_CHANGE_MAONSTER_MULTIPLE_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{178, 0}
}

type CMD_S_PREDICTION_INFO_Result int32

const (
	CMD_S_PREDICTION_INFO_Success    CMD_S_PREDICTION_INFO_Result = 0
	CMD_S_PREDICTION_INFO_Failed     CMD_S_PREDICTION_INFO_Result = 1
	CMD_S_PREDICTION_INFO_NotEnough  CMD_S_PREDICTION_INFO_Result = 2
	CMD_S_PREDICTION_INFO_UpperLimit CMD_S_PREDICTION_INFO_Result = 3
	CMD_S_PREDICTION_INFO_Forbid     CMD_S_PREDICTION_INFO_Result = 4
)

var CMD_S_PREDICTION_INFO_Result_name = map[int32]string{
	0: "Success",
	1: "Failed",
	2: "NotEnough",
	3: "UpperLimit",
	4: "Forbid",
}
var CMD_S_PREDICTION_INFO_Result_value = map[string]int32{
	"Success":    0,
	"Failed":     1,
	"NotEnough":  2,
	"UpperLimit": 3,
	"Forbid":     4,
}

func (x CMD_S_PREDICTION_INFO_Result) Enum() *CMD_S_PREDICTION_INFO_Result {
	p := new(CMD_S_PREDICTION_INFO_Result)
	*p = x
	return p
}
func (x CMD_S_PREDICTION_INFO_Result) String() string {
	return proto.EnumName(CMD_S_PREDICTION_INFO_Result_name, int32(x))
}
func (x *CMD_S_PREDICTION_INFO_Result) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_S_PREDICTION_INFO_Result_value, data, "CMD_S_PREDICTION_INFO_Result")
	if err != nil {
		return err
	}
	*x = CMD_S_PREDICTION_INFO_Result(value)
	return nil
}
func (CMD_S_PREDICTION_INFO_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{182, 0}
}

type CMD_S_BossSkillStatus_BossSkillStatus int32

const (
	CMD_S_BossSkillStatus_SkillStatus_Idel    CMD_S_BossSkillStatus_BossSkillStatus = 0
	CMD_S_BossSkillStatus_SkillStatus_Process CMD_S_BossSkillStatus_BossSkillStatus = 1
	CMD_S_BossSkillStatus_SkillStatus_PassBy  CMD_S_BossSkillStatus_BossSkillStatus = 2
)

var CMD_S_BossSkillStatus_BossSkillStatus_name = map[int32]string{
	0: "SkillStatus_Idel",
	1: "SkillStatus_Process",
	2: "SkillStatus_PassBy",
}
var CMD_S_BossSkillStatus_BossSkillStatus_value = map[string]int32{
	"SkillStatus_Idel":    0,
	"SkillStatus_Process": 1,
	"SkillStatus_PassBy":  2,
}

func (x CMD_S_BossSkillStatus_BossSkillStatus) Enum() *CMD_S_BossSkillStatus_BossSkillStatus {
	p := new(CMD_S_BossSkillStatus_BossSkillStatus)
	*p = x
	return p
}
func (x CMD_S_BossSkillStatus_BossSkillStatus) String() string {
	return proto.EnumName(CMD_S_BossSkillStatus_BossSkillStatus_name, int32(x))
}
func (x *CMD_S_BossSkillStatus_BossSkillStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_S_BossSkillStatus_BossSkillStatus_value, data, "CMD_S_BossSkillStatus_BossSkillStatus")
	if err != nil {
		return err
	}
	*x = CMD_S_BossSkillStatus_BossSkillStatus(value)
	return nil
}
func (CMD_S_BossSkillStatus_BossSkillStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{184, 0}
}

type CMD_C_SelectCard_SelectCardType int32

const (
	CMD_C_SelectCard_CommonCard CMD_C_SelectCard_SelectCardType = 1
	CMD_C_SelectCard_SuperCard  CMD_C_SelectCard_SelectCardType = 2
)

var CMD_C_SelectCard_SelectCardType_name = map[int32]string{
	1: "CommonCard",
	2: "SuperCard",
}
var CMD_C_SelectCard_SelectCardType_value = map[string]int32{
	"CommonCard": 1,
	"SuperCard":  2,
}

func (x CMD_C_SelectCard_SelectCardType) Enum() *CMD_C_SelectCard_SelectCardType {
	p := new(CMD_C_SelectCard_SelectCardType)
	*p = x
	return p
}
func (x CMD_C_SelectCard_SelectCardType) String() string {
	return proto.EnumName(CMD_C_SelectCard_SelectCardType_name, int32(x))
}
func (x *CMD_C_SelectCard_SelectCardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_C_SelectCard_SelectCardType_value, data, "CMD_C_SelectCard_SelectCardType")
	if err != nil {
		return err
	}
	*x = CMD_C_SelectCard_SelectCardType(value)
	return nil
}
func (CMD_C_SelectCard_SelectCardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{187, 0}
}

// 已使用的技能
type TagUsedSkill struct {
	SkillId          *uint32 `protobuf:"varint,1,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	Time             *uint32 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Cd               *uint32 `protobuf:"varint,3,opt,name=cd" json:"cd,omitempty"`
	Used             *uint32 `protobuf:"varint,4,opt,name=used" json:"used,omitempty"`
	Total            *uint32 `protobuf:"varint,5,opt,name=total" json:"total,omitempty"`
	AddSec           *uint32 `protobuf:"varint,6,opt,name=addSec" json:"addSec,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagUsedSkill) Reset()                    { *m = TagUsedSkill{} }
func (m *TagUsedSkill) String() string            { return proto.CompactTextString(m) }
func (*TagUsedSkill) ProtoMessage()               {}
func (*TagUsedSkill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TagUsedSkill) GetSkillId() uint32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *TagUsedSkill) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *TagUsedSkill) GetCd() uint32 {
	if m != nil && m.Cd != nil {
		return *m.Cd
	}
	return 0
}

func (m *TagUsedSkill) GetUsed() uint32 {
	if m != nil && m.Used != nil {
		return *m.Used
	}
	return 0
}

func (m *TagUsedSkill) GetTotal() uint32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *TagUsedSkill) GetAddSec() uint32 {
	if m != nil && m.AddSec != nil {
		return *m.AddSec
	}
	return 0
}

// 用户信息
type TagUserInfo struct {
	NickName           []byte          `protobuf:"bytes,1,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	UserId             *uint32         `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GameId             *uint32         `protobuf:"varint,3,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	VipLevel           *uint32         `protobuf:"varint,4,opt,name=vip_level,json=vipLevel" json:"vip_level,omitempty"`
	Level              *uint32         `protobuf:"varint,5,opt,name=level" json:"level,omitempty"`
	ChairId            *int32          `protobuf:"varint,6,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	TableId            *int32          `protobuf:"varint,7,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Score              *int64          `protobuf:"varint,8,opt,name=score" json:"score,omitempty"`
	Lottery            *int64          `protobuf:"varint,9,opt,name=lottery" json:"lottery,omitempty"`
	BulletMulriple     *int32          `protobuf:"varint,10,opt,name=bullet_mulriple,json=bulletMulriple" json:"bullet_mulriple,omitempty"`
	UsedSkills         []*TagUsedSkill `protobuf:"bytes,11,rep,name=used_skills,json=usedSkills" json:"used_skills,omitempty"`
	CannonId           *uint32         `protobuf:"varint,12,opt,name=cannon_id,json=cannonId" json:"cannon_id,omitempty"`
	FaceId             *uint32         `protobuf:"varint,13,opt,name=face_id,json=faceId" json:"face_id,omitempty"`
	Exp                *uint32         `protobuf:"varint,14,opt,name=exp" json:"exp,omitempty"`
	Diamond            *int64          `protobuf:"varint,15,opt,name=diamond" json:"diamond,omitempty"`
	Bullet             *uint32         `protobuf:"varint,16,opt,name=bullet" json:"bullet,omitempty"`
	CannonNum          *uint32         `protobuf:"varint,17,opt,name=cannon_num,json=cannonNum" json:"cannon_num,omitempty"`
	AccountLevel       *int32          `protobuf:"varint,18,opt,name=account_level,json=accountLevel" json:"account_level,omitempty"`
	LoginType          *int32          `protobuf:"varint,19,opt,name=login_type,json=loginType" json:"login_type,omitempty"`
	FaceUrl            []byte          `protobuf:"bytes,20,opt,name=face_url,json=faceUrl" json:"face_url,omitempty"`
	ArenaScore         *int32          `protobuf:"varint,21,opt,name=arena_score,json=arenaScore" json:"arena_score,omitempty"`
	Sitelv             *uint32         `protobuf:"varint,22,opt,name=sitelv" json:"sitelv,omitempty"`
	AchievementTitleId *int64          `protobuf:"varint,23,opt,name=achievement_title_id,json=achievementTitleId" json:"achievement_title_id,omitempty"`
	BulletSkinId       *uint32         `protobuf:"varint,24,opt,name=bullet_skin_id,json=bulletSkinId" json:"bullet_skin_id,omitempty"`
	Buffs              []*TagBuff      `protobuf:"bytes,25,rep,name=buffs" json:"buffs,omitempty"`
	Secsitelv          *uint32         `protobuf:"varint,26,opt,name=secsitelv" json:"secsitelv,omitempty"`
	MonsterUpper       *uint32         `protobuf:"varint,27,opt,name=monster_upper,json=monsterUpper" json:"monster_upper,omitempty"`
	XXX_unrecognized   []byte          `json:"-"`
}

func (m *TagUserInfo) Reset()                    { *m = TagUserInfo{} }
func (m *TagUserInfo) String() string            { return proto.CompactTextString(m) }
func (*TagUserInfo) ProtoMessage()               {}
func (*TagUserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TagUserInfo) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *TagUserInfo) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *TagUserInfo) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *TagUserInfo) GetVipLevel() uint32 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

func (m *TagUserInfo) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *TagUserInfo) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *TagUserInfo) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *TagUserInfo) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *TagUserInfo) GetLottery() int64 {
	if m != nil && m.Lottery != nil {
		return *m.Lottery
	}
	return 0
}

func (m *TagUserInfo) GetBulletMulriple() int32 {
	if m != nil && m.BulletMulriple != nil {
		return *m.BulletMulriple
	}
	return 0
}

func (m *TagUserInfo) GetUsedSkills() []*TagUsedSkill {
	if m != nil {
		return m.UsedSkills
	}
	return nil
}

func (m *TagUserInfo) GetCannonId() uint32 {
	if m != nil && m.CannonId != nil {
		return *m.CannonId
	}
	return 0
}

func (m *TagUserInfo) GetFaceId() uint32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

func (m *TagUserInfo) GetExp() uint32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *TagUserInfo) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *TagUserInfo) GetBullet() uint32 {
	if m != nil && m.Bullet != nil {
		return *m.Bullet
	}
	return 0
}

func (m *TagUserInfo) GetCannonNum() uint32 {
	if m != nil && m.CannonNum != nil {
		return *m.CannonNum
	}
	return 0
}

func (m *TagUserInfo) GetAccountLevel() int32 {
	if m != nil && m.AccountLevel != nil {
		return *m.AccountLevel
	}
	return 0
}

func (m *TagUserInfo) GetLoginType() int32 {
	if m != nil && m.LoginType != nil {
		return *m.LoginType
	}
	return 0
}

func (m *TagUserInfo) GetFaceUrl() []byte {
	if m != nil {
		return m.FaceUrl
	}
	return nil
}

func (m *TagUserInfo) GetArenaScore() int32 {
	if m != nil && m.ArenaScore != nil {
		return *m.ArenaScore
	}
	return 0
}

func (m *TagUserInfo) GetSitelv() uint32 {
	if m != nil && m.Sitelv != nil {
		return *m.Sitelv
	}
	return 0
}

func (m *TagUserInfo) GetAchievementTitleId() int64 {
	if m != nil && m.AchievementTitleId != nil {
		return *m.AchievementTitleId
	}
	return 0
}

func (m *TagUserInfo) GetBulletSkinId() uint32 {
	if m != nil && m.BulletSkinId != nil {
		return *m.BulletSkinId
	}
	return 0
}

func (m *TagUserInfo) GetBuffs() []*TagBuff {
	if m != nil {
		return m.Buffs
	}
	return nil
}

func (m *TagUserInfo) GetSecsitelv() uint32 {
	if m != nil && m.Secsitelv != nil {
		return *m.Secsitelv
	}
	return 0
}

func (m *TagUserInfo) GetMonsterUpper() uint32 {
	if m != nil && m.MonsterUpper != nil {
		return *m.MonsterUpper
	}
	return 0
}

// 奖池配置信息
type TagRewardPoolOption struct {
	DetailCostType    *int32  `protobuf:"varint,1,opt,name=detail_cost_type,json=detailCostType" json:"detail_cost_type,omitempty"`
	DetailCostValue   *int64  `protobuf:"varint,2,opt,name=detail_cost_value,json=detailCostValue" json:"detail_cost_value,omitempty"`
	PlayerMinStayTime *uint32 `protobuf:"varint,3,opt,name=player_min_stay_time,json=playerMinStayTime" json:"player_min_stay_time,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *TagRewardPoolOption) Reset()                    { *m = TagRewardPoolOption{} }
func (m *TagRewardPoolOption) String() string            { return proto.CompactTextString(m) }
func (*TagRewardPoolOption) ProtoMessage()               {}
func (*TagRewardPoolOption) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TagRewardPoolOption) GetDetailCostType() int32 {
	if m != nil && m.DetailCostType != nil {
		return *m.DetailCostType
	}
	return 0
}

func (m *TagRewardPoolOption) GetDetailCostValue() int64 {
	if m != nil && m.DetailCostValue != nil {
		return *m.DetailCostValue
	}
	return 0
}

func (m *TagRewardPoolOption) GetPlayerMinStayTime() uint32 {
	if m != nil && m.PlayerMinStayTime != nil {
		return *m.PlayerMinStayTime
	}
	return 0
}

type TagBuff struct {
	BuffId           *uint32 `protobuf:"varint,1,opt,name=buff_id,json=buffId" json:"buff_id,omitempty"`
	Duration         *int32  `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
	AddRatio         *int32  `protobuf:"varint,3,opt,name=add_ratio,json=addRatio" json:"add_ratio,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagBuff) Reset()                    { *m = TagBuff{} }
func (m *TagBuff) String() string            { return proto.CompactTextString(m) }
func (*TagBuff) ProtoMessage()               {}
func (*TagBuff) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TagBuff) GetBuffId() uint32 {
	if m != nil && m.BuffId != nil {
		return *m.BuffId
	}
	return 0
}

func (m *TagBuff) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *TagBuff) GetAddRatio() int32 {
	if m != nil && m.AddRatio != nil {
		return *m.AddRatio
	}
	return 0
}

// 进入场景
type CMD_S_ENTER_SCENE struct {
	IsSpecialScene          *bool                `protobuf:"varint,1,opt,name=is_special_scene,json=isSpecialScene" json:"is_special_scene,omitempty"`
	SpecialSceeneWaitedTime *uint32              `protobuf:"varint,2,opt,name=special_sceene_waited_time,json=specialSceeneWaitedTime" json:"special_sceene_waited_time,omitempty"`
	TickCount               *uint32              `protobuf:"varint,3,opt,name=tick_count,json=tickCount" json:"tick_count,omitempty"`
	ExchangeRatioUserscore  *uint32              `protobuf:"varint,4,opt,name=exchange_ratio_userscore,json=exchangeRatioUserscore" json:"exchange_ratio_userscore,omitempty"`
	ExchangeRatioFishscore  *uint32              `protobuf:"varint,5,opt,name=exchange_ratio_fishscore,json=exchangeRatioFishscore" json:"exchange_ratio_fishscore,omitempty"`
	ExchangeCount           *uint32              `protobuf:"varint,6,opt,name=exchange_count,json=exchangeCount" json:"exchange_count,omitempty"`
	MinBulletMultiple       *uint32              `protobuf:"varint,7,opt,name=min_bullet_multiple,json=minBulletMultiple" json:"min_bullet_multiple,omitempty"`
	MaxBulletMultiple       *uint32              `protobuf:"varint,8,opt,name=max_bullet_multiple,json=maxBulletMultiple" json:"max_bullet_multiple,omitempty"`
	SceneId                 *uint32              `protobuf:"varint,9,opt,name=scene_id,json=sceneId" json:"scene_id,omitempty"`
	PauseTime               *int32               `protobuf:"varint,10,opt,name=pause_time,json=pauseTime" json:"pause_time,omitempty"`
	TableUsers              []*TagUserInfo       `protobuf:"bytes,11,rep,name=table_users,json=tableUsers" json:"table_users,omitempty"`
	BonusFish               *int32               `protobuf:"varint,12,opt,name=bonus_fish,json=bonusFish" json:"bonus_fish,omitempty"`
	ButtleNum               *int32               `protobuf:"varint,13,opt,name=buttle_num,json=buttleNum" json:"buttle_num,omitempty"`
	AlmsGetCount            *int32               `protobuf:"varint,14,opt,name=alms_get_count,json=almsGetCount" json:"alms_get_count,omitempty"`
	SceneType               *int32               `protobuf:"varint,15,opt,name=scene_type,json=sceneType" json:"scene_type,omitempty"`
	RewardpoolOpt           *TagRewardPoolOption `protobuf:"bytes,16,opt,name=rewardpool_opt,json=rewardpoolOpt" json:"rewardpool_opt,omitempty"`
	TableId                 *int32               `protobuf:"varint,17,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	IsMaster                *bool                `protobuf:"varint,18,opt,name=is_master,json=isMaster" json:"is_master,omitempty"`
	GameTime                *int32               `protobuf:"varint,19,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	XXX_unrecognized        []byte               `json:"-"`
}

func (m *CMD_S_ENTER_SCENE) Reset()                    { *m = CMD_S_ENTER_SCENE{} }
func (m *CMD_S_ENTER_SCENE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_ENTER_SCENE) ProtoMessage()               {}
func (*CMD_S_ENTER_SCENE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CMD_S_ENTER_SCENE) GetIsSpecialScene() bool {
	if m != nil && m.IsSpecialScene != nil {
		return *m.IsSpecialScene
	}
	return false
}

func (m *CMD_S_ENTER_SCENE) GetSpecialSceeneWaitedTime() uint32 {
	if m != nil && m.SpecialSceeneWaitedTime != nil {
		return *m.SpecialSceeneWaitedTime
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetTickCount() uint32 {
	if m != nil && m.TickCount != nil {
		return *m.TickCount
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetExchangeRatioUserscore() uint32 {
	if m != nil && m.ExchangeRatioUserscore != nil {
		return *m.ExchangeRatioUserscore
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetExchangeRatioFishscore() uint32 {
	if m != nil && m.ExchangeRatioFishscore != nil {
		return *m.ExchangeRatioFishscore
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetExchangeCount() uint32 {
	if m != nil && m.ExchangeCount != nil {
		return *m.ExchangeCount
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetMinBulletMultiple() uint32 {
	if m != nil && m.MinBulletMultiple != nil {
		return *m.MinBulletMultiple
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetMaxBulletMultiple() uint32 {
	if m != nil && m.MaxBulletMultiple != nil {
		return *m.MaxBulletMultiple
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetSceneId() uint32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetPauseTime() int32 {
	if m != nil && m.PauseTime != nil {
		return *m.PauseTime
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetTableUsers() []*TagUserInfo {
	if m != nil {
		return m.TableUsers
	}
	return nil
}

func (m *CMD_S_ENTER_SCENE) GetBonusFish() int32 {
	if m != nil && m.BonusFish != nil {
		return *m.BonusFish
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetButtleNum() int32 {
	if m != nil && m.ButtleNum != nil {
		return *m.ButtleNum
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetAlmsGetCount() int32 {
	if m != nil && m.AlmsGetCount != nil {
		return *m.AlmsGetCount
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetSceneType() int32 {
	if m != nil && m.SceneType != nil {
		return *m.SceneType
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetRewardpoolOpt() *TagRewardPoolOption {
	if m != nil {
		return m.RewardpoolOpt
	}
	return nil
}

func (m *CMD_S_ENTER_SCENE) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *CMD_S_ENTER_SCENE) GetIsMaster() bool {
	if m != nil && m.IsMaster != nil {
		return *m.IsMaster
	}
	return false
}

func (m *CMD_S_ENTER_SCENE) GetGameTime() int32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

// 其他玩家进入场景
type CMD_S_OTHER_ENTER_SCENE struct {
	UserInfo         *TagUserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo" json:"user_info,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CMD_S_OTHER_ENTER_SCENE) Reset()                    { *m = CMD_S_OTHER_ENTER_SCENE{} }
func (m *CMD_S_OTHER_ENTER_SCENE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_OTHER_ENTER_SCENE) ProtoMessage()               {}
func (*CMD_S_OTHER_ENTER_SCENE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CMD_S_OTHER_ENTER_SCENE) GetUserInfo() *TagUserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

// 离开场景
type CMD_S_EXIT_SCENE struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChairId          *int32  `protobuf:"varint,2,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	TableId          *int32  `protobuf:"varint,3,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_EXIT_SCENE) Reset()                    { *m = CMD_S_EXIT_SCENE{} }
func (m *CMD_S_EXIT_SCENE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_EXIT_SCENE) ProtoMessage()               {}
func (*CMD_S_EXIT_SCENE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CMD_S_EXIT_SCENE) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_EXIT_SCENE) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_EXIT_SCENE) GetTableId() int32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

// 转换场景消息
type CMD_S_SWITCH_SCENE struct {
	NextScene        *uint32 `protobuf:"varint,1,opt,name=next_scene,json=nextScene" json:"next_scene,omitempty"`
	TickCount        *uint32 `protobuf:"varint,2,opt,name=tick_count,json=tickCount" json:"tick_count,omitempty"`
	FishKind         *uint32 `protobuf:"varint,3,opt,name=fish_kind,json=fishKind" json:"fish_kind,omitempty"`
	FishAddProb      *uint32 `protobuf:"varint,4,opt,name=fish_add_prob,json=fishAddProb" json:"fish_add_prob,omitempty"`
	SwitchType       *uint32 `protobuf:"varint,5,opt,name=switch_type,json=switchType" json:"switch_type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_SWITCH_SCENE) Reset()                    { *m = CMD_S_SWITCH_SCENE{} }
func (m *CMD_S_SWITCH_SCENE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SWITCH_SCENE) ProtoMessage()               {}
func (*CMD_S_SWITCH_SCENE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CMD_S_SWITCH_SCENE) GetNextScene() uint32 {
	if m != nil && m.NextScene != nil {
		return *m.NextScene
	}
	return 0
}

func (m *CMD_S_SWITCH_SCENE) GetTickCount() uint32 {
	if m != nil && m.TickCount != nil {
		return *m.TickCount
	}
	return 0
}

func (m *CMD_S_SWITCH_SCENE) GetFishKind() uint32 {
	if m != nil && m.FishKind != nil {
		return *m.FishKind
	}
	return 0
}

func (m *CMD_S_SWITCH_SCENE) GetFishAddProb() uint32 {
	if m != nil && m.FishAddProb != nil {
		return *m.FishAddProb
	}
	return 0
}

func (m *CMD_S_SWITCH_SCENE) GetSwitchType() uint32 {
	if m != nil && m.SwitchType != nil {
		return *m.SwitchType
	}
	return 0
}

// 场景结束
type CMD_S_FISH_FORM_END struct {
	SwitchType       *uint32 `protobuf:"varint,1,opt,name=switch_type,json=switchType" json:"switch_type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_FISH_FORM_END) Reset()                    { *m = CMD_S_FISH_FORM_END{} }
func (m *CMD_S_FISH_FORM_END) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_FISH_FORM_END) ProtoMessage()               {}
func (*CMD_S_FISH_FORM_END) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CMD_S_FISH_FORM_END) GetSwitchType() uint32 {
	if m != nil && m.SwitchType != nil {
		return *m.SwitchType
	}
	return 0
}

// 场景状态信息
type CMD_S_SCENE_STATE struct {
	SceneStateType   *int32  `protobuf:"varint,1,opt,name=scene_state_type,json=sceneStateType" json:"scene_state_type,omitempty"`
	SurplusTime      *uint32 `protobuf:"varint,2,opt,name=surplus_time,json=surplusTime" json:"surplus_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_SCENE_STATE) Reset()                    { *m = CMD_S_SCENE_STATE{} }
func (m *CMD_S_SCENE_STATE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SCENE_STATE) ProtoMessage()               {}
func (*CMD_S_SCENE_STATE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CMD_S_SCENE_STATE) GetSceneStateType() int32 {
	if m != nil && m.SceneStateType != nil {
		return *m.SceneStateType
	}
	return 0
}

func (m *CMD_S_SCENE_STATE) GetSurplusTime() uint32 {
	if m != nil && m.SurplusTime != nil {
		return *m.SurplusTime
	}
	return 0
}

// 鱼的状态信息
type CMD_S_FISH_STATE_INFO struct {
	Uid              *uint32 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	FishState        *uint32 `protobuf:"varint,2,opt,name=fish_state,json=fishState" json:"fish_state,omitempty"`
	FishStateC       *uint32 `protobuf:"varint,3,opt,name=fish_state_c,json=fishStateC" json:"fish_state_c,omitempty"`
	Speed            *uint32 `protobuf:"varint,4,opt,name=speed" json:"speed,omitempty"`
	ChangeMulriple   *uint32 `protobuf:"varint,5,opt,name=change_mulriple,json=changeMulriple" json:"change_mulriple,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_FISH_STATE_INFO) Reset()                    { *m = CMD_S_FISH_STATE_INFO{} }
func (m *CMD_S_FISH_STATE_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_FISH_STATE_INFO) ProtoMessage()               {}
func (*CMD_S_FISH_STATE_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CMD_S_FISH_STATE_INFO) GetUid() uint32 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *CMD_S_FISH_STATE_INFO) GetFishState() uint32 {
	if m != nil && m.FishState != nil {
		return *m.FishState
	}
	return 0
}

func (m *CMD_S_FISH_STATE_INFO) GetFishStateC() uint32 {
	if m != nil && m.FishStateC != nil {
		return *m.FishStateC
	}
	return 0
}

func (m *CMD_S_FISH_STATE_INFO) GetSpeed() uint32 {
	if m != nil && m.Speed != nil {
		return *m.Speed
	}
	return 0
}

func (m *CMD_S_FISH_STATE_INFO) GetChangeMulriple() uint32 {
	if m != nil && m.ChangeMulriple != nil {
		return *m.ChangeMulriple
	}
	return 0
}

// 食人鱼的攻击状态信息
type CMD_S_PIRANHA_ATTACK_INFO struct {
	Uid              *uint32 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	ChairID          *uint32 `protobuf:"varint,2,opt,name=chairID" json:"chairID,omitempty"`
	Damage           *uint32 `protobuf:"varint,3,opt,name=damage" json:"damage,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_PIRANHA_ATTACK_INFO) Reset()                    { *m = CMD_S_PIRANHA_ATTACK_INFO{} }
func (m *CMD_S_PIRANHA_ATTACK_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_PIRANHA_ATTACK_INFO) ProtoMessage()               {}
func (*CMD_S_PIRANHA_ATTACK_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CMD_S_PIRANHA_ATTACK_INFO) GetUid() uint32 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *CMD_S_PIRANHA_ATTACK_INFO) GetChairID() uint32 {
	if m != nil && m.ChairID != nil {
		return *m.ChairID
	}
	return 0
}

func (m *CMD_S_PIRANHA_ATTACK_INFO) GetDamage() uint32 {
	if m != nil && m.Damage != nil {
		return *m.Damage
	}
	return 0
}

// 场景鱼
type TagSceneFish struct {
	Uid              *uint32  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	KindId           *uint32  `protobuf:"varint,2,opt,name=kind_id,json=kindId" json:"kind_id,omitempty"`
	PathId           *uint32  `protobuf:"varint,3,opt,name=path_id,json=pathId" json:"path_id,omitempty"`
	PathIndex        *int32   `protobuf:"varint,4,opt,name=path_index,json=pathIndex" json:"path_index,omitempty"`
	Tag              *uint32  `protobuf:"varint,5,opt,name=tag" json:"tag,omitempty"`
	Speed            *uint32  `protobuf:"varint,6,opt,name=speed" json:"speed,omitempty"`
	OffsetX          *float32 `protobuf:"fixed32,7,opt,name=offset_x,json=offsetX" json:"offset_x,omitempty"`
	OffsetY          *float32 `protobuf:"fixed32,8,opt,name=offset_y,json=offsetY" json:"offset_y,omitempty"`
	BoatId           *uint32  `protobuf:"varint,9,opt,name=boat_id,json=boatId" json:"boat_id,omitempty"`
	AliveState       *uint32  `protobuf:"varint,10,opt,name=alive_state,json=aliveState" json:"alive_state,omitempty"`
	IsFormFish       *bool    `protobuf:"varint,11,opt,name=is_form_fish,json=isFormFish" json:"is_form_fish,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TagSceneFish) Reset()                    { *m = TagSceneFish{} }
func (m *TagSceneFish) String() string            { return proto.CompactTextString(m) }
func (*TagSceneFish) ProtoMessage()               {}
func (*TagSceneFish) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TagSceneFish) GetUid() uint32 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *TagSceneFish) GetKindId() uint32 {
	if m != nil && m.KindId != nil {
		return *m.KindId
	}
	return 0
}

func (m *TagSceneFish) GetPathId() uint32 {
	if m != nil && m.PathId != nil {
		return *m.PathId
	}
	return 0
}

func (m *TagSceneFish) GetPathIndex() int32 {
	if m != nil && m.PathIndex != nil {
		return *m.PathIndex
	}
	return 0
}

func (m *TagSceneFish) GetTag() uint32 {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return 0
}

func (m *TagSceneFish) GetSpeed() uint32 {
	if m != nil && m.Speed != nil {
		return *m.Speed
	}
	return 0
}

func (m *TagSceneFish) GetOffsetX() float32 {
	if m != nil && m.OffsetX != nil {
		return *m.OffsetX
	}
	return 0
}

func (m *TagSceneFish) GetOffsetY() float32 {
	if m != nil && m.OffsetY != nil {
		return *m.OffsetY
	}
	return 0
}

func (m *TagSceneFish) GetBoatId() uint32 {
	if m != nil && m.BoatId != nil {
		return *m.BoatId
	}
	return 0
}

func (m *TagSceneFish) GetAliveState() uint32 {
	if m != nil && m.AliveState != nil {
		return *m.AliveState
	}
	return 0
}

func (m *TagSceneFish) GetIsFormFish() bool {
	if m != nil && m.IsFormFish != nil {
		return *m.IsFormFish
	}
	return false
}

// 服务器发送场景鱼
type CMD_S_SCENE_FISH struct {
	SceneFishs       []*TagSceneFish `protobuf:"bytes,1,rep,name=scene_fishs,json=sceneFishs" json:"scene_fishs,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CMD_S_SCENE_FISH) Reset()                    { *m = CMD_S_SCENE_FISH{} }
func (m *CMD_S_SCENE_FISH) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SCENE_FISH) ProtoMessage()               {}
func (*CMD_S_SCENE_FISH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CMD_S_SCENE_FISH) GetSceneFishs() []*TagSceneFish {
	if m != nil {
		return m.SceneFishs
	}
	return nil
}

// 场景子弹
type TagSceneBullet struct {
	ChairId          *int32   `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	BulletId         *uint32  `protobuf:"varint,2,opt,name=bullet_id,json=bulletId" json:"bullet_id,omitempty"`
	PosX             *float32 `protobuf:"fixed32,3,opt,name=pos_x,json=posX" json:"pos_x,omitempty"`
	PosY             *float32 `protobuf:"fixed32,4,opt,name=pos_y,json=posY" json:"pos_y,omitempty"`
	Angle            *float32 `protobuf:"fixed32,5,opt,name=angle" json:"angle,omitempty"`
	TickCount        *uint32  `protobuf:"varint,6,opt,name=tick_count,json=tickCount" json:"tick_count,omitempty"`
	BulletMulriple   *uint32  `protobuf:"varint,7,opt,name=bullet_mulriple,json=bulletMulriple" json:"bullet_mulriple,omitempty"`
	IsDouble         *bool    `protobuf:"varint,8,opt,name=is_double,json=isDouble" json:"is_double,omitempty"`
	LockFishId       *uint32  `protobuf:"varint,9,opt,name=lock_fish_id,json=lockFishId" json:"lock_fish_id,omitempty"`
	BulletNum        *uint32  `protobuf:"varint,10,opt,name=bullet_num,json=bulletNum" json:"bullet_num,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TagSceneBullet) Reset()                    { *m = TagSceneBullet{} }
func (m *TagSceneBullet) String() string            { return proto.CompactTextString(m) }
func (*TagSceneBullet) ProtoMessage()               {}
func (*TagSceneBullet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TagSceneBullet) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *TagSceneBullet) GetBulletId() uint32 {
	if m != nil && m.BulletId != nil {
		return *m.BulletId
	}
	return 0
}

func (m *TagSceneBullet) GetPosX() float32 {
	if m != nil && m.PosX != nil {
		return *m.PosX
	}
	return 0
}

func (m *TagSceneBullet) GetPosY() float32 {
	if m != nil && m.PosY != nil {
		return *m.PosY
	}
	return 0
}

func (m *TagSceneBullet) GetAngle() float32 {
	if m != nil && m.Angle != nil {
		return *m.Angle
	}
	return 0
}

func (m *TagSceneBullet) GetTickCount() uint32 {
	if m != nil && m.TickCount != nil {
		return *m.TickCount
	}
	return 0
}

func (m *TagSceneBullet) GetBulletMulriple() uint32 {
	if m != nil && m.BulletMulriple != nil {
		return *m.BulletMulriple
	}
	return 0
}

func (m *TagSceneBullet) GetIsDouble() bool {
	if m != nil && m.IsDouble != nil {
		return *m.IsDouble
	}
	return false
}

func (m *TagSceneBullet) GetLockFishId() uint32 {
	if m != nil && m.LockFishId != nil {
		return *m.LockFishId
	}
	return 0
}

func (m *TagSceneBullet) GetBulletNum() uint32 {
	if m != nil && m.BulletNum != nil {
		return *m.BulletNum
	}
	return 0
}

// 发送场景子弹
type CMD_S_SCENE_BULLET struct {
	SceneBullets     []*TagSceneBullet `protobuf:"bytes,1,rep,name=scene_bullets,json=sceneBullets" json:"scene_bullets,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CMD_S_SCENE_BULLET) Reset()                    { *m = CMD_S_SCENE_BULLET{} }
func (m *CMD_S_SCENE_BULLET) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SCENE_BULLET) ProtoMessage()               {}
func (*CMD_S_SCENE_BULLET) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CMD_S_SCENE_BULLET) GetSceneBullets() []*TagSceneBullet {
	if m != nil {
		return m.SceneBullets
	}
	return nil
}

// 生成鱼
type CMD_S_DISTRIBUTE_FISH struct {
	Fishs            []*TagSceneFish `protobuf:"bytes,1,rep,name=fishs" json:"fishs,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CMD_S_DISTRIBUTE_FISH) Reset()                    { *m = CMD_S_DISTRIBUTE_FISH{} }
func (m *CMD_S_DISTRIBUTE_FISH) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_DISTRIBUTE_FISH) ProtoMessage()               {}
func (*CMD_S_DISTRIBUTE_FISH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CMD_S_DISTRIBUTE_FISH) GetFishs() []*TagSceneFish {
	if m != nil {
		return m.Fishs
	}
	return nil
}

// 客户端开炮
type CMD_C_USER_FIRE struct {
	TickCount        *uint64  `protobuf:"varint,1,opt,name=tick_count,json=tickCount" json:"tick_count,omitempty"`
	Angle            *float32 `protobuf:"fixed32,2,opt,name=angle" json:"angle,omitempty"`
	LockFishId       *uint32  `protobuf:"varint,3,opt,name=lock_fish_id,json=lockFishId" json:"lock_fish_id,omitempty"`
	BulletMulriple   *uint32  `protobuf:"varint,4,opt,name=bullet_mulriple,json=bulletMulriple" json:"bullet_mulriple,omitempty"`
	BulletTempId     *uint32  `protobuf:"varint,5,opt,name=bullet_temp_id,json=bulletTempId" json:"bullet_temp_id,omitempty"`
	BulletNum        *uint32  `protobuf:"varint,6,opt,name=bullet_num,json=bulletNum" json:"bullet_num,omitempty"`
	IsBroadcast      *bool    `protobuf:"varint,7,opt,name=is_broadcast,json=isBroadcast" json:"is_broadcast,omitempty"`
	IsDouble         *bool    `protobuf:"varint,8,opt,name=is_double,json=isDouble" json:"is_double,omitempty"`
	SfSkillId        *uint32  `protobuf:"varint,9,opt,name=sf_skill_id,json=sfSkillId" json:"sf_skill_id,omitempty"`
	MonsterUpper     *uint32  `protobuf:"varint,10,opt,name=monster_upper,json=monsterUpper" json:"monster_upper,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_C_USER_FIRE) Reset()                    { *m = CMD_C_USER_FIRE{} }
func (m *CMD_C_USER_FIRE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_USER_FIRE) ProtoMessage()               {}
func (*CMD_C_USER_FIRE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CMD_C_USER_FIRE) GetTickCount() uint64 {
	if m != nil && m.TickCount != nil {
		return *m.TickCount
	}
	return 0
}

func (m *CMD_C_USER_FIRE) GetAngle() float32 {
	if m != nil && m.Angle != nil {
		return *m.Angle
	}
	return 0
}

func (m *CMD_C_USER_FIRE) GetLockFishId() uint32 {
	if m != nil && m.LockFishId != nil {
		return *m.LockFishId
	}
	return 0
}

func (m *CMD_C_USER_FIRE) GetBulletMulriple() uint32 {
	if m != nil && m.BulletMulriple != nil {
		return *m.BulletMulriple
	}
	return 0
}

func (m *CMD_C_USER_FIRE) GetBulletTempId() uint32 {
	if m != nil && m.BulletTempId != nil {
		return *m.BulletTempId
	}
	return 0
}

func (m *CMD_C_USER_FIRE) GetBulletNum() uint32 {
	if m != nil && m.BulletNum != nil {
		return *m.BulletNum
	}
	return 0
}

func (m *CMD_C_USER_FIRE) GetIsBroadcast() bool {
	if m != nil && m.IsBroadcast != nil {
		return *m.IsBroadcast
	}
	return false
}

func (m *CMD_C_USER_FIRE) GetIsDouble() bool {
	if m != nil && m.IsDouble != nil {
		return *m.IsDouble
	}
	return false
}

func (m *CMD_C_USER_FIRE) GetSfSkillId() uint32 {
	if m != nil && m.SfSkillId != nil {
		return *m.SfSkillId
	}
	return 0
}

func (m *CMD_C_USER_FIRE) GetMonsterUpper() uint32 {
	if m != nil && m.MonsterUpper != nil {
		return *m.MonsterUpper
	}
	return 0
}

// 服务器返回客户端开炮
type CMD_S_USER_FIRE struct {
	ChairId          *int32   `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	BulletId         *uint32  `protobuf:"varint,2,opt,name=bullet_id,json=bulletId" json:"bullet_id,omitempty"`
	Angle            *float32 `protobuf:"fixed32,3,opt,name=angle" json:"angle,omitempty"`
	BulletDouble     *bool    `protobuf:"varint,4,opt,name=bullet_double,json=bulletDouble" json:"bullet_double,omitempty"`
	BulletMulriple   *uint32  `protobuf:"varint,5,opt,name=bullet_mulriple,json=bulletMulriple" json:"bullet_mulriple,omitempty"`
	LockFishId       *uint32  `protobuf:"varint,6,opt,name=lock_fish_id,json=lockFishId" json:"lock_fish_id,omitempty"`
	BulletTempId     *uint32  `protobuf:"varint,7,opt,name=bullet_temp_id,json=bulletTempId" json:"bullet_temp_id,omitempty"`
	BindUserId       *uint32  `protobuf:"varint,8,opt,name=bind_user_id,json=bindUserId" json:"bind_user_id,omitempty"`
	BulletNum        *uint32  `protobuf:"varint,9,opt,name=bullet_num,json=bulletNum" json:"bullet_num,omitempty"`
	CurrScore        *int64   `protobuf:"varint,10,opt,name=curr_score,json=currScore" json:"curr_score,omitempty"`
	CurrTime         *uint32  `protobuf:"varint,11,opt,name=curr_time,json=currTime" json:"curr_time,omitempty"`
	SfSkillId        *uint32  `protobuf:"varint,12,opt,name=sf_skill_id,json=sfSkillId" json:"sf_skill_id,omitempty"`
	CostScore        *int64   `protobuf:"varint,13,opt,name=cost_score,json=costScore" json:"cost_score,omitempty"`
	CurrDaimond      *int64   `protobuf:"varint,14,opt,name=curr_daimond,json=currDaimond" json:"curr_daimond,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_S_USER_FIRE) Reset()                    { *m = CMD_S_USER_FIRE{} }
func (m *CMD_S_USER_FIRE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_USER_FIRE) ProtoMessage()               {}
func (*CMD_S_USER_FIRE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CMD_S_USER_FIRE) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_USER_FIRE) GetBulletId() uint32 {
	if m != nil && m.BulletId != nil {
		return *m.BulletId
	}
	return 0
}

func (m *CMD_S_USER_FIRE) GetAngle() float32 {
	if m != nil && m.Angle != nil {
		return *m.Angle
	}
	return 0
}

func (m *CMD_S_USER_FIRE) GetBulletDouble() bool {
	if m != nil && m.BulletDouble != nil {
		return *m.BulletDouble
	}
	return false
}

func (m *CMD_S_USER_FIRE) GetBulletMulriple() uint32 {
	if m != nil && m.BulletMulriple != nil {
		return *m.BulletMulriple
	}
	return 0
}

func (m *CMD_S_USER_FIRE) GetLockFishId() uint32 {
	if m != nil && m.LockFishId != nil {
		return *m.LockFishId
	}
	return 0
}

func (m *CMD_S_USER_FIRE) GetBulletTempId() uint32 {
	if m != nil && m.BulletTempId != nil {
		return *m.BulletTempId
	}
	return 0
}

func (m *CMD_S_USER_FIRE) GetBindUserId() uint32 {
	if m != nil && m.BindUserId != nil {
		return *m.BindUserId
	}
	return 0
}

func (m *CMD_S_USER_FIRE) GetBulletNum() uint32 {
	if m != nil && m.BulletNum != nil {
		return *m.BulletNum
	}
	return 0
}

func (m *CMD_S_USER_FIRE) GetCurrScore() int64 {
	if m != nil && m.CurrScore != nil {
		return *m.CurrScore
	}
	return 0
}

func (m *CMD_S_USER_FIRE) GetCurrTime() uint32 {
	if m != nil && m.CurrTime != nil {
		return *m.CurrTime
	}
	return 0
}

func (m *CMD_S_USER_FIRE) GetSfSkillId() uint32 {
	if m != nil && m.SfSkillId != nil {
		return *m.SfSkillId
	}
	return 0
}

func (m *CMD_S_USER_FIRE) GetCostScore() int64 {
	if m != nil && m.CostScore != nil {
		return *m.CostScore
	}
	return 0
}

func (m *CMD_S_USER_FIRE) GetCurrDaimond() int64 {
	if m != nil && m.CurrDaimond != nil {
		return *m.CurrDaimond
	}
	return 0
}

// 使用技能
type CMD_C_USE_SKILL struct {
	SkillId          *uint32 `protobuf:"varint,1,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	TargetId         *uint32 `protobuf:"varint,2,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
	IsTrigger        *bool   `protobuf:"varint,3,opt,name=is_trigger,json=isTrigger" json:"is_trigger,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_USE_SKILL) Reset()                    { *m = CMD_C_USE_SKILL{} }
func (m *CMD_C_USE_SKILL) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_USE_SKILL) ProtoMessage()               {}
func (*CMD_C_USE_SKILL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CMD_C_USE_SKILL) GetSkillId() uint32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *CMD_C_USE_SKILL) GetTargetId() uint32 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

func (m *CMD_C_USE_SKILL) GetIsTrigger() bool {
	if m != nil && m.IsTrigger != nil {
		return *m.IsTrigger
	}
	return false
}

// 使用技能
type CMD_S_USE_SKILL struct {
	ChairId          *int32  `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	SkillId          *uint32 `protobuf:"varint,2,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	Used             *uint32 `protobuf:"varint,3,opt,name=used" json:"used,omitempty"`
	Total            *uint32 `protobuf:"varint,4,opt,name=total" json:"total,omitempty"`
	ScoreCost        *uint32 `protobuf:"varint,5,opt,name=score_cost,json=scoreCost" json:"score_cost,omitempty"`
	SkillStatus      *int32  `protobuf:"varint,6,opt,name=skill_status,json=skillStatus" json:"skill_status,omitempty"`
	BindUserId       *uint32 `protobuf:"varint,7,opt,name=bind_user_id,json=bindUserId" json:"bind_user_id,omitempty"`
	TargetId         *uint32 `protobuf:"varint,8,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
	AddSecs          *uint32 `protobuf:"varint,9,opt,name=add_secs,json=addSecs" json:"add_secs,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_USE_SKILL) Reset()                    { *m = CMD_S_USE_SKILL{} }
func (m *CMD_S_USE_SKILL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_USE_SKILL) ProtoMessage()               {}
func (*CMD_S_USE_SKILL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CMD_S_USE_SKILL) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_USE_SKILL) GetSkillId() uint32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *CMD_S_USE_SKILL) GetUsed() uint32 {
	if m != nil && m.Used != nil {
		return *m.Used
	}
	return 0
}

func (m *CMD_S_USE_SKILL) GetTotal() uint32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *CMD_S_USE_SKILL) GetScoreCost() uint32 {
	if m != nil && m.ScoreCost != nil {
		return *m.ScoreCost
	}
	return 0
}

func (m *CMD_S_USE_SKILL) GetSkillStatus() int32 {
	if m != nil && m.SkillStatus != nil {
		return *m.SkillStatus
	}
	return 0
}

func (m *CMD_S_USE_SKILL) GetBindUserId() uint32 {
	if m != nil && m.BindUserId != nil {
		return *m.BindUserId
	}
	return 0
}

func (m *CMD_S_USE_SKILL) GetTargetId() uint32 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

func (m *CMD_S_USE_SKILL) GetAddSecs() uint32 {
	if m != nil && m.AddSecs != nil {
		return *m.AddSecs
	}
	return 0
}

// 技能结束
type CMD_C_SKILL_FINISH struct {
	ChairId          *int32  `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	SkillId          *uint32 `protobuf:"varint,2,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_SKILL_FINISH) Reset()                    { *m = CMD_C_SKILL_FINISH{} }
func (m *CMD_C_SKILL_FINISH) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_SKILL_FINISH) ProtoMessage()               {}
func (*CMD_C_SKILL_FINISH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CMD_C_SKILL_FINISH) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_C_SKILL_FINISH) GetSkillId() uint32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

// 购买技能
type CMD_C_BUY_SKILL struct {
	SkillId          *uint32 `protobuf:"varint,1,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	Count            *int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	TargetId         *uint32 `protobuf:"varint,3,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_BUY_SKILL) Reset()                    { *m = CMD_C_BUY_SKILL{} }
func (m *CMD_C_BUY_SKILL) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_BUY_SKILL) ProtoMessage()               {}
func (*CMD_C_BUY_SKILL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CMD_C_BUY_SKILL) GetSkillId() uint32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *CMD_C_BUY_SKILL) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CMD_C_BUY_SKILL) GetTargetId() uint32 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

// 服务器返回技能
type CMD_S_BUY_SKILL struct {
	SkillStatus      *int32  `protobuf:"varint,1,opt,name=skill_status,json=skillStatus" json:"skill_status,omitempty"`
	ChairId          *int32  `protobuf:"varint,2,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	SkillId          *uint32 `protobuf:"varint,3,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	ScoreCost        *int64  `protobuf:"varint,4,opt,name=score_cost,json=scoreCost" json:"score_cost,omitempty"`
	Count            *int32  `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_BUY_SKILL) Reset()                    { *m = CMD_S_BUY_SKILL{} }
func (m *CMD_S_BUY_SKILL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_BUY_SKILL) ProtoMessage()               {}
func (*CMD_S_BUY_SKILL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CMD_S_BUY_SKILL) GetSkillStatus() int32 {
	if m != nil && m.SkillStatus != nil {
		return *m.SkillStatus
	}
	return 0
}

func (m *CMD_S_BUY_SKILL) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_BUY_SKILL) GetSkillId() uint32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *CMD_S_BUY_SKILL) GetScoreCost() int64 {
	if m != nil && m.ScoreCost != nil {
		return *m.ScoreCost
	}
	return 0
}

func (m *CMD_S_BUY_SKILL) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// 捕获鱼儿(单个)
type CMD_C_CATCH_FISH struct {
	FishUid          *uint32 `protobuf:"varint,1,opt,name=fish_uid,json=fishUid" json:"fish_uid,omitempty"`
	BulletId         *uint32 `protobuf:"varint,2,opt,name=bullet_id,json=bulletId" json:"bullet_id,omitempty"`
	BulletTempId     *uint32 `protobuf:"varint,3,opt,name=bullet_temp_id,json=bulletTempId" json:"bullet_temp_id,omitempty"`
	ChairId          *uint32 `protobuf:"varint,4,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	WeaknessId       *uint32 `protobuf:"varint,5,opt,name=weakness_id,json=weaknessId" json:"weakness_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_CATCH_FISH) Reset()                    { *m = CMD_C_CATCH_FISH{} }
func (m *CMD_C_CATCH_FISH) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_CATCH_FISH) ProtoMessage()               {}
func (*CMD_C_CATCH_FISH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CMD_C_CATCH_FISH) GetFishUid() uint32 {
	if m != nil && m.FishUid != nil {
		return *m.FishUid
	}
	return 0
}

func (m *CMD_C_CATCH_FISH) GetBulletId() uint32 {
	if m != nil && m.BulletId != nil {
		return *m.BulletId
	}
	return 0
}

func (m *CMD_C_CATCH_FISH) GetBulletTempId() uint32 {
	if m != nil && m.BulletTempId != nil {
		return *m.BulletTempId
	}
	return 0
}

func (m *CMD_C_CATCH_FISH) GetChairId() uint32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_C_CATCH_FISH) GetWeaknessId() uint32 {
	if m != nil && m.WeaknessId != nil {
		return *m.WeaknessId
	}
	return 0
}

// 钻头捕获鱼
type CMD_SUB_C_DRILL_CATCH_FISH struct {
	ChairId          *uint32  `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	SfSkillId        *uint32  `protobuf:"varint,2,opt,name=sf_skill_id,json=sfSkillId" json:"sf_skill_id,omitempty"`
	SfFishId         *uint32  `protobuf:"varint,3,opt,name=sf_fish_id,json=sfFishId" json:"sf_fish_id,omitempty"`
	FishId           []uint32 `protobuf:"varint,4,rep,name=fish_id,json=fishId" json:"fish_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_SUB_C_DRILL_CATCH_FISH) Reset()                    { *m = CMD_SUB_C_DRILL_CATCH_FISH{} }
func (m *CMD_SUB_C_DRILL_CATCH_FISH) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_C_DRILL_CATCH_FISH) ProtoMessage()               {}
func (*CMD_SUB_C_DRILL_CATCH_FISH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CMD_SUB_C_DRILL_CATCH_FISH) GetChairId() uint32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_SUB_C_DRILL_CATCH_FISH) GetSfSkillId() uint32 {
	if m != nil && m.SfSkillId != nil {
		return *m.SfSkillId
	}
	return 0
}

func (m *CMD_SUB_C_DRILL_CATCH_FISH) GetSfFishId() uint32 {
	if m != nil && m.SfFishId != nil {
		return *m.SfFishId
	}
	return 0
}

func (m *CMD_SUB_C_DRILL_CATCH_FISH) GetFishId() []uint32 {
	if m != nil {
		return m.FishId
	}
	return nil
}

// 钻头消失
type CMD_SUB_S_DRILL_DISAPPEAR struct {
	ChairId          *uint32 `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	SfSkillId        *uint32 `protobuf:"varint,2,opt,name=sf_skill_id,json=sfSkillId" json:"sf_skill_id,omitempty"`
	SfFishId         *uint32 `protobuf:"varint,3,opt,name=sf_fish_id,json=sfFishId" json:"sf_fish_id,omitempty"`
	TotalScore       *int64  `protobuf:"varint,4,opt,name=total_score,json=totalScore" json:"total_score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_SUB_S_DRILL_DISAPPEAR) Reset()                    { *m = CMD_SUB_S_DRILL_DISAPPEAR{} }
func (m *CMD_SUB_S_DRILL_DISAPPEAR) String() string            { return proto.CompactTextString(m) }
func (*CMD_SUB_S_DRILL_DISAPPEAR) ProtoMessage()               {}
func (*CMD_SUB_S_DRILL_DISAPPEAR) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CMD_SUB_S_DRILL_DISAPPEAR) GetChairId() uint32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_SUB_S_DRILL_DISAPPEAR) GetSfSkillId() uint32 {
	if m != nil && m.SfSkillId != nil {
		return *m.SfSkillId
	}
	return 0
}

func (m *CMD_SUB_S_DRILL_DISAPPEAR) GetSfFishId() uint32 {
	if m != nil && m.SfFishId != nil {
		return *m.SfFishId
	}
	return 0
}

func (m *CMD_SUB_S_DRILL_DISAPPEAR) GetTotalScore() int64 {
	if m != nil && m.TotalScore != nil {
		return *m.TotalScore
	}
	return 0
}

// 掉落道具
type TagDropItem struct {
	ItemId           *uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemNum          *uint32 `protobuf:"varint,2,opt,name=item_num,json=itemNum" json:"item_num,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagDropItem) Reset()                    { *m = TagDropItem{} }
func (m *TagDropItem) String() string            { return proto.CompactTextString(m) }
func (*TagDropItem) ProtoMessage()               {}
func (*TagDropItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *TagDropItem) GetItemId() uint32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *TagDropItem) GetItemNum() uint32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

// 捕获鱼儿
type TagCatchFish struct {
	FishUid      *uint32 `protobuf:"varint,1,opt,name=fish_uid,json=fishUid" json:"fish_uid,omitempty"`
	FishKind     *uint32 `protobuf:"varint,2,opt,name=fish_kind,json=fishKind" json:"fish_kind,omitempty"`
	FishScore    *uint32 `protobuf:"varint,3,opt,name=fish_score,json=fishScore" json:"fish_score,omitempty"`
	FishLottery  *uint32 `protobuf:"varint,4,opt,name=fish_lottery,json=fishLottery" json:"fish_lottery,omitempty"`
	Diamond      *uint32 `protobuf:"varint,5,opt,name=diamond" json:"diamond,omitempty"`
	BulletDouble *bool   `protobuf:"varint,6,opt,name=bullet_double,json=bulletDouble" json:"bullet_double,omitempty"`
	LinkFishUid  *bool   `protobuf:"varint,7,opt,name=link_fish_uid,json=linkFishUid" json:"link_fish_uid,omitempty"`
	DeadSign     *bool   `protobuf:"varint,8,opt,name=dead_sign,json=deadSign" json:"dead_sign,omitempty"`
	SkillId      *uint32 `protobuf:"varint,9,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	// optional uint32 skill_num		= 10;				//获得技能数量--弃用
	FishMulriple      *uint32        `protobuf:"varint,11,opt,name=fish_mulriple,json=fishMulriple" json:"fish_mulriple,omitempty"`
	FishOriginalScore *uint32        `protobuf:"varint,12,opt,name=fish_original_score,json=fishOriginalScore" json:"fish_original_score,omitempty"`
	DropItems         []*TagDropItem `protobuf:"bytes,13,rep,name=drop_items,json=dropItems" json:"drop_items,omitempty"`
	FishScoreShow     *uint32        `protobuf:"varint,14,opt,name=fish_score_show,json=fishScoreShow" json:"fish_score_show,omitempty"`
	BuffId            *uint32        `protobuf:"varint,15,opt,name=buff_id,json=buffId" json:"buff_id,omitempty"`
	BuffTime          *int32         `protobuf:"varint,16,opt,name=buff_time,json=buffTime" json:"buff_time,omitempty"`
	BuffAdd           *int32         `protobuf:"varint,17,opt,name=buff_add,json=buffAdd" json:"buff_add,omitempty"`
	CritRate          *int32         `protobuf:"varint,18,opt,name=crit_rate,json=critRate" json:"crit_rate,omitempty"`
	XXX_unrecognized  []byte         `json:"-"`
}

func (m *TagCatchFish) Reset()                    { *m = TagCatchFish{} }
func (m *TagCatchFish) String() string            { return proto.CompactTextString(m) }
func (*TagCatchFish) ProtoMessage()               {}
func (*TagCatchFish) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *TagCatchFish) GetFishUid() uint32 {
	if m != nil && m.FishUid != nil {
		return *m.FishUid
	}
	return 0
}

func (m *TagCatchFish) GetFishKind() uint32 {
	if m != nil && m.FishKind != nil {
		return *m.FishKind
	}
	return 0
}

func (m *TagCatchFish) GetFishScore() uint32 {
	if m != nil && m.FishScore != nil {
		return *m.FishScore
	}
	return 0
}

func (m *TagCatchFish) GetFishLottery() uint32 {
	if m != nil && m.FishLottery != nil {
		return *m.FishLottery
	}
	return 0
}

func (m *TagCatchFish) GetDiamond() uint32 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *TagCatchFish) GetBulletDouble() bool {
	if m != nil && m.BulletDouble != nil {
		return *m.BulletDouble
	}
	return false
}

func (m *TagCatchFish) GetLinkFishUid() bool {
	if m != nil && m.LinkFishUid != nil {
		return *m.LinkFishUid
	}
	return false
}

func (m *TagCatchFish) GetDeadSign() bool {
	if m != nil && m.DeadSign != nil {
		return *m.DeadSign
	}
	return false
}

func (m *TagCatchFish) GetSkillId() uint32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *TagCatchFish) GetFishMulriple() uint32 {
	if m != nil && m.FishMulriple != nil {
		return *m.FishMulriple
	}
	return 0
}

func (m *TagCatchFish) GetFishOriginalScore() uint32 {
	if m != nil && m.FishOriginalScore != nil {
		return *m.FishOriginalScore
	}
	return 0
}

func (m *TagCatchFish) GetDropItems() []*TagDropItem {
	if m != nil {
		return m.DropItems
	}
	return nil
}

func (m *TagCatchFish) GetFishScoreShow() uint32 {
	if m != nil && m.FishScoreShow != nil {
		return *m.FishScoreShow
	}
	return 0
}

func (m *TagCatchFish) GetBuffId() uint32 {
	if m != nil && m.BuffId != nil {
		return *m.BuffId
	}
	return 0
}

func (m *TagCatchFish) GetBuffTime() int32 {
	if m != nil && m.BuffTime != nil {
		return *m.BuffTime
	}
	return 0
}

func (m *TagCatchFish) GetBuffAdd() int32 {
	if m != nil && m.BuffAdd != nil {
		return *m.BuffAdd
	}
	return 0
}

func (m *TagCatchFish) GetCritRate() int32 {
	if m != nil && m.CritRate != nil {
		return *m.CritRate
	}
	return 0
}

// 服务器返回捕获鱼儿
type CMD_S_CATCH_FISH struct {
	ChairId          *int32          `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	FishType         *int32          `protobuf:"varint,2,opt,name=fish_type,json=fishType" json:"fish_type,omitempty"`
	Bullet           *TagSceneBullet `protobuf:"bytes,3,opt,name=bullet" json:"bullet,omitempty"`
	CurrScore        *int64          `protobuf:"varint,4,opt,name=curr_score,json=currScore" json:"curr_score,omitempty"`
	CurrLottery      *int64          `protobuf:"varint,5,opt,name=curr_lottery,json=currLottery" json:"curr_lottery,omitempty"`
	CurrDiamond      *int64          `protobuf:"varint,6,opt,name=curr_diamond,json=currDiamond" json:"curr_diamond,omitempty"`
	CurrTime         *uint32         `protobuf:"varint,7,opt,name=curr_time,json=currTime" json:"curr_time,omitempty"`
	CatchFishs       []*TagCatchFish `protobuf:"bytes,8,rep,name=catch_fishs,json=catchFishs" json:"catch_fishs,omitempty"`
	AddExp           *int32          `protobuf:"varint,9,opt,name=add_exp,json=addExp" json:"add_exp,omitempty"`
	SkillId          *uint32         `protobuf:"varint,10,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	IsCrit           *bool           `protobuf:"varint,11,opt,name=is_crit,json=isCrit" json:"is_crit,omitempty"`
	BuffId           *uint32         `protobuf:"varint,12,opt,name=buff_id,json=buffId" json:"buff_id,omitempty"`
	TreasureEffect   *uint32         `protobuf:"varint,13,opt,name=treasure_effect,json=treasureEffect" json:"treasure_effect,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CMD_S_CATCH_FISH) Reset()                    { *m = CMD_S_CATCH_FISH{} }
func (m *CMD_S_CATCH_FISH) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CATCH_FISH) ProtoMessage()               {}
func (*CMD_S_CATCH_FISH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CMD_S_CATCH_FISH) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_CATCH_FISH) GetFishType() int32 {
	if m != nil && m.FishType != nil {
		return *m.FishType
	}
	return 0
}

func (m *CMD_S_CATCH_FISH) GetBullet() *TagSceneBullet {
	if m != nil {
		return m.Bullet
	}
	return nil
}

func (m *CMD_S_CATCH_FISH) GetCurrScore() int64 {
	if m != nil && m.CurrScore != nil {
		return *m.CurrScore
	}
	return 0
}

func (m *CMD_S_CATCH_FISH) GetCurrLottery() int64 {
	if m != nil && m.CurrLottery != nil {
		return *m.CurrLottery
	}
	return 0
}

func (m *CMD_S_CATCH_FISH) GetCurrDiamond() int64 {
	if m != nil && m.CurrDiamond != nil {
		return *m.CurrDiamond
	}
	return 0
}

func (m *CMD_S_CATCH_FISH) GetCurrTime() uint32 {
	if m != nil && m.CurrTime != nil {
		return *m.CurrTime
	}
	return 0
}

func (m *CMD_S_CATCH_FISH) GetCatchFishs() []*TagCatchFish {
	if m != nil {
		return m.CatchFishs
	}
	return nil
}

func (m *CMD_S_CATCH_FISH) GetAddExp() int32 {
	if m != nil && m.AddExp != nil {
		return *m.AddExp
	}
	return 0
}

func (m *CMD_S_CATCH_FISH) GetSkillId() uint32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *CMD_S_CATCH_FISH) GetIsCrit() bool {
	if m != nil && m.IsCrit != nil {
		return *m.IsCrit
	}
	return false
}

func (m *CMD_S_CATCH_FISH) GetBuffId() uint32 {
	if m != nil && m.BuffId != nil {
		return *m.BuffId
	}
	return 0
}

func (m *CMD_S_CATCH_FISH) GetTreasureEffect() uint32 {
	if m != nil && m.TreasureEffect != nil {
		return *m.TreasureEffect
	}
	return 0
}

// 技能捕获鱼儿
type CMD_C_SKILL_CATCH_FISH struct {
	ChairId          *uint32  `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	FishsUid         []uint32 `protobuf:"varint,2,rep,name=fishs_uid,json=fishsUid" json:"fishs_uid,omitempty"`
	SkillId          *uint32  `protobuf:"varint,3,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_C_SKILL_CATCH_FISH) Reset()                    { *m = CMD_C_SKILL_CATCH_FISH{} }
func (m *CMD_C_SKILL_CATCH_FISH) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_SKILL_CATCH_FISH) ProtoMessage()               {}
func (*CMD_C_SKILL_CATCH_FISH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CMD_C_SKILL_CATCH_FISH) GetChairId() uint32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_C_SKILL_CATCH_FISH) GetFishsUid() []uint32 {
	if m != nil {
		return m.FishsUid
	}
	return nil
}

func (m *CMD_C_SKILL_CATCH_FISH) GetSkillId() uint32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

// 激光炮捕获鱼
type CMD_C_LASER_CANNON_CATCH_FISH struct {
	FishsUid         []uint32 `protobuf:"varint,1,rep,name=fishs_uid,json=fishsUid" json:"fishs_uid,omitempty"`
	Angle            *float32 `protobuf:"fixed32,2,opt,name=angle" json:"angle,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_C_LASER_CANNON_CATCH_FISH) Reset()                    { *m = CMD_C_LASER_CANNON_CATCH_FISH{} }
func (m *CMD_C_LASER_CANNON_CATCH_FISH) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_LASER_CANNON_CATCH_FISH) ProtoMessage()               {}
func (*CMD_C_LASER_CANNON_CATCH_FISH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *CMD_C_LASER_CANNON_CATCH_FISH) GetFishsUid() []uint32 {
	if m != nil {
		return m.FishsUid
	}
	return nil
}

func (m *CMD_C_LASER_CANNON_CATCH_FISH) GetAngle() float32 {
	if m != nil && m.Angle != nil {
		return *m.Angle
	}
	return 0
}

// 激光炮捕获鱼
type CMD_S_LASER_CANNON_CATCH_FISH struct {
	ChairId          *uint32  `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	Angle            *float32 `protobuf:"fixed32,2,opt,name=angle" json:"angle,omitempty"`
	ResultCode       *int32   `protobuf:"varint,3,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_S_LASER_CANNON_CATCH_FISH) Reset()                    { *m = CMD_S_LASER_CANNON_CATCH_FISH{} }
func (m *CMD_S_LASER_CANNON_CATCH_FISH) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_LASER_CANNON_CATCH_FISH) ProtoMessage()               {}
func (*CMD_S_LASER_CANNON_CATCH_FISH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *CMD_S_LASER_CANNON_CATCH_FISH) GetChairId() uint32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_LASER_CANNON_CATCH_FISH) GetAngle() float32 {
	if m != nil && m.Angle != nil {
		return *m.Angle
	}
	return 0
}

func (m *CMD_S_LASER_CANNON_CATCH_FISH) GetResultCode() int32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

// 更新激光炮能量
type CMD_S_UPDATE_LASER_ENERGY struct {
	ChairId          *uint32 `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	EnergyValue      *int32  `protobuf:"varint,2,opt,name=energy_value,json=energyValue" json:"energy_value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_UPDATE_LASER_ENERGY) Reset()                    { *m = CMD_S_UPDATE_LASER_ENERGY{} }
func (m *CMD_S_UPDATE_LASER_ENERGY) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UPDATE_LASER_ENERGY) ProtoMessage()               {}
func (*CMD_S_UPDATE_LASER_ENERGY) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *CMD_S_UPDATE_LASER_ENERGY) GetChairId() uint32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_UPDATE_LASER_ENERGY) GetEnergyValue() int32 {
	if m != nil && m.EnergyValue != nil {
		return *m.EnergyValue
	}
	return 0
}

// 更新用户分数
type CMD_S_UPDATE_USER_SCORE struct {
	ChairId          *int32  `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	CurrScore        *int64  `protobuf:"varint,2,opt,name=curr_score,json=currScore" json:"curr_score,omitempty"`
	CurrLottery      *int64  `protobuf:"varint,3,opt,name=curr_lottery,json=currLottery" json:"curr_lottery,omitempty"`
	CurrDiamond      *int64  `protobuf:"varint,4,opt,name=curr_diamond,json=currDiamond" json:"curr_diamond,omitempty"`
	CurrBullet       *uint32 `protobuf:"varint,5,opt,name=curr_bullet,json=currBullet" json:"curr_bullet,omitempty"`
	ChangeScore      *int32  `protobuf:"varint,6,opt,name=change_score,json=changeScore" json:"change_score,omitempty"`
	ChangeLottery    *int32  `protobuf:"varint,7,opt,name=change_lottery,json=changeLottery" json:"change_lottery,omitempty"`
	ChangeDiamond    *int32  `protobuf:"varint,8,opt,name=change_diamond,json=changeDiamond" json:"change_diamond,omitempty"`
	CurrTime         *int64  `protobuf:"varint,9,opt,name=curr_time,json=currTime" json:"curr_time,omitempty"`
	UpdateType       *uint32 `protobuf:"varint,10,opt,name=update_type,json=updateType" json:"update_type,omitempty"`
	ArenaScore       *int32  `protobuf:"varint,11,opt,name=arena_score,json=arenaScore" json:"arena_score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_UPDATE_USER_SCORE) Reset()                    { *m = CMD_S_UPDATE_USER_SCORE{} }
func (m *CMD_S_UPDATE_USER_SCORE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UPDATE_USER_SCORE) ProtoMessage()               {}
func (*CMD_S_UPDATE_USER_SCORE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *CMD_S_UPDATE_USER_SCORE) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_UPDATE_USER_SCORE) GetCurrScore() int64 {
	if m != nil && m.CurrScore != nil {
		return *m.CurrScore
	}
	return 0
}

func (m *CMD_S_UPDATE_USER_SCORE) GetCurrLottery() int64 {
	if m != nil && m.CurrLottery != nil {
		return *m.CurrLottery
	}
	return 0
}

func (m *CMD_S_UPDATE_USER_SCORE) GetCurrDiamond() int64 {
	if m != nil && m.CurrDiamond != nil {
		return *m.CurrDiamond
	}
	return 0
}

func (m *CMD_S_UPDATE_USER_SCORE) GetCurrBullet() uint32 {
	if m != nil && m.CurrBullet != nil {
		return *m.CurrBullet
	}
	return 0
}

func (m *CMD_S_UPDATE_USER_SCORE) GetChangeScore() int32 {
	if m != nil && m.ChangeScore != nil {
		return *m.ChangeScore
	}
	return 0
}

func (m *CMD_S_UPDATE_USER_SCORE) GetChangeLottery() int32 {
	if m != nil && m.ChangeLottery != nil {
		return *m.ChangeLottery
	}
	return 0
}

func (m *CMD_S_UPDATE_USER_SCORE) GetChangeDiamond() int32 {
	if m != nil && m.ChangeDiamond != nil {
		return *m.ChangeDiamond
	}
	return 0
}

func (m *CMD_S_UPDATE_USER_SCORE) GetCurrTime() int64 {
	if m != nil && m.CurrTime != nil {
		return *m.CurrTime
	}
	return 0
}

func (m *CMD_S_UPDATE_USER_SCORE) GetUpdateType() uint32 {
	if m != nil && m.UpdateType != nil {
		return *m.UpdateType
	}
	return 0
}

func (m *CMD_S_UPDATE_USER_SCORE) GetArenaScore() int32 {
	if m != nil && m.ArenaScore != nil {
		return *m.ArenaScore
	}
	return 0
}

// 开始救济金计时
type CMD_S_START_ALMS struct {
	WaitTime         *int32 `protobuf:"varint,1,opt,name=wait_time,json=waitTime" json:"wait_time,omitempty"`
	IsDouble         *bool  `protobuf:"varint,2,opt,name=is_double,json=isDouble" json:"is_double,omitempty"`
	IsExperience     *bool  `protobuf:"varint,3,opt,name=is_experience,json=isExperience" json:"is_experience,omitempty"`
	Count            *int32 `protobuf:"varint,4,opt,name=Count" json:"Count,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_START_ALMS) Reset()                    { *m = CMD_S_START_ALMS{} }
func (m *CMD_S_START_ALMS) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_START_ALMS) ProtoMessage()               {}
func (*CMD_S_START_ALMS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *CMD_S_START_ALMS) GetWaitTime() int32 {
	if m != nil && m.WaitTime != nil {
		return *m.WaitTime
	}
	return 0
}

func (m *CMD_S_START_ALMS) GetIsDouble() bool {
	if m != nil && m.IsDouble != nil {
		return *m.IsDouble
	}
	return false
}

func (m *CMD_S_START_ALMS) GetIsExperience() bool {
	if m != nil && m.IsExperience != nil {
		return *m.IsExperience
	}
	return false
}

func (m *CMD_S_START_ALMS) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// 刷新救济金
type CMD_C_REFRESH_ALMS struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_REFRESH_ALMS) Reset()                    { *m = CMD_C_REFRESH_ALMS{} }
func (m *CMD_C_REFRESH_ALMS) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_REFRESH_ALMS) ProtoMessage()               {}
func (*CMD_C_REFRESH_ALMS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

// 停止救济金
type CMD_S_STOP_ALMS struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_STOP_ALMS) Reset()                    { *m = CMD_S_STOP_ALMS{} }
func (m *CMD_S_STOP_ALMS) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_STOP_ALMS) ProtoMessage()               {}
func (*CMD_S_STOP_ALMS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

// 获取救济金
type CMD_C_GET_ALMS struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_GET_ALMS) Reset()                    { *m = CMD_C_GET_ALMS{} }
func (m *CMD_C_GET_ALMS) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_GET_ALMS) ProtoMessage()               {}
func (*CMD_C_GET_ALMS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

// 获取救济金
type CMD_S_GET_ALMS struct {
	GetResult        *int32 `protobuf:"varint,1,opt,name=get_result,json=getResult" json:"get_result,omitempty"`
	GetScore         *int64 `protobuf:"varint,2,opt,name=get_score,json=getScore" json:"get_score,omitempty"`
	WaitTime         *int32 `protobuf:"varint,3,opt,name=wait_time,json=waitTime" json:"wait_time,omitempty"`
	IsDouble         *bool  `protobuf:"varint,4,opt,name=is_double,json=isDouble" json:"is_double,omitempty"`
	GetCount         *int32 `protobuf:"varint,5,opt,name=get_count,json=getCount" json:"get_count,omitempty"`
	IsExperience     *bool  `protobuf:"varint,6,opt,name=is_experience,json=isExperience" json:"is_experience,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_GET_ALMS) Reset()                    { *m = CMD_S_GET_ALMS{} }
func (m *CMD_S_GET_ALMS) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GET_ALMS) ProtoMessage()               {}
func (*CMD_S_GET_ALMS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *CMD_S_GET_ALMS) GetGetResult() int32 {
	if m != nil && m.GetResult != nil {
		return *m.GetResult
	}
	return 0
}

func (m *CMD_S_GET_ALMS) GetGetScore() int64 {
	if m != nil && m.GetScore != nil {
		return *m.GetScore
	}
	return 0
}

func (m *CMD_S_GET_ALMS) GetWaitTime() int32 {
	if m != nil && m.WaitTime != nil {
		return *m.WaitTime
	}
	return 0
}

func (m *CMD_S_GET_ALMS) GetIsDouble() bool {
	if m != nil && m.IsDouble != nil {
		return *m.IsDouble
	}
	return false
}

func (m *CMD_S_GET_ALMS) GetGetCount() int32 {
	if m != nil && m.GetCount != nil {
		return *m.GetCount
	}
	return 0
}

func (m *CMD_S_GET_ALMS) GetIsExperience() bool {
	if m != nil && m.IsExperience != nil {
		return *m.IsExperience
	}
	return false
}

// BOSS来了消息通知
type CMD_S_BOSS_COME struct {
	FishUid          *uint32 `protobuf:"varint,1,opt,name=fish_uid,json=fishUid" json:"fish_uid,omitempty"`
	SkillId          *uint32 `protobuf:"varint,2,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_BOSS_COME) Reset()                    { *m = CMD_S_BOSS_COME{} }
func (m *CMD_S_BOSS_COME) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_BOSS_COME) ProtoMessage()               {}
func (*CMD_S_BOSS_COME) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *CMD_S_BOSS_COME) GetFishUid() uint32 {
	if m != nil && m.FishUid != nil {
		return *m.FishUid
	}
	return 0
}

func (m *CMD_S_BOSS_COME) GetSkillId() uint32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

// 玩家换炮
type CMD_C_CHANGE_FIRE struct {
	BulletMulriple   *int32  `protobuf:"varint,1,opt,name=bullet_mulriple,json=bulletMulriple" json:"bullet_mulriple,omitempty"`
	CannonId         *uint32 `protobuf:"varint,2,opt,name=cannon_id,json=cannonId" json:"cannon_id,omitempty"`
	CanonNum         *uint32 `protobuf:"varint,3,opt,name=canon_num,json=canonNum" json:"canon_num,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_CHANGE_FIRE) Reset()                    { *m = CMD_C_CHANGE_FIRE{} }
func (m *CMD_C_CHANGE_FIRE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_CHANGE_FIRE) ProtoMessage()               {}
func (*CMD_C_CHANGE_FIRE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *CMD_C_CHANGE_FIRE) GetBulletMulriple() int32 {
	if m != nil && m.BulletMulriple != nil {
		return *m.BulletMulriple
	}
	return 0
}

func (m *CMD_C_CHANGE_FIRE) GetCannonId() uint32 {
	if m != nil && m.CannonId != nil {
		return *m.CannonId
	}
	return 0
}

func (m *CMD_C_CHANGE_FIRE) GetCanonNum() uint32 {
	if m != nil && m.CanonNum != nil {
		return *m.CanonNum
	}
	return 0
}

// 玩家换炮
type CMD_S_CHANGE_FIRE struct {
	BulletMulriple   *int32  `protobuf:"varint,1,opt,name=bullet_mulriple,json=bulletMulriple" json:"bullet_mulriple,omitempty"`
	ChairId          *int32  `protobuf:"varint,2,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	CannonId         *uint32 `protobuf:"varint,3,opt,name=cannon_id,json=cannonId" json:"cannon_id,omitempty"`
	CannonNum        *uint32 `protobuf:"varint,4,opt,name=cannon_num,json=cannonNum" json:"cannon_num,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_CHANGE_FIRE) Reset()                    { *m = CMD_S_CHANGE_FIRE{} }
func (m *CMD_S_CHANGE_FIRE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CHANGE_FIRE) ProtoMessage()               {}
func (*CMD_S_CHANGE_FIRE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *CMD_S_CHANGE_FIRE) GetBulletMulriple() int32 {
	if m != nil && m.BulletMulriple != nil {
		return *m.BulletMulriple
	}
	return 0
}

func (m *CMD_S_CHANGE_FIRE) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_CHANGE_FIRE) GetCannonId() uint32 {
	if m != nil && m.CannonId != nil {
		return *m.CannonId
	}
	return 0
}

func (m *CMD_S_CHANGE_FIRE) GetCannonNum() uint32 {
	if m != nil && m.CannonNum != nil {
		return *m.CannonNum
	}
	return 0
}

// 触发砸蛋
type CMD_S_TRRIGER_EGG struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_TRRIGER_EGG) Reset()                    { *m = CMD_S_TRRIGER_EGG{} }
func (m *CMD_S_TRRIGER_EGG) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_TRRIGER_EGG) ProtoMessage()               {}
func (*CMD_S_TRRIGER_EGG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *CMD_S_TRRIGER_EGG) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// 触发猜大小
type CMD_S_TRRIGER_NUM struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RewardType       *int32 `protobuf:"varint,2,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	RewardValue      *int64 `protobuf:"varint,3,opt,name=reward_value,json=rewardValue" json:"reward_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_TRRIGER_NUM) Reset()                    { *m = CMD_S_TRRIGER_NUM{} }
func (m *CMD_S_TRRIGER_NUM) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_TRRIGER_NUM) ProtoMessage()               {}
func (*CMD_S_TRRIGER_NUM) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *CMD_S_TRRIGER_NUM) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CMD_S_TRRIGER_NUM) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *CMD_S_TRRIGER_NUM) GetRewardValue() int64 {
	if m != nil && m.RewardValue != nil {
		return *m.RewardValue
	}
	return 0
}

// 砸蛋
type CMD_C_SMASH_EGG struct {
	Index            *int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_SMASH_EGG) Reset()                    { *m = CMD_C_SMASH_EGG{} }
func (m *CMD_C_SMASH_EGG) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_SMASH_EGG) ProtoMessage()               {}
func (*CMD_C_SMASH_EGG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *CMD_C_SMASH_EGG) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

// 砸蛋结果
type CMD_S_SMASH_EGG struct {
	ResultCode       *int32 `protobuf:"varint,1,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
	Index            *int32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	RewardType       *int32 `protobuf:"varint,3,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	RewardValue      *int64 `protobuf:"varint,4,opt,name=reward_value,json=rewardValue" json:"reward_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_SMASH_EGG) Reset()                    { *m = CMD_S_SMASH_EGG{} }
func (m *CMD_S_SMASH_EGG) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SMASH_EGG) ProtoMessage()               {}
func (*CMD_S_SMASH_EGG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *CMD_S_SMASH_EGG) GetResultCode() int32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

func (m *CMD_S_SMASH_EGG) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *CMD_S_SMASH_EGG) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *CMD_S_SMASH_EGG) GetRewardValue() int64 {
	if m != nil && m.RewardValue != nil {
		return *m.RewardValue
	}
	return 0
}

// 触发摇钱树
type CMD_S_TRRIGER_MONEY_TREE struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TreeSecond       *int32 `protobuf:"varint,2,opt,name=tree_second,json=treeSecond" json:"tree_second,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_TRRIGER_MONEY_TREE) Reset()                    { *m = CMD_S_TRRIGER_MONEY_TREE{} }
func (m *CMD_S_TRRIGER_MONEY_TREE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_TRRIGER_MONEY_TREE) ProtoMessage()               {}
func (*CMD_S_TRRIGER_MONEY_TREE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *CMD_S_TRRIGER_MONEY_TREE) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CMD_S_TRRIGER_MONEY_TREE) GetTreeSecond() int32 {
	if m != nil && m.TreeSecond != nil {
		return *m.TreeSecond
	}
	return 0
}

// 摇钱树
type CMD_C_SMASH_MONEY_TREE struct {
	UserId           *int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_SMASH_MONEY_TREE) Reset()                    { *m = CMD_C_SMASH_MONEY_TREE{} }
func (m *CMD_C_SMASH_MONEY_TREE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_SMASH_MONEY_TREE) ProtoMessage()               {}
func (*CMD_C_SMASH_MONEY_TREE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *CMD_C_SMASH_MONEY_TREE) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 摇钱树结果
type CMD_S_SMASH_MONEY_TREE struct {
	ResultCode       *int32 `protobuf:"varint,1,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
	RewardType       *int32 `protobuf:"varint,2,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	RewardValue      *int64 `protobuf:"varint,3,opt,name=reward_value,json=rewardValue" json:"reward_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_SMASH_MONEY_TREE) Reset()                    { *m = CMD_S_SMASH_MONEY_TREE{} }
func (m *CMD_S_SMASH_MONEY_TREE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SMASH_MONEY_TREE) ProtoMessage()               {}
func (*CMD_S_SMASH_MONEY_TREE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *CMD_S_SMASH_MONEY_TREE) GetResultCode() int32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

func (m *CMD_S_SMASH_MONEY_TREE) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *CMD_S_SMASH_MONEY_TREE) GetRewardValue() int64 {
	if m != nil && m.RewardValue != nil {
		return *m.RewardValue
	}
	return 0
}

// 猜大小
type CMD_C_NUM_VAL struct {
	MyResult         *int32 `protobuf:"varint,1,opt,name=my_result,json=myResult" json:"my_result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_NUM_VAL) Reset()                    { *m = CMD_C_NUM_VAL{} }
func (m *CMD_C_NUM_VAL) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_NUM_VAL) ProtoMessage()               {}
func (*CMD_C_NUM_VAL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *CMD_C_NUM_VAL) GetMyResult() int32 {
	if m != nil && m.MyResult != nil {
		return *m.MyResult
	}
	return 0
}

// 猜大小结果
type CMD_S_NUM_VAL struct {
	ResultCode       *int32 `protobuf:"varint,1,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
	Result           *int32 `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	MyResult         *int32 `protobuf:"varint,3,opt,name=my_result,json=myResult" json:"my_result,omitempty"`
	ResultVal        *int32 `protobuf:"varint,4,opt,name=result_val,json=resultVal" json:"result_val,omitempty"`
	RewardType       *int32 `protobuf:"varint,5,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	RewardValue      *int64 `protobuf:"varint,6,opt,name=reward_value,json=rewardValue" json:"reward_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_NUM_VAL) Reset()                    { *m = CMD_S_NUM_VAL{} }
func (m *CMD_S_NUM_VAL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_NUM_VAL) ProtoMessage()               {}
func (*CMD_S_NUM_VAL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *CMD_S_NUM_VAL) GetResultCode() int32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

func (m *CMD_S_NUM_VAL) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_S_NUM_VAL) GetMyResult() int32 {
	if m != nil && m.MyResult != nil {
		return *m.MyResult
	}
	return 0
}

func (m *CMD_S_NUM_VAL) GetResultVal() int32 {
	if m != nil && m.ResultVal != nil {
		return *m.ResultVal
	}
	return 0
}

func (m *CMD_S_NUM_VAL) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *CMD_S_NUM_VAL) GetRewardValue() int64 {
	if m != nil && m.RewardValue != nil {
		return *m.RewardValue
	}
	return 0
}

// 触发猜单双
type CMD_S_GUESS_SINDOU struct {
	UserId           *int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GuessNumber      *int32 `protobuf:"varint,2,opt,name=guess_number,json=guessNumber" json:"guess_number,omitempty"`
	InitBetMoney     *int32 `protobuf:"varint,3,opt,name=init_bet_money,json=initBetMoney" json:"init_bet_money,omitempty"`
	MinBet           *int32 `protobuf:"varint,4,opt,name=min_bet,json=minBet" json:"min_bet,omitempty"`
	MaxBet           *int32 `protobuf:"varint,5,opt,name=max_bet,json=maxBet" json:"max_bet,omitempty"`
	BaseScore        *int32 `protobuf:"varint,6,opt,name=base_score,json=baseScore" json:"base_score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_GUESS_SINDOU) Reset()                    { *m = CMD_S_GUESS_SINDOU{} }
func (m *CMD_S_GUESS_SINDOU) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GUESS_SINDOU) ProtoMessage()               {}
func (*CMD_S_GUESS_SINDOU) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *CMD_S_GUESS_SINDOU) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_GUESS_SINDOU) GetGuessNumber() int32 {
	if m != nil && m.GuessNumber != nil {
		return *m.GuessNumber
	}
	return 0
}

func (m *CMD_S_GUESS_SINDOU) GetInitBetMoney() int32 {
	if m != nil && m.InitBetMoney != nil {
		return *m.InitBetMoney
	}
	return 0
}

func (m *CMD_S_GUESS_SINDOU) GetMinBet() int32 {
	if m != nil && m.MinBet != nil {
		return *m.MinBet
	}
	return 0
}

func (m *CMD_S_GUESS_SINDOU) GetMaxBet() int32 {
	if m != nil && m.MaxBet != nil {
		return *m.MaxBet
	}
	return 0
}

func (m *CMD_S_GUESS_SINDOU) GetBaseScore() int32 {
	if m != nil && m.BaseScore != nil {
		return *m.BaseScore
	}
	return 0
}

// 猜单双请求
type CMD_C_SINDOU_REQ struct {
	OverGame         *int32 `protobuf:"varint,1,opt,name=over_game,json=overGame" json:"over_game,omitempty"`
	MyResult         *int32 `protobuf:"varint,2,opt,name=my_result,json=myResult" json:"my_result,omitempty"`
	BetMoney         *int32 `protobuf:"varint,3,opt,name=bet_money,json=betMoney" json:"bet_money,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_SINDOU_REQ) Reset()                    { *m = CMD_C_SINDOU_REQ{} }
func (m *CMD_C_SINDOU_REQ) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_SINDOU_REQ) ProtoMessage()               {}
func (*CMD_C_SINDOU_REQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *CMD_C_SINDOU_REQ) GetOverGame() int32 {
	if m != nil && m.OverGame != nil {
		return *m.OverGame
	}
	return 0
}

func (m *CMD_C_SINDOU_REQ) GetMyResult() int32 {
	if m != nil && m.MyResult != nil {
		return *m.MyResult
	}
	return 0
}

func (m *CMD_C_SINDOU_REQ) GetBetMoney() int32 {
	if m != nil && m.BetMoney != nil {
		return *m.BetMoney
	}
	return 0
}

// 猜单双结果
type CMD_S_SINDOU_REQ struct {
	ErrCode          *int32 `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	ServerResult     *int32 `protobuf:"varint,2,opt,name=server_result,json=serverResult" json:"server_result,omitempty"`
	MyResult         *int32 `protobuf:"varint,3,opt,name=my_result,json=myResult" json:"my_result,omitempty"`
	RewardValue      *int32 `protobuf:"varint,4,opt,name=reward_value,json=rewardValue" json:"reward_value,omitempty"`
	GameRewardValue  *int32 `protobuf:"varint,5,opt,name=game_reward_value,json=gameRewardValue" json:"game_reward_value,omitempty"`
	GameOver         *bool  `protobuf:"varint,6,opt,name=game_over,json=gameOver" json:"game_over,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_SINDOU_REQ) Reset()                    { *m = CMD_S_SINDOU_REQ{} }
func (m *CMD_S_SINDOU_REQ) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SINDOU_REQ) ProtoMessage()               {}
func (*CMD_S_SINDOU_REQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *CMD_S_SINDOU_REQ) GetErrCode() int32 {
	if m != nil && m.ErrCode != nil {
		return *m.ErrCode
	}
	return 0
}

func (m *CMD_S_SINDOU_REQ) GetServerResult() int32 {
	if m != nil && m.ServerResult != nil {
		return *m.ServerResult
	}
	return 0
}

func (m *CMD_S_SINDOU_REQ) GetMyResult() int32 {
	if m != nil && m.MyResult != nil {
		return *m.MyResult
	}
	return 0
}

func (m *CMD_S_SINDOU_REQ) GetRewardValue() int32 {
	if m != nil && m.RewardValue != nil {
		return *m.RewardValue
	}
	return 0
}

func (m *CMD_S_SINDOU_REQ) GetGameRewardValue() int32 {
	if m != nil && m.GameRewardValue != nil {
		return *m.GameRewardValue
	}
	return 0
}

func (m *CMD_S_SINDOU_REQ) GetGameOver() bool {
	if m != nil && m.GameOver != nil {
		return *m.GameOver
	}
	return false
}

// 炸弹鱼触发
type CMD_S_BOMB_FISH struct {
	UserId           *int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	FishValue        *int32 `protobuf:"varint,2,opt,name=fish_value,json=fishValue" json:"fish_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_BOMB_FISH) Reset()                    { *m = CMD_S_BOMB_FISH{} }
func (m *CMD_S_BOMB_FISH) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_BOMB_FISH) ProtoMessage()               {}
func (*CMD_S_BOMB_FISH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *CMD_S_BOMB_FISH) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_BOMB_FISH) GetFishValue() int32 {
	if m != nil && m.FishValue != nil {
		return *m.FishValue
	}
	return 0
}

// VIP获取救济金
type CMD_C_VIP_GET_ALMS struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_VIP_GET_ALMS) Reset()                    { *m = CMD_C_VIP_GET_ALMS{} }
func (m *CMD_C_VIP_GET_ALMS) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_VIP_GET_ALMS) ProtoMessage()               {}
func (*CMD_C_VIP_GET_ALMS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

// 点击获取红包
type CMD_C_GET_RED_ENVELOPE struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	EnvelopeId       *uint32 `protobuf:"varint,2,opt,name=envelope_id,json=envelopeId" json:"envelope_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_GET_RED_ENVELOPE) Reset()                    { *m = CMD_C_GET_RED_ENVELOPE{} }
func (m *CMD_C_GET_RED_ENVELOPE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_GET_RED_ENVELOPE) ProtoMessage()               {}
func (*CMD_C_GET_RED_ENVELOPE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *CMD_C_GET_RED_ENVELOPE) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_C_GET_RED_ENVELOPE) GetEnvelopeId() uint32 {
	if m != nil && m.EnvelopeId != nil {
		return *m.EnvelopeId
	}
	return 0
}

// 获取红包结果
type CMD_S_GET_RED_ENVELOPE struct {
	EnvelopeId       *uint32 `protobuf:"varint,1,opt,name=envelope_id,json=envelopeId" json:"envelope_id,omitempty"`
	ResultCode       *uint32 `protobuf:"varint,2,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
	GetGold          *uint32 `protobuf:"varint,3,opt,name=get_gold,json=getGold" json:"get_gold,omitempty"`
	GetLottery       *uint32 `protobuf:"varint,4,opt,name=get_lottery,json=getLottery" json:"get_lottery,omitempty"`
	GetDiamond       *uint32 `protobuf:"varint,5,opt,name=get_diamond,json=getDiamond" json:"get_diamond,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_GET_RED_ENVELOPE) Reset()                    { *m = CMD_S_GET_RED_ENVELOPE{} }
func (m *CMD_S_GET_RED_ENVELOPE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GET_RED_ENVELOPE) ProtoMessage()               {}
func (*CMD_S_GET_RED_ENVELOPE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *CMD_S_GET_RED_ENVELOPE) GetEnvelopeId() uint32 {
	if m != nil && m.EnvelopeId != nil {
		return *m.EnvelopeId
	}
	return 0
}

func (m *CMD_S_GET_RED_ENVELOPE) GetResultCode() uint32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

func (m *CMD_S_GET_RED_ENVELOPE) GetGetGold() uint32 {
	if m != nil && m.GetGold != nil {
		return *m.GetGold
	}
	return 0
}

func (m *CMD_S_GET_RED_ENVELOPE) GetGetLottery() uint32 {
	if m != nil && m.GetLottery != nil {
		return *m.GetLottery
	}
	return 0
}

func (m *CMD_S_GET_RED_ENVELOPE) GetGetDiamond() uint32 {
	if m != nil && m.GetDiamond != nil {
		return *m.GetDiamond
	}
	return 0
}

// 同步召唤鱼聚宝盆的信息
type CMD_S_SUMMON_FISH_INFO struct {
	FishUid          *uint32 `protobuf:"varint,1,opt,name=fish_uid,json=fishUid" json:"fish_uid,omitempty"`
	ListTime         *uint32 `protobuf:"varint,2,opt,name=list_time,json=listTime" json:"list_time,omitempty"`
	UserId           *uint32 `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GoldNum          *int64  `protobuf:"varint,4,opt,name=gold_num,json=goldNum" json:"gold_num,omitempty"`
	NickName         []byte  `protobuf:"bytes,5,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_SUMMON_FISH_INFO) Reset()                    { *m = CMD_S_SUMMON_FISH_INFO{} }
func (m *CMD_S_SUMMON_FISH_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SUMMON_FISH_INFO) ProtoMessage()               {}
func (*CMD_S_SUMMON_FISH_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *CMD_S_SUMMON_FISH_INFO) GetFishUid() uint32 {
	if m != nil && m.FishUid != nil {
		return *m.FishUid
	}
	return 0
}

func (m *CMD_S_SUMMON_FISH_INFO) GetListTime() uint32 {
	if m != nil && m.ListTime != nil {
		return *m.ListTime
	}
	return 0
}

func (m *CMD_S_SUMMON_FISH_INFO) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_SUMMON_FISH_INFO) GetGoldNum() int64 {
	if m != nil && m.GoldNum != nil {
		return *m.GoldNum
	}
	return 0
}

func (m *CMD_S_SUMMON_FISH_INFO) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

// 神灯召唤鱼的信息
type CMD_S_SHENDENG_FISH struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChairId          *int32  `protobuf:"varint,2,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	KindId           *uint32 `protobuf:"varint,3,opt,name=kind_id,json=kindId" json:"kind_id,omitempty"`
	PathId           *uint32 `protobuf:"varint,4,opt,name=path_id,json=pathId" json:"path_id,omitempty"`
	PathIndex        *int32  `protobuf:"varint,5,opt,name=path_index,json=pathIndex" json:"path_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_SHENDENG_FISH) Reset()                    { *m = CMD_S_SHENDENG_FISH{} }
func (m *CMD_S_SHENDENG_FISH) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SHENDENG_FISH) ProtoMessage()               {}
func (*CMD_S_SHENDENG_FISH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *CMD_S_SHENDENG_FISH) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_SHENDENG_FISH) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_SHENDENG_FISH) GetKindId() uint32 {
	if m != nil && m.KindId != nil {
		return *m.KindId
	}
	return 0
}

func (m *CMD_S_SHENDENG_FISH) GetPathId() uint32 {
	if m != nil && m.PathId != nil {
		return *m.PathId
	}
	return 0
}

func (m *CMD_S_SHENDENG_FISH) GetPathIndex() int32 {
	if m != nil && m.PathIndex != nil {
		return *m.PathIndex
	}
	return 0
}

type CMD_C_SHENDENG_FISH struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChairId          *int32  `protobuf:"varint,2,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	KindId           *uint32 `protobuf:"varint,3,opt,name=kind_id,json=kindId" json:"kind_id,omitempty"`
	PathId           *uint32 `protobuf:"varint,4,opt,name=path_id,json=pathId" json:"path_id,omitempty"`
	PathIndex        *int32  `protobuf:"varint,5,opt,name=path_index,json=pathIndex" json:"path_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_SHENDENG_FISH) Reset()                    { *m = CMD_C_SHENDENG_FISH{} }
func (m *CMD_C_SHENDENG_FISH) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_SHENDENG_FISH) ProtoMessage()               {}
func (*CMD_C_SHENDENG_FISH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *CMD_C_SHENDENG_FISH) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_C_SHENDENG_FISH) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_C_SHENDENG_FISH) GetKindId() uint32 {
	if m != nil && m.KindId != nil {
		return *m.KindId
	}
	return 0
}

func (m *CMD_C_SHENDENG_FISH) GetPathId() uint32 {
	if m != nil && m.PathId != nil {
		return *m.PathId
	}
	return 0
}

func (m *CMD_C_SHENDENG_FISH) GetPathIndex() int32 {
	if m != nil && m.PathIndex != nil {
		return *m.PathIndex
	}
	return 0
}

// 鱼改变路径
type CMD_S_FISH_CHANGE_PATH struct {
	FishUid          *uint32 `protobuf:"varint,1,opt,name=fish_uid,json=fishUid" json:"fish_uid,omitempty"`
	PathId           *uint32 `protobuf:"varint,2,opt,name=path_id,json=pathId" json:"path_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_FISH_CHANGE_PATH) Reset()                    { *m = CMD_S_FISH_CHANGE_PATH{} }
func (m *CMD_S_FISH_CHANGE_PATH) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_FISH_CHANGE_PATH) ProtoMessage()               {}
func (*CMD_S_FISH_CHANGE_PATH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *CMD_S_FISH_CHANGE_PATH) GetFishUid() uint32 {
	if m != nil && m.FishUid != nil {
		return *m.FishUid
	}
	return 0
}

func (m *CMD_S_FISH_CHANGE_PATH) GetPathId() uint32 {
	if m != nil && m.PathId != nil {
		return *m.PathId
	}
	return 0
}

// 服务器返回结果
type CMD_S_REQ_REWARD_POOL_DETAIL struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	CostType         *int32 `protobuf:"varint,2,opt,name=cost_type,json=costType" json:"cost_type,omitempty"`
	CostValue        *int64 `protobuf:"varint,3,opt,name=cost_value,json=costValue" json:"cost_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_REQ_REWARD_POOL_DETAIL) Reset()                    { *m = CMD_S_REQ_REWARD_POOL_DETAIL{} }
func (m *CMD_S_REQ_REWARD_POOL_DETAIL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_REQ_REWARD_POOL_DETAIL) ProtoMessage()               {}
func (*CMD_S_REQ_REWARD_POOL_DETAIL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *CMD_S_REQ_REWARD_POOL_DETAIL) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_S_REQ_REWARD_POOL_DETAIL) GetCostType() int32 {
	if m != nil && m.CostType != nil {
		return *m.CostType
	}
	return 0
}

func (m *CMD_S_REQ_REWARD_POOL_DETAIL) GetCostValue() int64 {
	if m != nil && m.CostValue != nil {
		return *m.CostValue
	}
	return 0
}

// 准备奖金池
type CMD_S_READY_REWARDPOOL struct {
	RewardPool       *int64  `protobuf:"varint,1,opt,name=reward_pool,json=rewardPool" json:"reward_pool,omitempty"`
	ReadyTime        *uint32 `protobuf:"varint,2,opt,name=ready_time,json=readyTime" json:"ready_time,omitempty"`
	CanSeeDetail     *bool   `protobuf:"varint,3,opt,name=can_see_detail,json=canSeeDetail" json:"can_see_detail,omitempty"`
	CanJoin          *bool   `protobuf:"varint,4,opt,name=can_join,json=canJoin" json:"can_join,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_READY_REWARDPOOL) Reset()                    { *m = CMD_S_READY_REWARDPOOL{} }
func (m *CMD_S_READY_REWARDPOOL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_READY_REWARDPOOL) ProtoMessage()               {}
func (*CMD_S_READY_REWARDPOOL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *CMD_S_READY_REWARDPOOL) GetRewardPool() int64 {
	if m != nil && m.RewardPool != nil {
		return *m.RewardPool
	}
	return 0
}

func (m *CMD_S_READY_REWARDPOOL) GetReadyTime() uint32 {
	if m != nil && m.ReadyTime != nil {
		return *m.ReadyTime
	}
	return 0
}

func (m *CMD_S_READY_REWARDPOOL) GetCanSeeDetail() bool {
	if m != nil && m.CanSeeDetail != nil {
		return *m.CanSeeDetail
	}
	return false
}

func (m *CMD_S_READY_REWARDPOOL) GetCanJoin() bool {
	if m != nil && m.CanJoin != nil {
		return *m.CanJoin
	}
	return false
}

// 开启奖金池
type CMD_S_OPEN_REWARDPOOL struct {
	RewardPool       *int64  `protobuf:"varint,1,opt,name=reward_pool,json=rewardPool" json:"reward_pool,omitempty"`
	OpenTime         *uint32 `protobuf:"varint,2,opt,name=open_time,json=openTime" json:"open_time,omitempty"`
	TargetKindId1    *uint32 `protobuf:"varint,3,opt,name=target_kind_id1,json=targetKindId1" json:"target_kind_id1,omitempty"`
	TargetKindNum1   *uint32 `protobuf:"varint,4,opt,name=target_kind_num1,json=targetKindNum1" json:"target_kind_num1,omitempty"`
	TargetKindId2    *uint32 `protobuf:"varint,5,opt,name=target_kind_id2,json=targetKindId2" json:"target_kind_id2,omitempty"`
	TargetKindNum2   *uint32 `protobuf:"varint,6,opt,name=target_kind_num2,json=targetKindNum2" json:"target_kind_num2,omitempty"`
	TargetKindId3    *uint32 `protobuf:"varint,7,opt,name=target_kind_id3,json=targetKindId3" json:"target_kind_id3,omitempty"`
	TargetKindNum3   *uint32 `protobuf:"varint,8,opt,name=target_kind_num3,json=targetKindNum3" json:"target_kind_num3,omitempty"`
	CanSeeDetail     *bool   `protobuf:"varint,9,opt,name=can_see_detail,json=canSeeDetail" json:"can_see_detail,omitempty"`
	CanJoin          *bool   `protobuf:"varint,10,opt,name=can_join,json=canJoin" json:"can_join,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_OPEN_REWARDPOOL) Reset()                    { *m = CMD_S_OPEN_REWARDPOOL{} }
func (m *CMD_S_OPEN_REWARDPOOL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_OPEN_REWARDPOOL) ProtoMessage()               {}
func (*CMD_S_OPEN_REWARDPOOL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *CMD_S_OPEN_REWARDPOOL) GetRewardPool() int64 {
	if m != nil && m.RewardPool != nil {
		return *m.RewardPool
	}
	return 0
}

func (m *CMD_S_OPEN_REWARDPOOL) GetOpenTime() uint32 {
	if m != nil && m.OpenTime != nil {
		return *m.OpenTime
	}
	return 0
}

func (m *CMD_S_OPEN_REWARDPOOL) GetTargetKindId1() uint32 {
	if m != nil && m.TargetKindId1 != nil {
		return *m.TargetKindId1
	}
	return 0
}

func (m *CMD_S_OPEN_REWARDPOOL) GetTargetKindNum1() uint32 {
	if m != nil && m.TargetKindNum1 != nil {
		return *m.TargetKindNum1
	}
	return 0
}

func (m *CMD_S_OPEN_REWARDPOOL) GetTargetKindId2() uint32 {
	if m != nil && m.TargetKindId2 != nil {
		return *m.TargetKindId2
	}
	return 0
}

func (m *CMD_S_OPEN_REWARDPOOL) GetTargetKindNum2() uint32 {
	if m != nil && m.TargetKindNum2 != nil {
		return *m.TargetKindNum2
	}
	return 0
}

func (m *CMD_S_OPEN_REWARDPOOL) GetTargetKindId3() uint32 {
	if m != nil && m.TargetKindId3 != nil {
		return *m.TargetKindId3
	}
	return 0
}

func (m *CMD_S_OPEN_REWARDPOOL) GetTargetKindNum3() uint32 {
	if m != nil && m.TargetKindNum3 != nil {
		return *m.TargetKindNum3
	}
	return 0
}

func (m *CMD_S_OPEN_REWARDPOOL) GetCanSeeDetail() bool {
	if m != nil && m.CanSeeDetail != nil {
		return *m.CanSeeDetail
	}
	return false
}

func (m *CMD_S_OPEN_REWARDPOOL) GetCanJoin() bool {
	if m != nil && m.CanJoin != nil {
		return *m.CanJoin
	}
	return false
}

// 关闭奖金池
type CMD_S_CLOSE_REWARDPOOL struct {
	RewardPool       *int64  `protobuf:"varint,1,opt,name=reward_pool,json=rewardPool" json:"reward_pool,omitempty"`
	ChairId          *int32  `protobuf:"varint,2,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	NickName         []byte  `protobuf:"bytes,3,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	UserId           *uint32 `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_CLOSE_REWARDPOOL) Reset()                    { *m = CMD_S_CLOSE_REWARDPOOL{} }
func (m *CMD_S_CLOSE_REWARDPOOL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CLOSE_REWARDPOOL) ProtoMessage()               {}
func (*CMD_S_CLOSE_REWARDPOOL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *CMD_S_CLOSE_REWARDPOOL) GetRewardPool() int64 {
	if m != nil && m.RewardPool != nil {
		return *m.RewardPool
	}
	return 0
}

func (m *CMD_S_CLOSE_REWARDPOOL) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_CLOSE_REWARDPOOL) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *CMD_S_CLOSE_REWARDPOOL) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 用户奖池排行
type TagUserRewardPoolRank struct {
	ChairId          *int32 `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	Rank             *int32 `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TagUserRewardPoolRank) Reset()                    { *m = TagUserRewardPoolRank{} }
func (m *TagUserRewardPoolRank) String() string            { return proto.CompactTextString(m) }
func (*TagUserRewardPoolRank) ProtoMessage()               {}
func (*TagUserRewardPoolRank) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *TagUserRewardPoolRank) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *TagUserRewardPoolRank) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

// 更新奖池排行
type CMD_S_UPDATE_REWARDPOOL_RANK struct {
	UserRanks        []*TagUserRewardPoolRank `protobuf:"bytes,1,rep,name=user_ranks,json=userRanks" json:"user_ranks,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *CMD_S_UPDATE_REWARDPOOL_RANK) Reset()                    { *m = CMD_S_UPDATE_REWARDPOOL_RANK{} }
func (m *CMD_S_UPDATE_REWARDPOOL_RANK) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UPDATE_REWARDPOOL_RANK) ProtoMessage()               {}
func (*CMD_S_UPDATE_REWARDPOOL_RANK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *CMD_S_UPDATE_REWARDPOOL_RANK) GetUserRanks() []*TagUserRewardPoolRank {
	if m != nil {
		return m.UserRanks
	}
	return nil
}

// 更新奖池任务
type CMD_S_UPDATE_REWARDPOOL_TASK struct {
	KindId1          *uint32 `protobuf:"varint,1,opt,name=kind_id1,json=kindId1" json:"kind_id1,omitempty"`
	KindNum1         *uint32 `protobuf:"varint,2,opt,name=kind_num1,json=kindNum1" json:"kind_num1,omitempty"`
	KindId2          *uint32 `protobuf:"varint,3,opt,name=kind_id2,json=kindId2" json:"kind_id2,omitempty"`
	KindNum2         *uint32 `protobuf:"varint,4,opt,name=kind_num2,json=kindNum2" json:"kind_num2,omitempty"`
	KindId3          *uint32 `protobuf:"varint,5,opt,name=kind_id3,json=kindId3" json:"kind_id3,omitempty"`
	KindNum3         *uint32 `protobuf:"varint,6,opt,name=kind_num3,json=kindNum3" json:"kind_num3,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_UPDATE_REWARDPOOL_TASK) Reset()                    { *m = CMD_S_UPDATE_REWARDPOOL_TASK{} }
func (m *CMD_S_UPDATE_REWARDPOOL_TASK) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UPDATE_REWARDPOOL_TASK) ProtoMessage()               {}
func (*CMD_S_UPDATE_REWARDPOOL_TASK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *CMD_S_UPDATE_REWARDPOOL_TASK) GetKindId1() uint32 {
	if m != nil && m.KindId1 != nil {
		return *m.KindId1
	}
	return 0
}

func (m *CMD_S_UPDATE_REWARDPOOL_TASK) GetKindNum1() uint32 {
	if m != nil && m.KindNum1 != nil {
		return *m.KindNum1
	}
	return 0
}

func (m *CMD_S_UPDATE_REWARDPOOL_TASK) GetKindId2() uint32 {
	if m != nil && m.KindId2 != nil {
		return *m.KindId2
	}
	return 0
}

func (m *CMD_S_UPDATE_REWARDPOOL_TASK) GetKindNum2() uint32 {
	if m != nil && m.KindNum2 != nil {
		return *m.KindNum2
	}
	return 0
}

func (m *CMD_S_UPDATE_REWARDPOOL_TASK) GetKindId3() uint32 {
	if m != nil && m.KindId3 != nil {
		return *m.KindId3
	}
	return 0
}

func (m *CMD_S_UPDATE_REWARDPOOL_TASK) GetKindNum3() uint32 {
	if m != nil && m.KindNum3 != nil {
		return *m.KindNum3
	}
	return 0
}

// 解锁炮
type CMD_C_UNLOCK_CANNON_MULTIPLE struct {
	Level            *uint32 `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_UNLOCK_CANNON_MULTIPLE) Reset()                    { *m = CMD_C_UNLOCK_CANNON_MULTIPLE{} }
func (m *CMD_C_UNLOCK_CANNON_MULTIPLE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_UNLOCK_CANNON_MULTIPLE) ProtoMessage()               {}
func (*CMD_C_UNLOCK_CANNON_MULTIPLE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *CMD_C_UNLOCK_CANNON_MULTIPLE) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

// 解锁炮奖励
type TagUpLevelReward struct {
	RewardType       *uint32 `protobuf:"varint,1,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	RewardSubtype    *uint32 `protobuf:"varint,2,opt,name=reward_subtype,json=rewardSubtype" json:"reward_subtype,omitempty"`
	RewardValue      *int32  `protobuf:"varint,3,opt,name=reward_value,json=rewardValue" json:"reward_value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagUpLevelReward) Reset()                    { *m = TagUpLevelReward{} }
func (m *TagUpLevelReward) String() string            { return proto.CompactTextString(m) }
func (*TagUpLevelReward) ProtoMessage()               {}
func (*TagUpLevelReward) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *TagUpLevelReward) GetRewardType() uint32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *TagUpLevelReward) GetRewardSubtype() uint32 {
	if m != nil && m.RewardSubtype != nil {
		return *m.RewardSubtype
	}
	return 0
}

func (m *TagUpLevelReward) GetRewardValue() int32 {
	if m != nil && m.RewardValue != nil {
		return *m.RewardValue
	}
	return 0
}

// 升级奖励
type CMD_S_UPLEVEL_REWARD struct {
	Level             *uint32             `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	UplevelRewardList []*TagUpLevelReward `protobuf:"bytes,2,rep,name=uplevel_reward_list,json=uplevelRewardList" json:"uplevel_reward_list,omitempty"`
	XXX_unrecognized  []byte              `json:"-"`
}

func (m *CMD_S_UPLEVEL_REWARD) Reset()                    { *m = CMD_S_UPLEVEL_REWARD{} }
func (m *CMD_S_UPLEVEL_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UPLEVEL_REWARD) ProtoMessage()               {}
func (*CMD_S_UPLEVEL_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *CMD_S_UPLEVEL_REWARD) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMD_S_UPLEVEL_REWARD) GetUplevelRewardList() []*TagUpLevelReward {
	if m != nil {
		return m.UplevelRewardList
	}
	return nil
}

// 解锁炮
type CMD_S_UNLOCK_CANNON_MULTIPLE struct {
	ResultCode       *uint32 `protobuf:"varint,1,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
	Level            *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	ConsumeType      *uint32 `protobuf:"varint,3,opt,name=consume_type,json=consumeType" json:"consume_type,omitempty"`
	ConsumeValue     *int64  `protobuf:"varint,4,opt,name=consume_value,json=consumeValue" json:"consume_value,omitempty"`
	RewardType       *int32  `protobuf:"varint,5,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	RewardSubtype    *int32  `protobuf:"varint,6,opt,name=reward_subtype,json=rewardSubtype" json:"reward_subtype,omitempty"`
	RewardValue      *int32  `protobuf:"varint,7,opt,name=reward_value,json=rewardValue" json:"reward_value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_UNLOCK_CANNON_MULTIPLE) Reset()                    { *m = CMD_S_UNLOCK_CANNON_MULTIPLE{} }
func (m *CMD_S_UNLOCK_CANNON_MULTIPLE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UNLOCK_CANNON_MULTIPLE) ProtoMessage()               {}
func (*CMD_S_UNLOCK_CANNON_MULTIPLE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *CMD_S_UNLOCK_CANNON_MULTIPLE) GetResultCode() uint32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

func (m *CMD_S_UNLOCK_CANNON_MULTIPLE) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMD_S_UNLOCK_CANNON_MULTIPLE) GetConsumeType() uint32 {
	if m != nil && m.ConsumeType != nil {
		return *m.ConsumeType
	}
	return 0
}

func (m *CMD_S_UNLOCK_CANNON_MULTIPLE) GetConsumeValue() int64 {
	if m != nil && m.ConsumeValue != nil {
		return *m.ConsumeValue
	}
	return 0
}

func (m *CMD_S_UNLOCK_CANNON_MULTIPLE) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *CMD_S_UNLOCK_CANNON_MULTIPLE) GetRewardSubtype() int32 {
	if m != nil && m.RewardSubtype != nil {
		return *m.RewardSubtype
	}
	return 0
}

func (m *CMD_S_UNLOCK_CANNON_MULTIPLE) GetRewardValue() int32 {
	if m != nil && m.RewardValue != nil {
		return *m.RewardValue
	}
	return 0
}

// 炮等级
type CMD_S_ALL_CANNON_LEVEL struct {
	ChairId          *int32  `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	UesrId           *uint32 `protobuf:"varint,2,opt,name=uesr_id,json=uesrId" json:"uesr_id,omitempty"`
	Level            *uint32 `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_ALL_CANNON_LEVEL) Reset()                    { *m = CMD_S_ALL_CANNON_LEVEL{} }
func (m *CMD_S_ALL_CANNON_LEVEL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_ALL_CANNON_LEVEL) ProtoMessage()               {}
func (*CMD_S_ALL_CANNON_LEVEL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *CMD_S_ALL_CANNON_LEVEL) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_ALL_CANNON_LEVEL) GetUesrId() uint32 {
	if m != nil && m.UesrId != nil {
		return *m.UesrId
	}
	return 0
}

func (m *CMD_S_ALL_CANNON_LEVEL) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

// 用户升级
type CMD_S_USER_UP_LEVEL struct {
	ChairId          *int32  `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	UesrId           *uint32 `protobuf:"varint,2,opt,name=uesr_id,json=uesrId" json:"uesr_id,omitempty"`
	Level            *int32  `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	CurrExp          *int64  `protobuf:"varint,4,opt,name=curr_exp,json=currExp" json:"curr_exp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_USER_UP_LEVEL) Reset()                    { *m = CMD_S_USER_UP_LEVEL{} }
func (m *CMD_S_USER_UP_LEVEL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_USER_UP_LEVEL) ProtoMessage()               {}
func (*CMD_S_USER_UP_LEVEL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *CMD_S_USER_UP_LEVEL) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_USER_UP_LEVEL) GetUesrId() uint32 {
	if m != nil && m.UesrId != nil {
		return *m.UesrId
	}
	return 0
}

func (m *CMD_S_USER_UP_LEVEL) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMD_S_USER_UP_LEVEL) GetCurrExp() int64 {
	if m != nil && m.CurrExp != nil {
		return *m.CurrExp
	}
	return 0
}

// 用户增加经验
type CMD_S_USER_ADD_EXP struct {
	ChairId          *uint32 `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	Level            *int32  `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	AddExp           *int64  `protobuf:"varint,3,opt,name=add_exp,json=addExp" json:"add_exp,omitempty"`
	CurrExp          *int64  `protobuf:"varint,4,opt,name=curr_exp,json=currExp" json:"curr_exp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_USER_ADD_EXP) Reset()                    { *m = CMD_S_USER_ADD_EXP{} }
func (m *CMD_S_USER_ADD_EXP) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_USER_ADD_EXP) ProtoMessage()               {}
func (*CMD_S_USER_ADD_EXP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *CMD_S_USER_ADD_EXP) GetChairId() uint32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_USER_ADD_EXP) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMD_S_USER_ADD_EXP) GetAddExp() int64 {
	if m != nil && m.AddExp != nil {
		return *m.AddExp
	}
	return 0
}

func (m *CMD_S_USER_ADD_EXP) GetCurrExp() int64 {
	if m != nil && m.CurrExp != nil {
		return *m.CurrExp
	}
	return 0
}

// 更新新手引导，确认
type CMD_S_UPDATE_GAME_NEWGUIDE_STATUS struct {
	EGameNewguideStatus *uint32 `protobuf:"varint,1,opt,name=e_game_newguide_status,json=eGameNewguideStatus" json:"e_game_newguide_status,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CMD_S_UPDATE_GAME_NEWGUIDE_STATUS) Reset()         { *m = CMD_S_UPDATE_GAME_NEWGUIDE_STATUS{} }
func (m *CMD_S_UPDATE_GAME_NEWGUIDE_STATUS) String() string { return proto.CompactTextString(m) }
func (*CMD_S_UPDATE_GAME_NEWGUIDE_STATUS) ProtoMessage()    {}
func (*CMD_S_UPDATE_GAME_NEWGUIDE_STATUS) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{77}
}

func (m *CMD_S_UPDATE_GAME_NEWGUIDE_STATUS) GetEGameNewguideStatus() uint32 {
	if m != nil && m.EGameNewguideStatus != nil {
		return *m.EGameNewguideStatus
	}
	return 0
}

// 游戏开始
type CMD_S_GAME_START struct {
	InitBulletNum    *uint32 `protobuf:"varint,1,opt,name=init_bullet_num,json=initBulletNum" json:"init_bullet_num,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_GAME_START) Reset()                    { *m = CMD_S_GAME_START{} }
func (m *CMD_S_GAME_START) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GAME_START) ProtoMessage()               {}
func (*CMD_S_GAME_START) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *CMD_S_GAME_START) GetInitBulletNum() uint32 {
	if m != nil && m.InitBulletNum != nil {
		return *m.InitBulletNum
	}
	return 0
}

// 游戏结束
type CMD_S_GAME_END struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_GAME_END) Reset()                    { *m = CMD_S_GAME_END{} }
func (m *CMD_S_GAME_END) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GAME_END) ProtoMessage()               {}
func (*CMD_S_GAME_END) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

// 用户结算
type TagUserResult struct {
	ChairId          *uint32 `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	UserName         []byte  `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Rank             *int32  `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
	Score            *uint32 `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagUserResult) Reset()                    { *m = TagUserResult{} }
func (m *TagUserResult) String() string            { return proto.CompactTextString(m) }
func (*TagUserResult) ProtoMessage()               {}
func (*TagUserResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *TagUserResult) GetChairId() uint32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *TagUserResult) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *TagUserResult) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *TagUserResult) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 游戏结果
type CMD_S_GAME_RESULT struct {
	UserResultList   []*TagUserResult `protobuf:"bytes,1,rep,name=user_result_list,json=userResultList" json:"user_result_list,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_S_GAME_RESULT) Reset()                    { *m = CMD_S_GAME_RESULT{} }
func (m *CMD_S_GAME_RESULT) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GAME_RESULT) ProtoMessage()               {}
func (*CMD_S_GAME_RESULT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *CMD_S_GAME_RESULT) GetUserResultList() []*TagUserResult {
	if m != nil {
		return m.UserResultList
	}
	return nil
}

// 游戏排行
type CMD_S_GAME_RANK struct {
	UserResultList   []*TagUserResult `protobuf:"bytes,1,rep,name=user_result_list,json=userResultList" json:"user_result_list,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_S_GAME_RANK) Reset()                    { *m = CMD_S_GAME_RANK{} }
func (m *CMD_S_GAME_RANK) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GAME_RANK) ProtoMessage()               {}
func (*CMD_S_GAME_RANK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *CMD_S_GAME_RANK) GetUserResultList() []*TagUserResult {
	if m != nil {
		return m.UserResultList
	}
	return nil
}

type CMD_C_CANNON_ANGLE struct {
	ChairId          *int32   `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	Angle            *float32 `protobuf:"fixed32,2,opt,name=angle" json:"angle,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_C_CANNON_ANGLE) Reset()                    { *m = CMD_C_CANNON_ANGLE{} }
func (m *CMD_C_CANNON_ANGLE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_CANNON_ANGLE) ProtoMessage()               {}
func (*CMD_C_CANNON_ANGLE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *CMD_C_CANNON_ANGLE) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_C_CANNON_ANGLE) GetAngle() float32 {
	if m != nil && m.Angle != nil {
		return *m.Angle
	}
	return 0
}

type CMD_S_CANNON_ANGLE struct {
	ChairId          *int32   `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	Angle            *float32 `protobuf:"fixed32,2,opt,name=angle" json:"angle,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_S_CANNON_ANGLE) Reset()                    { *m = CMD_S_CANNON_ANGLE{} }
func (m *CMD_S_CANNON_ANGLE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CANNON_ANGLE) ProtoMessage()               {}
func (*CMD_S_CANNON_ANGLE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *CMD_S_CANNON_ANGLE) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_CANNON_ANGLE) GetAngle() float32 {
	if m != nil && m.Angle != nil {
		return *m.Angle
	}
	return 0
}

// 进入后台
type CMD_C_ENTER_BACKSTAGE struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_ENTER_BACKSTAGE) Reset()                    { *m = CMD_C_ENTER_BACKSTAGE{} }
func (m *CMD_C_ENTER_BACKSTAGE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_ENTER_BACKSTAGE) ProtoMessage()               {}
func (*CMD_C_ENTER_BACKSTAGE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

type CMD_C_BACK_GAME struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_BACK_GAME) Reset()                    { *m = CMD_C_BACK_GAME{} }
func (m *CMD_C_BACK_GAME) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_BACK_GAME) ProtoMessage()               {}
func (*CMD_C_BACK_GAME) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

// 比赛升级炮
type CMD_S_MATCH_UP_CANNON struct {
	CannonMultiple   *int32 `protobuf:"varint,1,opt,name=cannon_multiple,json=cannonMultiple" json:"cannon_multiple,omitempty"`
	CannonNum        *int32 `protobuf:"varint,2,opt,name=cannon_num,json=cannonNum" json:"cannon_num,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_MATCH_UP_CANNON) Reset()                    { *m = CMD_S_MATCH_UP_CANNON{} }
func (m *CMD_S_MATCH_UP_CANNON) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_MATCH_UP_CANNON) ProtoMessage()               {}
func (*CMD_S_MATCH_UP_CANNON) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *CMD_S_MATCH_UP_CANNON) GetCannonMultiple() int32 {
	if m != nil && m.CannonMultiple != nil {
		return *m.CannonMultiple
	}
	return 0
}

func (m *CMD_S_MATCH_UP_CANNON) GetCannonNum() int32 {
	if m != nil && m.CannonNum != nil {
		return *m.CannonNum
	}
	return 0
}

// 开始砸蛋
type CMD_C_START_EGG struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_START_EGG) Reset()                    { *m = CMD_C_START_EGG{} }
func (m *CMD_C_START_EGG) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_START_EGG) ProtoMessage()               {}
func (*CMD_C_START_EGG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

// 开始砸蛋
type CMD_S_START_EGG struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_START_EGG) Reset()                    { *m = CMD_S_START_EGG{} }
func (m *CMD_S_START_EGG) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_START_EGG) ProtoMessage()               {}
func (*CMD_S_START_EGG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *CMD_S_START_EGG) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 开始砸蛋
type CMD_C_START_TREE struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_START_TREE) Reset()                    { *m = CMD_C_START_TREE{} }
func (m *CMD_C_START_TREE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_START_TREE) ProtoMessage()               {}
func (*CMD_C_START_TREE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

// 开始砸蛋
type CMD_S_START_TREE struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_START_TREE) Reset()                    { *m = CMD_S_START_TREE{} }
func (m *CMD_S_START_TREE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_START_TREE) ProtoMessage()               {}
func (*CMD_S_START_TREE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *CMD_S_START_TREE) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

type CMD_S_TREASURE_INFO struct {
	BonusFishNum     *int32 `protobuf:"varint,1,opt,name=bonus_fish_num,json=bonusFishNum" json:"bonus_fish_num,omitempty"`
	BonusGold        *int64 `protobuf:"varint,2,opt,name=bonus_gold,json=bonusGold" json:"bonus_gold,omitempty"`
	SkillId          *int32 `protobuf:"varint,3,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	BonusTimes       *int32 `protobuf:"varint,4,opt,name=bonus_times,json=bonusTimes" json:"bonus_times,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_TREASURE_INFO) Reset()                    { *m = CMD_S_TREASURE_INFO{} }
func (m *CMD_S_TREASURE_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_TREASURE_INFO) ProtoMessage()               {}
func (*CMD_S_TREASURE_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *CMD_S_TREASURE_INFO) GetBonusFishNum() int32 {
	if m != nil && m.BonusFishNum != nil {
		return *m.BonusFishNum
	}
	return 0
}

func (m *CMD_S_TREASURE_INFO) GetBonusGold() int64 {
	if m != nil && m.BonusGold != nil {
		return *m.BonusGold
	}
	return 0
}

func (m *CMD_S_TREASURE_INFO) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *CMD_S_TREASURE_INFO) GetBonusTimes() int32 {
	if m != nil && m.BonusTimes != nil {
		return *m.BonusTimes
	}
	return 0
}

type CMD_C_TREASURE_START struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_TREASURE_START) Reset()                    { *m = CMD_C_TREASURE_START{} }
func (m *CMD_C_TREASURE_START) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_TREASURE_START) ProtoMessage()               {}
func (*CMD_C_TREASURE_START) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

type CMD_S_TREASURE_REULST struct {
	ResultType       *CMD_S_TREASURE_REULST_REULST_TYPE `protobuf:"varint,1,opt,name=result_type,json=resultType,enum=CMD.CMD_S_TREASURE_REULST_REULST_TYPE" json:"result_type,omitempty"`
	ResultIndex      *int32                             `protobuf:"varint,2,opt,name=result_index,json=resultIndex" json:"result_index,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *CMD_S_TREASURE_REULST) Reset()                    { *m = CMD_S_TREASURE_REULST{} }
func (m *CMD_S_TREASURE_REULST) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_TREASURE_REULST) ProtoMessage()               {}
func (*CMD_S_TREASURE_REULST) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

func (m *CMD_S_TREASURE_REULST) GetResultType() CMD_S_TREASURE_REULST_REULST_TYPE {
	if m != nil && m.ResultType != nil {
		return *m.ResultType
	}
	return CMD_S_TREASURE_REULST_RT_SUCESS
}

func (m *CMD_S_TREASURE_REULST) GetResultIndex() int32 {
	if m != nil && m.ResultIndex != nil {
		return *m.ResultIndex
	}
	return 0
}

type CMD_C_START_SKILL struct {
	SkillId          *int32 `protobuf:"varint,1,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	IsTrigger        *bool  `protobuf:"varint,2,opt,name=is_trigger,json=isTrigger" json:"is_trigger,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_START_SKILL) Reset()                    { *m = CMD_C_START_SKILL{} }
func (m *CMD_C_START_SKILL) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_START_SKILL) ProtoMessage()               {}
func (*CMD_C_START_SKILL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *CMD_C_START_SKILL) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *CMD_C_START_SKILL) GetIsTrigger() bool {
	if m != nil && m.IsTrigger != nil {
		return *m.IsTrigger
	}
	return false
}

type CMD_S_START_SKILL struct {
	SkillId          *int32 `protobuf:"varint,1,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	ChairId          *int32 `protobuf:"varint,2,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	SkillStatus      *int32 `protobuf:"varint,3,opt,name=skill_status,json=skillStatus" json:"skill_status,omitempty"`
	IsTrigger        *bool  `protobuf:"varint,4,opt,name=is_trigger,json=isTrigger" json:"is_trigger,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_START_SKILL) Reset()                    { *m = CMD_S_START_SKILL{} }
func (m *CMD_S_START_SKILL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_START_SKILL) ProtoMessage()               {}
func (*CMD_S_START_SKILL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

func (m *CMD_S_START_SKILL) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *CMD_S_START_SKILL) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_START_SKILL) GetSkillStatus() int32 {
	if m != nil && m.SkillStatus != nil {
		return *m.SkillStatus
	}
	return 0
}

func (m *CMD_S_START_SKILL) GetIsTrigger() bool {
	if m != nil && m.IsTrigger != nil {
		return *m.IsTrigger
	}
	return false
}

type CMD_C_CANCEL_SKILL struct {
	SkillId          *int32 `protobuf:"varint,1,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_CANCEL_SKILL) Reset()                    { *m = CMD_C_CANCEL_SKILL{} }
func (m *CMD_C_CANCEL_SKILL) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_CANCEL_SKILL) ProtoMessage()               {}
func (*CMD_C_CANCEL_SKILL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

func (m *CMD_C_CANCEL_SKILL) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

type CMD_S_CANCEL_SKILL struct {
	SkillId          *int32 `protobuf:"varint,1,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	ChairId          *int32 `protobuf:"varint,2,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_CANCEL_SKILL) Reset()                    { *m = CMD_S_CANCEL_SKILL{} }
func (m *CMD_S_CANCEL_SKILL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CANCEL_SKILL) ProtoMessage()               {}
func (*CMD_S_CANCEL_SKILL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

func (m *CMD_S_CANCEL_SKILL) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *CMD_S_CANCEL_SKILL) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

// 任务鱼
type TagTaskFish struct {
	KindId           *uint32 `protobuf:"varint,1,opt,name=kind_id,json=kindId" json:"kind_id,omitempty"`
	KindNum          *uint32 `protobuf:"varint,2,opt,name=kind_num,json=kindNum" json:"kind_num,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagTaskFish) Reset()                    { *m = TagTaskFish{} }
func (m *TagTaskFish) String() string            { return proto.CompactTextString(m) }
func (*TagTaskFish) ProtoMessage()               {}
func (*TagTaskFish) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *TagTaskFish) GetKindId() uint32 {
	if m != nil && m.KindId != nil {
		return *m.KindId
	}
	return 0
}

func (m *TagTaskFish) GetKindNum() uint32 {
	if m != nil && m.KindNum != nil {
		return *m.KindNum
	}
	return 0
}

// 开始神秘任务
type CMD_S_START_MYSTERIOUS_TASK struct {
	OpenTime         *uint32        `protobuf:"varint,1,opt,name=open_time,json=openTime" json:"open_time,omitempty"`
	ArenaScore       *int32         `protobuf:"varint,2,opt,name=arena_score,json=arenaScore" json:"arena_score,omitempty"`
	TargetFish       []*TagTaskFish `protobuf:"bytes,3,rep,name=target_fish,json=targetFish" json:"target_fish,omitempty"`
	CompleteFish     []*TagTaskFish `protobuf:"bytes,4,rep,name=complete_fish,json=completeFish" json:"complete_fish,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *CMD_S_START_MYSTERIOUS_TASK) Reset()                    { *m = CMD_S_START_MYSTERIOUS_TASK{} }
func (m *CMD_S_START_MYSTERIOUS_TASK) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_START_MYSTERIOUS_TASK) ProtoMessage()               {}
func (*CMD_S_START_MYSTERIOUS_TASK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

func (m *CMD_S_START_MYSTERIOUS_TASK) GetOpenTime() uint32 {
	if m != nil && m.OpenTime != nil {
		return *m.OpenTime
	}
	return 0
}

func (m *CMD_S_START_MYSTERIOUS_TASK) GetArenaScore() int32 {
	if m != nil && m.ArenaScore != nil {
		return *m.ArenaScore
	}
	return 0
}

func (m *CMD_S_START_MYSTERIOUS_TASK) GetTargetFish() []*TagTaskFish {
	if m != nil {
		return m.TargetFish
	}
	return nil
}

func (m *CMD_S_START_MYSTERIOUS_TASK) GetCompleteFish() []*TagTaskFish {
	if m != nil {
		return m.CompleteFish
	}
	return nil
}

// 开始神秘任务
type CMD_S_CLOSE_MYSTERIOUS_TASK struct {
	IsCompleted      *bool  `protobuf:"varint,1,opt,name=is_completed,json=isCompleted" json:"is_completed,omitempty"`
	ArenaScore       *int32 `protobuf:"varint,2,opt,name=arena_score,json=arenaScore" json:"arena_score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_CLOSE_MYSTERIOUS_TASK) Reset()                    { *m = CMD_S_CLOSE_MYSTERIOUS_TASK{} }
func (m *CMD_S_CLOSE_MYSTERIOUS_TASK) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CLOSE_MYSTERIOUS_TASK) ProtoMessage()               {}
func (*CMD_S_CLOSE_MYSTERIOUS_TASK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

func (m *CMD_S_CLOSE_MYSTERIOUS_TASK) GetIsCompleted() bool {
	if m != nil && m.IsCompleted != nil {
		return *m.IsCompleted
	}
	return false
}

func (m *CMD_S_CLOSE_MYSTERIOUS_TASK) GetArenaScore() int32 {
	if m != nil && m.ArenaScore != nil {
		return *m.ArenaScore
	}
	return 0
}

// 更新神秘任务
type CMD_S_UPDATE_MYSTERIOUS_TASK struct {
	CompleteFish     []*TagTaskFish `protobuf:"bytes,3,rep,name=complete_fish,json=completeFish" json:"complete_fish,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *CMD_S_UPDATE_MYSTERIOUS_TASK) Reset()                    { *m = CMD_S_UPDATE_MYSTERIOUS_TASK{} }
func (m *CMD_S_UPDATE_MYSTERIOUS_TASK) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UPDATE_MYSTERIOUS_TASK) ProtoMessage()               {}
func (*CMD_S_UPDATE_MYSTERIOUS_TASK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

func (m *CMD_S_UPDATE_MYSTERIOUS_TASK) GetCompleteFish() []*TagTaskFish {
	if m != nil {
		return m.CompleteFish
	}
	return nil
}

// 竞技场结束
type CMD_S_ARENA_GAME_END struct {
	ArenaScore       *int32 `protobuf:"varint,1,opt,name=arena_score,json=arenaScore" json:"arena_score,omitempty"`
	ConnonAdd        *int32 `protobuf:"varint,2,opt,name=connon_add,json=connonAdd" json:"connon_add,omitempty"`
	VipAdd           *int32 `protobuf:"varint,3,opt,name=vip_add,json=vipAdd" json:"vip_add,omitempty"`
	LastArenaScore   *int32 `protobuf:"varint,4,opt,name=last_arena_score,json=lastArenaScore" json:"last_arena_score,omitempty"`
	TodayMaxScore    *int32 `protobuf:"varint,5,opt,name=today_max_score,json=todayMaxScore" json:"today_max_score,omitempty"`
	MaxArenaScore    *int32 `protobuf:"varint,6,opt,name=max_arena_score,json=maxArenaScore" json:"max_arena_score,omitempty"`
	Rank             *int32 `protobuf:"varint,7,opt,name=rank" json:"rank,omitempty"`
	SiteAdd          *int32 `protobuf:"varint,8,opt,name=site_add,json=siteAdd" json:"site_add,omitempty"`
	CountAdd         *int32 `protobuf:"varint,9,opt,name=count_add,json=countAdd" json:"count_add,omitempty"`
	CountAddNext     *int32 `protobuf:"varint,10,opt,name=count_add_next,json=countAddNext" json:"count_add_next,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_ARENA_GAME_END) Reset()                    { *m = CMD_S_ARENA_GAME_END{} }
func (m *CMD_S_ARENA_GAME_END) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_ARENA_GAME_END) ProtoMessage()               {}
func (*CMD_S_ARENA_GAME_END) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *CMD_S_ARENA_GAME_END) GetArenaScore() int32 {
	if m != nil && m.ArenaScore != nil {
		return *m.ArenaScore
	}
	return 0
}

func (m *CMD_S_ARENA_GAME_END) GetConnonAdd() int32 {
	if m != nil && m.ConnonAdd != nil {
		return *m.ConnonAdd
	}
	return 0
}

func (m *CMD_S_ARENA_GAME_END) GetVipAdd() int32 {
	if m != nil && m.VipAdd != nil {
		return *m.VipAdd
	}
	return 0
}

func (m *CMD_S_ARENA_GAME_END) GetLastArenaScore() int32 {
	if m != nil && m.LastArenaScore != nil {
		return *m.LastArenaScore
	}
	return 0
}

func (m *CMD_S_ARENA_GAME_END) GetTodayMaxScore() int32 {
	if m != nil && m.TodayMaxScore != nil {
		return *m.TodayMaxScore
	}
	return 0
}

func (m *CMD_S_ARENA_GAME_END) GetMaxArenaScore() int32 {
	if m != nil && m.MaxArenaScore != nil {
		return *m.MaxArenaScore
	}
	return 0
}

func (m *CMD_S_ARENA_GAME_END) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *CMD_S_ARENA_GAME_END) GetSiteAdd() int32 {
	if m != nil && m.SiteAdd != nil {
		return *m.SiteAdd
	}
	return 0
}

func (m *CMD_S_ARENA_GAME_END) GetCountAdd() int32 {
	if m != nil && m.CountAdd != nil {
		return *m.CountAdd
	}
	return 0
}

func (m *CMD_S_ARENA_GAME_END) GetCountAddNext() int32 {
	if m != nil && m.CountAddNext != nil {
		return *m.CountAddNext
	}
	return 0
}

// 竞技场关闭
type CMD_S_ARENA_CLOSE struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_ARENA_CLOSE) Reset()                    { *m = CMD_S_ARENA_CLOSE{} }
func (m *CMD_S_ARENA_CLOSE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_ARENA_CLOSE) ProtoMessage()               {}
func (*CMD_S_ARENA_CLOSE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

// 玩家更换成就称号
type CMD_S_CHANGE_ACHIEVEMENT_TITLE struct {
	ChairId          *int32  `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	AchievementTitle *uint32 `protobuf:"varint,2,opt,name=achievement_title,json=achievementTitle" json:"achievement_title,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_CHANGE_ACHIEVEMENT_TITLE) Reset()         { *m = CMD_S_CHANGE_ACHIEVEMENT_TITLE{} }
func (m *CMD_S_CHANGE_ACHIEVEMENT_TITLE) String() string { return proto.CompactTextString(m) }
func (*CMD_S_CHANGE_ACHIEVEMENT_TITLE) ProtoMessage()    {}
func (*CMD_S_CHANGE_ACHIEVEMENT_TITLE) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{105}
}

func (m *CMD_S_CHANGE_ACHIEVEMENT_TITLE) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_CHANGE_ACHIEVEMENT_TITLE) GetAchievementTitle() uint32 {
	if m != nil && m.AchievementTitle != nil {
		return *m.AchievementTitle
	}
	return 0
}

// 活动赛结束
type CMD_S_ARENA_ACTIVITY_END struct {
	ArenaScore       *int32 `protobuf:"varint,1,opt,name=arena_score,json=arenaScore" json:"arena_score,omitempty"`
	CountAdd         *int32 `protobuf:"varint,2,opt,name=count_add,json=countAdd" json:"count_add,omitempty"`
	LastArenaScore   *int32 `protobuf:"varint,3,opt,name=last_arena_score,json=lastArenaScore" json:"last_arena_score,omitempty"`
	MaxScore         *int32 `protobuf:"varint,4,opt,name=max_score,json=maxScore" json:"max_score,omitempty"`
	Rank             *int32 `protobuf:"varint,5,opt,name=rank" json:"rank,omitempty"`
	NextCountAdd     *int32 `protobuf:"varint,6,opt,name=next_count_add,json=nextCountAdd" json:"next_count_add,omitempty"`
	VipAdd           *int32 `protobuf:"varint,7,opt,name=vip_add,json=vipAdd" json:"vip_add,omitempty"`
	IsClose          *bool  `protobuf:"varint,8,opt,name=is_close,json=isClose" json:"is_close,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_ARENA_ACTIVITY_END) Reset()                    { *m = CMD_S_ARENA_ACTIVITY_END{} }
func (m *CMD_S_ARENA_ACTIVITY_END) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_ARENA_ACTIVITY_END) ProtoMessage()               {}
func (*CMD_S_ARENA_ACTIVITY_END) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

func (m *CMD_S_ARENA_ACTIVITY_END) GetArenaScore() int32 {
	if m != nil && m.ArenaScore != nil {
		return *m.ArenaScore
	}
	return 0
}

func (m *CMD_S_ARENA_ACTIVITY_END) GetCountAdd() int32 {
	if m != nil && m.CountAdd != nil {
		return *m.CountAdd
	}
	return 0
}

func (m *CMD_S_ARENA_ACTIVITY_END) GetLastArenaScore() int32 {
	if m != nil && m.LastArenaScore != nil {
		return *m.LastArenaScore
	}
	return 0
}

func (m *CMD_S_ARENA_ACTIVITY_END) GetMaxScore() int32 {
	if m != nil && m.MaxScore != nil {
		return *m.MaxScore
	}
	return 0
}

func (m *CMD_S_ARENA_ACTIVITY_END) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *CMD_S_ARENA_ACTIVITY_END) GetNextCountAdd() int32 {
	if m != nil && m.NextCountAdd != nil {
		return *m.NextCountAdd
	}
	return 0
}

func (m *CMD_S_ARENA_ACTIVITY_END) GetVipAdd() int32 {
	if m != nil && m.VipAdd != nil {
		return *m.VipAdd
	}
	return 0
}

func (m *CMD_S_ARENA_ACTIVITY_END) GetIsClose() bool {
	if m != nil && m.IsClose != nil {
		return *m.IsClose
	}
	return false
}

type CMD_C_BUY_BULLET_SKIN struct {
	BuySkinId        *uint32 `protobuf:"varint,1,opt,name=buy_skin_id,json=buySkinId" json:"buy_skin_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_BUY_BULLET_SKIN) Reset()                    { *m = CMD_C_BUY_BULLET_SKIN{} }
func (m *CMD_C_BUY_BULLET_SKIN) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_BUY_BULLET_SKIN) ProtoMessage()               {}
func (*CMD_C_BUY_BULLET_SKIN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{107} }

func (m *CMD_C_BUY_BULLET_SKIN) GetBuySkinId() uint32 {
	if m != nil && m.BuySkinId != nil {
		return *m.BuySkinId
	}
	return 0
}

type CMD_S_BUY_BULLET_SKIN struct {
	Result           *int32  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	SkinId           *uint32 `protobuf:"varint,2,opt,name=skin_id,json=skinId" json:"skin_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_BUY_BULLET_SKIN) Reset()                    { *m = CMD_S_BUY_BULLET_SKIN{} }
func (m *CMD_S_BUY_BULLET_SKIN) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_BUY_BULLET_SKIN) ProtoMessage()               {}
func (*CMD_S_BUY_BULLET_SKIN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{108} }

func (m *CMD_S_BUY_BULLET_SKIN) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_S_BUY_BULLET_SKIN) GetSkinId() uint32 {
	if m != nil && m.SkinId != nil {
		return *m.SkinId
	}
	return 0
}

type CMD_C_CHANGE_BULLET_SKIN struct {
	SkinId           *uint32 `protobuf:"varint,1,opt,name=skin_id,json=skinId" json:"skin_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_CHANGE_BULLET_SKIN) Reset()                    { *m = CMD_C_CHANGE_BULLET_SKIN{} }
func (m *CMD_C_CHANGE_BULLET_SKIN) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_CHANGE_BULLET_SKIN) ProtoMessage()               {}
func (*CMD_C_CHANGE_BULLET_SKIN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{109} }

func (m *CMD_C_CHANGE_BULLET_SKIN) GetSkinId() uint32 {
	if m != nil && m.SkinId != nil {
		return *m.SkinId
	}
	return 0
}

type CMD_S_CHANGE_BULLET_SKIN struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_CHANGE_BULLET_SKIN) Reset()                    { *m = CMD_S_CHANGE_BULLET_SKIN{} }
func (m *CMD_S_CHANGE_BULLET_SKIN) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CHANGE_BULLET_SKIN) ProtoMessage()               {}
func (*CMD_S_CHANGE_BULLET_SKIN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{110} }

func (m *CMD_S_CHANGE_BULLET_SKIN) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 换皮肤广播
type CMD_S_BC_USER_CHANGE_BULLET_SKIN struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChairId          *uint32 `protobuf:"varint,2,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	SkinId           *uint32 `protobuf:"varint,3,opt,name=skin_id,json=skinId" json:"skin_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_BC_USER_CHANGE_BULLET_SKIN) Reset()         { *m = CMD_S_BC_USER_CHANGE_BULLET_SKIN{} }
func (m *CMD_S_BC_USER_CHANGE_BULLET_SKIN) String() string { return proto.CompactTextString(m) }
func (*CMD_S_BC_USER_CHANGE_BULLET_SKIN) ProtoMessage()    {}
func (*CMD_S_BC_USER_CHANGE_BULLET_SKIN) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{111}
}

func (m *CMD_S_BC_USER_CHANGE_BULLET_SKIN) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_BC_USER_CHANGE_BULLET_SKIN) GetChairId() uint32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_BC_USER_CHANGE_BULLET_SKIN) GetSkinId() uint32 {
	if m != nil && m.SkinId != nil {
		return *m.SkinId
	}
	return 0
}

type TagUserBulletSkinInfo struct {
	SkinId           *uint32 `protobuf:"varint,1,opt,name=skin_id,json=skinId" json:"skin_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagUserBulletSkinInfo) Reset()                    { *m = TagUserBulletSkinInfo{} }
func (m *TagUserBulletSkinInfo) String() string            { return proto.CompactTextString(m) }
func (*TagUserBulletSkinInfo) ProtoMessage()               {}
func (*TagUserBulletSkinInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112} }

func (m *TagUserBulletSkinInfo) GetSkinId() uint32 {
	if m != nil && m.SkinId != nil {
		return *m.SkinId
	}
	return 0
}

type CMD_S_UserBulletSkin struct {
	BulletSkinInfo   []*TagUserBulletSkinInfo `protobuf:"bytes,1,rep,name=bullet_skin_info,json=bulletSkinInfo" json:"bullet_skin_info,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *CMD_S_UserBulletSkin) Reset()                    { *m = CMD_S_UserBulletSkin{} }
func (m *CMD_S_UserBulletSkin) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UserBulletSkin) ProtoMessage()               {}
func (*CMD_S_UserBulletSkin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{113} }

func (m *CMD_S_UserBulletSkin) GetBulletSkinInfo() []*TagUserBulletSkinInfo {
	if m != nil {
		return m.BulletSkinInfo
	}
	return nil
}

type CMD_C_RESIGNUP_ARENA_ACTIVITY struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_RESIGNUP_ARENA_ACTIVITY) Reset()                    { *m = CMD_C_RESIGNUP_ARENA_ACTIVITY{} }
func (m *CMD_C_RESIGNUP_ARENA_ACTIVITY) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_RESIGNUP_ARENA_ACTIVITY) ProtoMessage()               {}
func (*CMD_C_RESIGNUP_ARENA_ACTIVITY) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{114} }

type CMD_S_RESIGNUP_ARENA_ACTIVITY struct {
	ResultCode       *int32 `protobuf:"varint,1,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_RESIGNUP_ARENA_ACTIVITY) Reset()                    { *m = CMD_S_RESIGNUP_ARENA_ACTIVITY{} }
func (m *CMD_S_RESIGNUP_ARENA_ACTIVITY) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_RESIGNUP_ARENA_ACTIVITY) ProtoMessage()               {}
func (*CMD_S_RESIGNUP_ARENA_ACTIVITY) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{115} }

func (m *CMD_S_RESIGNUP_ARENA_ACTIVITY) GetResultCode() int32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

// 掉落扑克牌
type CMD_S_DROP_CARD struct {
	FishId           *int32 `protobuf:"varint,1,opt,name=fish_id,json=fishId" json:"fish_id,omitempty"`
	ChairId          *int32 `protobuf:"varint,2,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	CardNum          *int32 `protobuf:"varint,3,opt,name=card_num,json=cardNum" json:"card_num,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_DROP_CARD) Reset()                    { *m = CMD_S_DROP_CARD{} }
func (m *CMD_S_DROP_CARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_DROP_CARD) ProtoMessage()               {}
func (*CMD_S_DROP_CARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{116} }

func (m *CMD_S_DROP_CARD) GetFishId() int32 {
	if m != nil && m.FishId != nil {
		return *m.FishId
	}
	return 0
}

func (m *CMD_S_DROP_CARD) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_DROP_CARD) GetCardNum() int32 {
	if m != nil && m.CardNum != nil {
		return *m.CardNum
	}
	return 0
}

// 开牌奖励
type CMD_S_CARD_REWARD struct {
	UserId           *int32   `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Cards            []int32  `protobuf:"varint,2,rep,name=cards" json:"cards,omitempty"`
	PokerType        *int32   `protobuf:"varint,3,opt,name=poker_type,json=pokerType" json:"poker_type,omitempty"`
	RewardType       *int32   `protobuf:"varint,4,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	RewardId         *int32   `protobuf:"varint,5,opt,name=reward_id,json=rewardId" json:"reward_id,omitempty"`
	RewardNum        *int32   `protobuf:"varint,6,opt,name=reward_num,json=rewardNum" json:"reward_num,omitempty"`
	Buffs            *TagBuff `protobuf:"bytes,7,opt,name=buffs" json:"buffs,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_S_CARD_REWARD) Reset()                    { *m = CMD_S_CARD_REWARD{} }
func (m *CMD_S_CARD_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CARD_REWARD) ProtoMessage()               {}
func (*CMD_S_CARD_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{117} }

func (m *CMD_S_CARD_REWARD) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_CARD_REWARD) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *CMD_S_CARD_REWARD) GetPokerType() int32 {
	if m != nil && m.PokerType != nil {
		return *m.PokerType
	}
	return 0
}

func (m *CMD_S_CARD_REWARD) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *CMD_S_CARD_REWARD) GetRewardId() int32 {
	if m != nil && m.RewardId != nil {
		return *m.RewardId
	}
	return 0
}

func (m *CMD_S_CARD_REWARD) GetRewardNum() int32 {
	if m != nil && m.RewardNum != nil {
		return *m.RewardNum
	}
	return 0
}

func (m *CMD_S_CARD_REWARD) GetBuffs() *TagBuff {
	if m != nil {
		return m.Buffs
	}
	return nil
}

// 玩家老虎机进度
type CMD_S_SLOT_PLAYER_PROGRESS struct {
	ChairId          *int32 `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	Score            *int32 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	ScoreMax         *int32 `protobuf:"varint,3,opt,name=score_max,json=scoreMax" json:"score_max,omitempty"`
	FishId           *int32 `protobuf:"varint,4,opt,name=fish_id,json=fishId" json:"fish_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_SLOT_PLAYER_PROGRESS) Reset()                    { *m = CMD_S_SLOT_PLAYER_PROGRESS{} }
func (m *CMD_S_SLOT_PLAYER_PROGRESS) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SLOT_PLAYER_PROGRESS) ProtoMessage()               {}
func (*CMD_S_SLOT_PLAYER_PROGRESS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{118} }

func (m *CMD_S_SLOT_PLAYER_PROGRESS) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_SLOT_PLAYER_PROGRESS) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMD_S_SLOT_PLAYER_PROGRESS) GetScoreMax() int32 {
	if m != nil && m.ScoreMax != nil {
		return *m.ScoreMax
	}
	return 0
}

func (m *CMD_S_SLOT_PLAYER_PROGRESS) GetFishId() int32 {
	if m != nil && m.FishId != nil {
		return *m.FishId
	}
	return 0
}

// 玩家老虎机进度
type CMD_S_SLOT_GAME_REWARD struct {
	UserId           *int32  `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TigerType        *int32  `protobuf:"varint,2,opt,name=tiger_type,json=tigerType" json:"tiger_type,omitempty"`
	RewardIndex      *int32  `protobuf:"varint,3,opt,name=reward_index,json=rewardIndex" json:"reward_index,omitempty"`
	RewardId         []int32 `protobuf:"varint,4,rep,name=reward_id,json=rewardId" json:"reward_id,omitempty"`
	RewardType       *int32  `protobuf:"varint,5,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	RewardNum        *int32  `protobuf:"varint,6,opt,name=reward_num,json=rewardNum" json:"reward_num,omitempty"`
	PowerIndex       *int32  `protobuf:"varint,7,opt,name=power_index,json=powerIndex" json:"power_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_SLOT_GAME_REWARD) Reset()                    { *m = CMD_S_SLOT_GAME_REWARD{} }
func (m *CMD_S_SLOT_GAME_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SLOT_GAME_REWARD) ProtoMessage()               {}
func (*CMD_S_SLOT_GAME_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{119} }

func (m *CMD_S_SLOT_GAME_REWARD) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_SLOT_GAME_REWARD) GetTigerType() int32 {
	if m != nil && m.TigerType != nil {
		return *m.TigerType
	}
	return 0
}

func (m *CMD_S_SLOT_GAME_REWARD) GetRewardIndex() int32 {
	if m != nil && m.RewardIndex != nil {
		return *m.RewardIndex
	}
	return 0
}

func (m *CMD_S_SLOT_GAME_REWARD) GetRewardId() []int32 {
	if m != nil {
		return m.RewardId
	}
	return nil
}

func (m *CMD_S_SLOT_GAME_REWARD) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *CMD_S_SLOT_GAME_REWARD) GetRewardNum() int32 {
	if m != nil && m.RewardNum != nil {
		return *m.RewardNum
	}
	return 0
}

func (m *CMD_S_SLOT_GAME_REWARD) GetPowerIndex() int32 {
	if m != nil && m.PowerIndex != nil {
		return *m.PowerIndex
	}
	return 0
}

// 翻倍奖励
type CMD_S_MULTIPLE_REWARD_OPEN struct {
	RewardId         *int32  `protobuf:"varint,1,opt,name=reward_id,json=rewardId" json:"reward_id,omitempty"`
	RewardRate       *int32  `protobuf:"varint,2,opt,name=reward_rate,json=rewardRate" json:"reward_rate,omitempty"`
	RewardTime       *uint32 `protobuf:"varint,3,opt,name=reward_time,json=rewardTime" json:"reward_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_MULTIPLE_REWARD_OPEN) Reset()                    { *m = CMD_S_MULTIPLE_REWARD_OPEN{} }
func (m *CMD_S_MULTIPLE_REWARD_OPEN) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_MULTIPLE_REWARD_OPEN) ProtoMessage()               {}
func (*CMD_S_MULTIPLE_REWARD_OPEN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{120} }

func (m *CMD_S_MULTIPLE_REWARD_OPEN) GetRewardId() int32 {
	if m != nil && m.RewardId != nil {
		return *m.RewardId
	}
	return 0
}

func (m *CMD_S_MULTIPLE_REWARD_OPEN) GetRewardRate() int32 {
	if m != nil && m.RewardRate != nil {
		return *m.RewardRate
	}
	return 0
}

func (m *CMD_S_MULTIPLE_REWARD_OPEN) GetRewardTime() uint32 {
	if m != nil && m.RewardTime != nil {
		return *m.RewardTime
	}
	return 0
}

// 翻倍奖励中奖信息
type CMD_S_GET_MULTIPLE_REWARD struct {
	UserId           *int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName         []byte `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	RewardType       *int32 `protobuf:"varint,3,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	RewardNum        *int32 `protobuf:"varint,4,opt,name=reward_num,json=rewardNum" json:"reward_num,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_GET_MULTIPLE_REWARD) Reset()                    { *m = CMD_S_GET_MULTIPLE_REWARD{} }
func (m *CMD_S_GET_MULTIPLE_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GET_MULTIPLE_REWARD) ProtoMessage()               {}
func (*CMD_S_GET_MULTIPLE_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{121} }

func (m *CMD_S_GET_MULTIPLE_REWARD) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_GET_MULTIPLE_REWARD) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *CMD_S_GET_MULTIPLE_REWARD) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *CMD_S_GET_MULTIPLE_REWARD) GetRewardNum() int32 {
	if m != nil && m.RewardNum != nil {
		return *m.RewardNum
	}
	return 0
}

type CMD_S_SYNC_TIGER_MAC struct {
	ChairId          *int32  `protobuf:"varint,1,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	CardNum          *int32  `protobuf:"varint,2,opt,name=card_num,json=cardNum" json:"card_num,omitempty"`
	Score            *int32  `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	ScoreMax         *int32  `protobuf:"varint,4,opt,name=score_max,json=scoreMax" json:"score_max,omitempty"`
	SlamPool         *uint32 `protobuf:"varint,5,opt,name=slam_pool,json=slamPool" json:"slam_pool,omitempty"`
	ArenaState       *int32  `protobuf:"varint,6,opt,name=arena_state,json=arenaState" json:"arena_state,omitempty"`
	ArenaCountdown   *uint32 `protobuf:"varint,7,opt,name=arena_countdown,json=arenaCountdown" json:"arena_countdown,omitempty"`
	LastUserName     []byte  `protobuf:"bytes,8,opt,name=last_user_name,json=lastUserName" json:"last_user_name,omitempty"`
	LastSlamReward   *uint32 `protobuf:"varint,9,opt,name=last_slam_reward,json=lastSlamReward" json:"last_slam_reward,omitempty"`
	ArenaPool        *uint32 `protobuf:"varint,10,opt,name=arena_pool,json=arenaPool" json:"arena_pool,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_SYNC_TIGER_MAC) Reset()                    { *m = CMD_S_SYNC_TIGER_MAC{} }
func (m *CMD_S_SYNC_TIGER_MAC) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SYNC_TIGER_MAC) ProtoMessage()               {}
func (*CMD_S_SYNC_TIGER_MAC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{122} }

func (m *CMD_S_SYNC_TIGER_MAC) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_SYNC_TIGER_MAC) GetCardNum() int32 {
	if m != nil && m.CardNum != nil {
		return *m.CardNum
	}
	return 0
}

func (m *CMD_S_SYNC_TIGER_MAC) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMD_S_SYNC_TIGER_MAC) GetScoreMax() int32 {
	if m != nil && m.ScoreMax != nil {
		return *m.ScoreMax
	}
	return 0
}

func (m *CMD_S_SYNC_TIGER_MAC) GetSlamPool() uint32 {
	if m != nil && m.SlamPool != nil {
		return *m.SlamPool
	}
	return 0
}

func (m *CMD_S_SYNC_TIGER_MAC) GetArenaState() int32 {
	if m != nil && m.ArenaState != nil {
		return *m.ArenaState
	}
	return 0
}

func (m *CMD_S_SYNC_TIGER_MAC) GetArenaCountdown() uint32 {
	if m != nil && m.ArenaCountdown != nil {
		return *m.ArenaCountdown
	}
	return 0
}

func (m *CMD_S_SYNC_TIGER_MAC) GetLastUserName() []byte {
	if m != nil {
		return m.LastUserName
	}
	return nil
}

func (m *CMD_S_SYNC_TIGER_MAC) GetLastSlamReward() uint32 {
	if m != nil && m.LastSlamReward != nil {
		return *m.LastSlamReward
	}
	return 0
}

func (m *CMD_S_SYNC_TIGER_MAC) GetArenaPool() uint32 {
	if m != nil && m.ArenaPool != nil {
		return *m.ArenaPool
	}
	return 0
}

type TagCasinoRankPlayerInfo struct {
	UserId           *int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Rank             *int32 `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	Score            *int32 `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	UserName         []byte `protobuf:"bytes,4,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	FaceId           *int32 `protobuf:"varint,5,opt,name=face_id,json=faceId" json:"face_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TagCasinoRankPlayerInfo) Reset()                    { *m = TagCasinoRankPlayerInfo{} }
func (m *TagCasinoRankPlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*TagCasinoRankPlayerInfo) ProtoMessage()               {}
func (*TagCasinoRankPlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{123} }

func (m *TagCasinoRankPlayerInfo) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *TagCasinoRankPlayerInfo) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *TagCasinoRankPlayerInfo) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *TagCasinoRankPlayerInfo) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *TagCasinoRankPlayerInfo) GetFaceId() int32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

type CMD_S_CASINO_ARENA_RANK struct {
	PlayerList       []*TagCasinoRankPlayerInfo `protobuf:"bytes,1,rep,name=player_list,json=playerList" json:"player_list,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CMD_S_CASINO_ARENA_RANK) Reset()                    { *m = CMD_S_CASINO_ARENA_RANK{} }
func (m *CMD_S_CASINO_ARENA_RANK) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CASINO_ARENA_RANK) ProtoMessage()               {}
func (*CMD_S_CASINO_ARENA_RANK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{124} }

func (m *CMD_S_CASINO_ARENA_RANK) GetPlayerList() []*TagCasinoRankPlayerInfo {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

type TagRankDetailInfo struct {
	UserId           *int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Rank             *int32 `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	Score            *int32 `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	Gold             *int32 `protobuf:"varint,4,opt,name=gold" json:"gold,omitempty"`
	UserName         []byte `protobuf:"bytes,5,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	VipLevel         *int32 `protobuf:"varint,6,opt,name=vip_level,json=vipLevel" json:"vip_level,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TagRankDetailInfo) Reset()                    { *m = TagRankDetailInfo{} }
func (m *TagRankDetailInfo) String() string            { return proto.CompactTextString(m) }
func (*TagRankDetailInfo) ProtoMessage()               {}
func (*TagRankDetailInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{125} }

func (m *TagRankDetailInfo) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *TagRankDetailInfo) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *TagRankDetailInfo) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *TagRankDetailInfo) GetGold() int32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *TagRankDetailInfo) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *TagRankDetailInfo) GetVipLevel() int32 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

type CMD_S_ARENA_RANK_DETAIL struct {
	Place1           *TagRankDetailInfo `protobuf:"bytes,1,opt,name=place1" json:"place1,omitempty"`
	Place2           *TagRankDetailInfo `protobuf:"bytes,2,opt,name=place2" json:"place2,omitempty"`
	Place3           *TagRankDetailInfo `protobuf:"bytes,3,opt,name=place3" json:"place3,omitempty"`
	Place4           *TagRankDetailInfo `protobuf:"bytes,4,opt,name=place4" json:"place4,omitempty"`
	Place5           *TagRankDetailInfo `protobuf:"bytes,5,opt,name=place5" json:"place5,omitempty"`
	MyRank           *TagRankDetailInfo `protobuf:"bytes,6,opt,name=my_rank,json=myRank" json:"my_rank,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CMD_S_ARENA_RANK_DETAIL) Reset()                    { *m = CMD_S_ARENA_RANK_DETAIL{} }
func (m *CMD_S_ARENA_RANK_DETAIL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_ARENA_RANK_DETAIL) ProtoMessage()               {}
func (*CMD_S_ARENA_RANK_DETAIL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{126} }

func (m *CMD_S_ARENA_RANK_DETAIL) GetPlace1() *TagRankDetailInfo {
	if m != nil {
		return m.Place1
	}
	return nil
}

func (m *CMD_S_ARENA_RANK_DETAIL) GetPlace2() *TagRankDetailInfo {
	if m != nil {
		return m.Place2
	}
	return nil
}

func (m *CMD_S_ARENA_RANK_DETAIL) GetPlace3() *TagRankDetailInfo {
	if m != nil {
		return m.Place3
	}
	return nil
}

func (m *CMD_S_ARENA_RANK_DETAIL) GetPlace4() *TagRankDetailInfo {
	if m != nil {
		return m.Place4
	}
	return nil
}

func (m *CMD_S_ARENA_RANK_DETAIL) GetPlace5() *TagRankDetailInfo {
	if m != nil {
		return m.Place5
	}
	return nil
}

func (m *CMD_S_ARENA_RANK_DETAIL) GetMyRank() *TagRankDetailInfo {
	if m != nil {
		return m.MyRank
	}
	return nil
}

type CMD_S_SLAM_POOL struct {
	SlamPool         *uint32 `protobuf:"varint,1,opt,name=slam_pool,json=slamPool" json:"slam_pool,omitempty"`
	LastUserName     []byte  `protobuf:"bytes,2,opt,name=last_user_name,json=lastUserName" json:"last_user_name,omitempty"`
	LastSlamReward   *uint32 `protobuf:"varint,3,opt,name=last_slam_reward,json=lastSlamReward" json:"last_slam_reward,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_SLAM_POOL) Reset()                    { *m = CMD_S_SLAM_POOL{} }
func (m *CMD_S_SLAM_POOL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SLAM_POOL) ProtoMessage()               {}
func (*CMD_S_SLAM_POOL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{127} }

func (m *CMD_S_SLAM_POOL) GetSlamPool() uint32 {
	if m != nil && m.SlamPool != nil {
		return *m.SlamPool
	}
	return 0
}

func (m *CMD_S_SLAM_POOL) GetLastUserName() []byte {
	if m != nil {
		return m.LastUserName
	}
	return nil
}

func (m *CMD_S_SLAM_POOL) GetLastSlamReward() uint32 {
	if m != nil && m.LastSlamReward != nil {
		return *m.LastSlamReward
	}
	return 0
}

type CMD_S_CASINO_ARENA struct {
	ArenaState       *int32  `protobuf:"varint,1,opt,name=arena_state,json=arenaState" json:"arena_state,omitempty"`
	CountDown        *uint32 `protobuf:"varint,2,opt,name=count_down,json=countDown" json:"count_down,omitempty"`
	ArenaPool        *uint32 `protobuf:"varint,3,opt,name=arena_pool,json=arenaPool" json:"arena_pool,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_CASINO_ARENA) Reset()                    { *m = CMD_S_CASINO_ARENA{} }
func (m *CMD_S_CASINO_ARENA) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CASINO_ARENA) ProtoMessage()               {}
func (*CMD_S_CASINO_ARENA) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{128} }

func (m *CMD_S_CASINO_ARENA) GetArenaState() int32 {
	if m != nil && m.ArenaState != nil {
		return *m.ArenaState
	}
	return 0
}

func (m *CMD_S_CASINO_ARENA) GetCountDown() uint32 {
	if m != nil && m.CountDown != nil {
		return *m.CountDown
	}
	return 0
}

func (m *CMD_S_CASINO_ARENA) GetArenaPool() uint32 {
	if m != nil && m.ArenaPool != nil {
		return *m.ArenaPool
	}
	return 0
}

type CMD_S_SLAM_POOL_PLAYER struct {
	UserName         []byte  `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	SlamReward       *uint32 `protobuf:"varint,2,opt,name=slam_reward,json=slamReward" json:"slam_reward,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_SLAM_POOL_PLAYER) Reset()                    { *m = CMD_S_SLAM_POOL_PLAYER{} }
func (m *CMD_S_SLAM_POOL_PLAYER) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SLAM_POOL_PLAYER) ProtoMessage()               {}
func (*CMD_S_SLAM_POOL_PLAYER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{129} }

func (m *CMD_S_SLAM_POOL_PLAYER) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *CMD_S_SLAM_POOL_PLAYER) GetSlamReward() uint32 {
	if m != nil && m.SlamReward != nil {
		return *m.SlamReward
	}
	return 0
}

// 触发BOSS轮盘
type CMD_S_BOSS_ROULETTE struct {
	UserId           *int32  `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	RewardValue      []int32 `protobuf:"varint,2,rep,name=reward_value,json=rewardValue" json:"reward_value,omitempty"`
	MoneyValue       []int32 `protobuf:"varint,3,rep,name=money_value,json=moneyValue" json:"money_value,omitempty"`
	RoulettleTime    *int32  `protobuf:"varint,4,opt,name=roulettle_time,json=roulettleTime" json:"roulettle_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_BOSS_ROULETTE) Reset()                    { *m = CMD_S_BOSS_ROULETTE{} }
func (m *CMD_S_BOSS_ROULETTE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_BOSS_ROULETTE) ProtoMessage()               {}
func (*CMD_S_BOSS_ROULETTE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{130} }

func (m *CMD_S_BOSS_ROULETTE) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_BOSS_ROULETTE) GetRewardValue() []int32 {
	if m != nil {
		return m.RewardValue
	}
	return nil
}

func (m *CMD_S_BOSS_ROULETTE) GetMoneyValue() []int32 {
	if m != nil {
		return m.MoneyValue
	}
	return nil
}

func (m *CMD_S_BOSS_ROULETTE) GetRoulettleTime() int32 {
	if m != nil && m.RoulettleTime != nil {
		return *m.RoulettleTime
	}
	return 0
}

// 开始开启轮盘界面
type CMD_C_START_BOSS_ROULETTE struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_START_BOSS_ROULETTE) Reset()                    { *m = CMD_C_START_BOSS_ROULETTE{} }
func (m *CMD_C_START_BOSS_ROULETTE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_START_BOSS_ROULETTE) ProtoMessage()               {}
func (*CMD_C_START_BOSS_ROULETTE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{131} }

// 开始开启轮盘界面返回
type CMD_S_START_BOSS_ROULETTE struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	RoulettleTime    *int32 `protobuf:"varint,2,opt,name=roulettle_time,json=roulettleTime" json:"roulettle_time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_START_BOSS_ROULETTE) Reset()                    { *m = CMD_S_START_BOSS_ROULETTE{} }
func (m *CMD_S_START_BOSS_ROULETTE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_START_BOSS_ROULETTE) ProtoMessage()               {}
func (*CMD_S_START_BOSS_ROULETTE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{132} }

func (m *CMD_S_START_BOSS_ROULETTE) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_S_START_BOSS_ROULETTE) GetRoulettleTime() int32 {
	if m != nil && m.RoulettleTime != nil {
		return *m.RoulettleTime
	}
	return 0
}

// BOSS轮盘请求
type CMD_C_BOSS_ROULETTE_REQ struct {
	BetMoney         *int32 `protobuf:"varint,1,opt,name=bet_money,json=betMoney" json:"bet_money,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_BOSS_ROULETTE_REQ) Reset()                    { *m = CMD_C_BOSS_ROULETTE_REQ{} }
func (m *CMD_C_BOSS_ROULETTE_REQ) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_BOSS_ROULETTE_REQ) ProtoMessage()               {}
func (*CMD_C_BOSS_ROULETTE_REQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{133} }

func (m *CMD_C_BOSS_ROULETTE_REQ) GetBetMoney() int32 {
	if m != nil && m.BetMoney != nil {
		return *m.BetMoney
	}
	return 0
}

// BOSS轮盘请求返回
type CMD_S_BOSS_ROULETTE_REQ struct {
	ErrCode          *int32 `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	RewardValue      *int32 `protobuf:"varint,2,opt,name=reward_value,json=rewardValue" json:"reward_value,omitempty"`
	ResultMoney      *int32 `protobuf:"varint,3,opt,name=result_money,json=resultMoney" json:"result_money,omitempty"`
	TimeOver         *bool  `protobuf:"varint,4,opt,name=time_over,json=timeOver" json:"time_over,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_BOSS_ROULETTE_REQ) Reset()                    { *m = CMD_S_BOSS_ROULETTE_REQ{} }
func (m *CMD_S_BOSS_ROULETTE_REQ) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_BOSS_ROULETTE_REQ) ProtoMessage()               {}
func (*CMD_S_BOSS_ROULETTE_REQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{134} }

func (m *CMD_S_BOSS_ROULETTE_REQ) GetErrCode() int32 {
	if m != nil && m.ErrCode != nil {
		return *m.ErrCode
	}
	return 0
}

func (m *CMD_S_BOSS_ROULETTE_REQ) GetRewardValue() int32 {
	if m != nil && m.RewardValue != nil {
		return *m.RewardValue
	}
	return 0
}

func (m *CMD_S_BOSS_ROULETTE_REQ) GetResultMoney() int32 {
	if m != nil && m.ResultMoney != nil {
		return *m.ResultMoney
	}
	return 0
}

func (m *CMD_S_BOSS_ROULETTE_REQ) GetTimeOver() bool {
	if m != nil && m.TimeOver != nil {
		return *m.TimeOver
	}
	return false
}

// 触发随机倍数
type CMD_S_RANDOM_MULTIPLE struct {
	FishKind_ID      *int32 `protobuf:"varint,1,opt,name=fish_kind_ID,json=fishKindID" json:"fish_kind_ID,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_RANDOM_MULTIPLE) Reset()                    { *m = CMD_S_RANDOM_MULTIPLE{} }
func (m *CMD_S_RANDOM_MULTIPLE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_RANDOM_MULTIPLE) ProtoMessage()               {}
func (*CMD_S_RANDOM_MULTIPLE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{135} }

func (m *CMD_S_RANDOM_MULTIPLE) GetFishKind_ID() int32 {
	if m != nil && m.FishKind_ID != nil {
		return *m.FishKind_ID
	}
	return 0
}

// 触发随机倍数请求
type CMD_C_RANDOM_MULTIPLE_REQ struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_RANDOM_MULTIPLE_REQ) Reset()                    { *m = CMD_C_RANDOM_MULTIPLE_REQ{} }
func (m *CMD_C_RANDOM_MULTIPLE_REQ) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_RANDOM_MULTIPLE_REQ) ProtoMessage()               {}
func (*CMD_C_RANDOM_MULTIPLE_REQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{136} }

// 触发随机倍数返回
type CMD_S_RANDOM_MULTIPLE_RESULT struct {
	RandomValue      *int32 `protobuf:"varint,1,opt,name=random_value,json=randomValue" json:"random_value,omitempty"`
	ResultMoney      *int32 `protobuf:"varint,2,opt,name=result_money,json=resultMoney" json:"result_money,omitempty"`
	Chair_ID         *int32 `protobuf:"varint,3,opt,name=chair_ID,json=chairID" json:"chair_ID,omitempty"`
	FishKind_ID      *int32 `protobuf:"varint,4,opt,name=fish_kind_ID,json=fishKindID" json:"fish_kind_ID,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_RANDOM_MULTIPLE_RESULT) Reset()                    { *m = CMD_S_RANDOM_MULTIPLE_RESULT{} }
func (m *CMD_S_RANDOM_MULTIPLE_RESULT) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_RANDOM_MULTIPLE_RESULT) ProtoMessage()               {}
func (*CMD_S_RANDOM_MULTIPLE_RESULT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{137} }

func (m *CMD_S_RANDOM_MULTIPLE_RESULT) GetRandomValue() int32 {
	if m != nil && m.RandomValue != nil {
		return *m.RandomValue
	}
	return 0
}

func (m *CMD_S_RANDOM_MULTIPLE_RESULT) GetResultMoney() int32 {
	if m != nil && m.ResultMoney != nil {
		return *m.ResultMoney
	}
	return 0
}

func (m *CMD_S_RANDOM_MULTIPLE_RESULT) GetChair_ID() int32 {
	if m != nil && m.Chair_ID != nil {
		return *m.Chair_ID
	}
	return 0
}

func (m *CMD_S_RANDOM_MULTIPLE_RESULT) GetFishKind_ID() int32 {
	if m != nil && m.FishKind_ID != nil {
		return *m.FishKind_ID
	}
	return 0
}

// 更新幸运星
type CMD_S_CLASSIC_PRIZE_POOL_UPDATE_STAR struct {
	AddStar          *int32  `protobuf:"varint,1,opt,name=add_star,json=addStar" json:"add_star,omitempty"`
	TotalStar        *uint32 `protobuf:"varint,2,opt,name=total_star,json=totalStar" json:"total_star,omitempty"`
	FishUid          *uint32 `protobuf:"varint,3,opt,name=fish_uid,json=fishUid" json:"fish_uid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_UPDATE_STAR) Reset()         { *m = CMD_S_CLASSIC_PRIZE_POOL_UPDATE_STAR{} }
func (m *CMD_S_CLASSIC_PRIZE_POOL_UPDATE_STAR) String() string { return proto.CompactTextString(m) }
func (*CMD_S_CLASSIC_PRIZE_POOL_UPDATE_STAR) ProtoMessage()    {}
func (*CMD_S_CLASSIC_PRIZE_POOL_UPDATE_STAR) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{138}
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_UPDATE_STAR) GetAddStar() int32 {
	if m != nil && m.AddStar != nil {
		return *m.AddStar
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_UPDATE_STAR) GetTotalStar() uint32 {
	if m != nil && m.TotalStar != nil {
		return *m.TotalStar
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_UPDATE_STAR) GetFishUid() uint32 {
	if m != nil && m.FishUid != nil {
		return *m.FishUid
	}
	return 0
}

// 幸运猜大小
type CMD_C_CLASSIC_PRIZE_POOL_GUESS struct {
	Type             *CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType `protobuf:"varint,1,opt,name=type,enum=CMD.CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType" json:"type,omitempty"`
	XXX_unrecognized []byte                                  `json:"-"`
}

func (m *CMD_C_CLASSIC_PRIZE_POOL_GUESS) Reset()         { *m = CMD_C_CLASSIC_PRIZE_POOL_GUESS{} }
func (m *CMD_C_CLASSIC_PRIZE_POOL_GUESS) String() string { return proto.CompactTextString(m) }
func (*CMD_C_CLASSIC_PRIZE_POOL_GUESS) ProtoMessage()    {}
func (*CMD_C_CLASSIC_PRIZE_POOL_GUESS) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{139}
}

func (m *CMD_C_CLASSIC_PRIZE_POOL_GUESS) GetType() CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CMD_C_CLASSIC_PRIZE_POOL_GUESS_Small
}

// 幸运猜大小
type CMD_S_CLASSIC_PRIZE_POOL_GUESS struct {
	Result           *CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType `protobuf:"varint,1,opt,name=result,enum=CMD.CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType" json:"result,omitempty"`
	Dice1            *uint32                                 `protobuf:"varint,2,opt,name=dice1" json:"dice1,omitempty"`
	Dice2            *uint32                                 `protobuf:"varint,3,opt,name=dice2" json:"dice2,omitempty"`
	ChangeScore      *int32                                  `protobuf:"varint,4,opt,name=change_score,json=changeScore" json:"change_score,omitempty"`
	CurScore         *uint32                                 `protobuf:"varint,5,opt,name=cur_score,json=curScore" json:"cur_score,omitempty"`
	BOpenTurnplate   *bool                                   `protobuf:"varint,6,opt,name=bOpenTurnplate" json:"bOpenTurnplate,omitempty"`
	XXX_unrecognized []byte                                  `json:"-"`
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GUESS) Reset()         { *m = CMD_S_CLASSIC_PRIZE_POOL_GUESS{} }
func (m *CMD_S_CLASSIC_PRIZE_POOL_GUESS) String() string { return proto.CompactTextString(m) }
func (*CMD_S_CLASSIC_PRIZE_POOL_GUESS) ProtoMessage()    {}
func (*CMD_S_CLASSIC_PRIZE_POOL_GUESS) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{140}
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GUESS) GetResult() CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return CMD_C_CLASSIC_PRIZE_POOL_GUESS_Small
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GUESS) GetDice1() uint32 {
	if m != nil && m.Dice1 != nil {
		return *m.Dice1
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GUESS) GetDice2() uint32 {
	if m != nil && m.Dice2 != nil {
		return *m.Dice2
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GUESS) GetChangeScore() int32 {
	if m != nil && m.ChangeScore != nil {
		return *m.ChangeScore
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GUESS) GetCurScore() uint32 {
	if m != nil && m.CurScore != nil {
		return *m.CurScore
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GUESS) GetBOpenTurnplate() bool {
	if m != nil && m.BOpenTurnplate != nil {
		return *m.BOpenTurnplate
	}
	return false
}

// 领取幸运猜大小奖金
type CMD_C_CLASSIC_PRIZE_POOL_GUESS_GET struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_CLASSIC_PRIZE_POOL_GUESS_GET) Reset()         { *m = CMD_C_CLASSIC_PRIZE_POOL_GUESS_GET{} }
func (m *CMD_C_CLASSIC_PRIZE_POOL_GUESS_GET) String() string { return proto.CompactTextString(m) }
func (*CMD_C_CLASSIC_PRIZE_POOL_GUESS_GET) ProtoMessage()    {}
func (*CMD_C_CLASSIC_PRIZE_POOL_GUESS_GET) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{141}
}

// 领取幸运猜大小奖金
type CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET struct {
	Result           *CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result `protobuf:"varint,1,opt,name=result,enum=CMD.CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result" json:"result,omitempty"`
	Reward           *uint32                                    `protobuf:"varint,2,opt,name=reward" json:"reward,omitempty"`
	WinCount         *uint32                                    `protobuf:"varint,3,opt,name=win_count,json=winCount" json:"win_count,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET) Reset()         { *m = CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET{} }
func (m *CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET) String() string { return proto.CompactTextString(m) }
func (*CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET) ProtoMessage()    {}
func (*CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{142}
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET) GetResult() CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Successful
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET) GetReward() uint32 {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET) GetWinCount() uint32 {
	if m != nil && m.WinCount != nil {
		return *m.WinCount
	}
	return 0
}

// 获取幸运星信息
type CMD_C_CLASSIC_PRIZE_POOL_GET_STAR struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_CLASSIC_PRIZE_POOL_GET_STAR) Reset()         { *m = CMD_C_CLASSIC_PRIZE_POOL_GET_STAR{} }
func (m *CMD_C_CLASSIC_PRIZE_POOL_GET_STAR) String() string { return proto.CompactTextString(m) }
func (*CMD_C_CLASSIC_PRIZE_POOL_GET_STAR) ProtoMessage()    {}
func (*CMD_C_CLASSIC_PRIZE_POOL_GET_STAR) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{143}
}

// 获取幸运星信息
type CMD_S_CLASSIC_PRIZE_POOL_GET_STAR struct {
	Star             *uint32  `protobuf:"varint,1,opt,name=star" json:"star,omitempty"`
	Ratio            *uint32  `protobuf:"varint,2,opt,name=ratio" json:"ratio,omitempty"`
	MinStar          []uint32 `protobuf:"varint,3,rep,name=min_star,json=minStar" json:"min_star,omitempty"`
	MaxRatio         []uint32 `protobuf:"varint,4,rep,name=max_ratio,json=maxRatio" json:"max_ratio,omitempty"`
	StarUplimit      *uint32  `protobuf:"varint,5,opt,name=star_uplimit,json=starUplimit" json:"star_uplimit,omitempty"`
	GuessNum         *uint32  `protobuf:"varint,6,opt,name=guess_num,json=guessNum" json:"guess_num,omitempty"`
	GuessReward      *uint32  `protobuf:"varint,7,opt,name=guess_reward,json=guessReward" json:"guess_reward,omitempty"`
	GuessMaxCount    *uint32  `protobuf:"varint,8,opt,name=guess_max_count,json=guessMaxCount" json:"guess_max_count,omitempty"`
	GuessMinStar     *uint32  `protobuf:"varint,9,opt,name=guess_min_star,json=guessMinStar" json:"guess_min_star,omitempty"`
	TurnMinStar      *uint32  `protobuf:"varint,10,opt,name=turn_min_star,json=turnMinStar" json:"turn_min_star,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) Reset()         { *m = CMD_S_CLASSIC_PRIZE_POOL_GET_STAR{} }
func (m *CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) String() string { return proto.CompactTextString(m) }
func (*CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) ProtoMessage()    {}
func (*CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{144}
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) GetStar() uint32 {
	if m != nil && m.Star != nil {
		return *m.Star
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) GetRatio() uint32 {
	if m != nil && m.Ratio != nil {
		return *m.Ratio
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) GetMinStar() []uint32 {
	if m != nil {
		return m.MinStar
	}
	return nil
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) GetMaxRatio() []uint32 {
	if m != nil {
		return m.MaxRatio
	}
	return nil
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) GetStarUplimit() uint32 {
	if m != nil && m.StarUplimit != nil {
		return *m.StarUplimit
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) GetGuessNum() uint32 {
	if m != nil && m.GuessNum != nil {
		return *m.GuessNum
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) GetGuessReward() uint32 {
	if m != nil && m.GuessReward != nil {
		return *m.GuessReward
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) GetGuessMaxCount() uint32 {
	if m != nil && m.GuessMaxCount != nil {
		return *m.GuessMaxCount
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) GetGuessMinStar() uint32 {
	if m != nil && m.GuessMinStar != nil {
		return *m.GuessMinStar
	}
	return 0
}

func (m *CMD_S_CLASSIC_PRIZE_POOL_GET_STAR) GetTurnMinStar() uint32 {
	if m != nil && m.TurnMinStar != nil {
		return *m.TurnMinStar
	}
	return 0
}

type CMD_C_BUY_MONSTER_SKIN struct {
	BuySkinId        *uint32 `protobuf:"varint,1,opt,name=buy_skin_id,json=buySkinId" json:"buy_skin_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_BUY_MONSTER_SKIN) Reset()                    { *m = CMD_C_BUY_MONSTER_SKIN{} }
func (m *CMD_C_BUY_MONSTER_SKIN) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_BUY_MONSTER_SKIN) ProtoMessage()               {}
func (*CMD_C_BUY_MONSTER_SKIN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{145} }

func (m *CMD_C_BUY_MONSTER_SKIN) GetBuySkinId() uint32 {
	if m != nil && m.BuySkinId != nil {
		return *m.BuySkinId
	}
	return 0
}

type CMD_S_BUY_MONSTER_SKIN struct {
	Result           *int32  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	SkinId           *uint32 `protobuf:"varint,2,opt,name=skin_id,json=skinId" json:"skin_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_BUY_MONSTER_SKIN) Reset()                    { *m = CMD_S_BUY_MONSTER_SKIN{} }
func (m *CMD_S_BUY_MONSTER_SKIN) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_BUY_MONSTER_SKIN) ProtoMessage()               {}
func (*CMD_S_BUY_MONSTER_SKIN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{146} }

func (m *CMD_S_BUY_MONSTER_SKIN) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_S_BUY_MONSTER_SKIN) GetSkinId() uint32 {
	if m != nil && m.SkinId != nil {
		return *m.SkinId
	}
	return 0
}

type CMD_C_CHANGE_MONSTER_SKIN struct {
	SkinId           *uint32 `protobuf:"varint,1,opt,name=skin_id,json=skinId" json:"skin_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_CHANGE_MONSTER_SKIN) Reset()                    { *m = CMD_C_CHANGE_MONSTER_SKIN{} }
func (m *CMD_C_CHANGE_MONSTER_SKIN) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_CHANGE_MONSTER_SKIN) ProtoMessage()               {}
func (*CMD_C_CHANGE_MONSTER_SKIN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{147} }

func (m *CMD_C_CHANGE_MONSTER_SKIN) GetSkinId() uint32 {
	if m != nil && m.SkinId != nil {
		return *m.SkinId
	}
	return 0
}

type CMD_S_CHANGE_MONSTER_SKIN struct {
	Result           *int32  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	SkinId           *uint32 `protobuf:"varint,2,opt,name=skin_id,json=skinId" json:"skin_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_CHANGE_MONSTER_SKIN) Reset()                    { *m = CMD_S_CHANGE_MONSTER_SKIN{} }
func (m *CMD_S_CHANGE_MONSTER_SKIN) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CHANGE_MONSTER_SKIN) ProtoMessage()               {}
func (*CMD_S_CHANGE_MONSTER_SKIN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{148} }

func (m *CMD_S_CHANGE_MONSTER_SKIN) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_S_CHANGE_MONSTER_SKIN) GetSkinId() uint32 {
	if m != nil && m.SkinId != nil {
		return *m.SkinId
	}
	return 0
}

// 换皮肤广播
type CMD_S_BC_USER_CHANGE_MONSTER_SKIN struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChairId          *uint32 `protobuf:"varint,2,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	SkinId           *uint32 `protobuf:"varint,3,opt,name=skin_id,json=skinId" json:"skin_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_BC_USER_CHANGE_MONSTER_SKIN) Reset()         { *m = CMD_S_BC_USER_CHANGE_MONSTER_SKIN{} }
func (m *CMD_S_BC_USER_CHANGE_MONSTER_SKIN) String() string { return proto.CompactTextString(m) }
func (*CMD_S_BC_USER_CHANGE_MONSTER_SKIN) ProtoMessage()    {}
func (*CMD_S_BC_USER_CHANGE_MONSTER_SKIN) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{149}
}

func (m *CMD_S_BC_USER_CHANGE_MONSTER_SKIN) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_BC_USER_CHANGE_MONSTER_SKIN) GetChairId() uint32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

func (m *CMD_S_BC_USER_CHANGE_MONSTER_SKIN) GetSkinId() uint32 {
	if m != nil && m.SkinId != nil {
		return *m.SkinId
	}
	return 0
}

type TagUserMonsterSkinInfo struct {
	SkinId           *uint32 `protobuf:"varint,1,opt,name=skin_id,json=skinId" json:"skin_id,omitempty"`
	LifeTime         *uint64 `protobuf:"varint,2,opt,name=life_time,json=lifeTime" json:"life_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagUserMonsterSkinInfo) Reset()                    { *m = TagUserMonsterSkinInfo{} }
func (m *TagUserMonsterSkinInfo) String() string            { return proto.CompactTextString(m) }
func (*TagUserMonsterSkinInfo) ProtoMessage()               {}
func (*TagUserMonsterSkinInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{150} }

func (m *TagUserMonsterSkinInfo) GetSkinId() uint32 {
	if m != nil && m.SkinId != nil {
		return *m.SkinId
	}
	return 0
}

func (m *TagUserMonsterSkinInfo) GetLifeTime() uint64 {
	if m != nil && m.LifeTime != nil {
		return *m.LifeTime
	}
	return 0
}

type CMD_S_UserMonsterSkin struct {
	MonsterSkinInfo  []*TagUserMonsterSkinInfo `protobuf:"bytes,1,rep,name=monster_skin_info,json=monsterSkinInfo" json:"monster_skin_info,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMD_S_UserMonsterSkin) Reset()                    { *m = CMD_S_UserMonsterSkin{} }
func (m *CMD_S_UserMonsterSkin) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UserMonsterSkin) ProtoMessage()               {}
func (*CMD_S_UserMonsterSkin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{151} }

func (m *CMD_S_UserMonsterSkin) GetMonsterSkinInfo() []*TagUserMonsterSkinInfo {
	if m != nil {
		return m.MonsterSkinInfo
	}
	return nil
}

type CMD_S_UPDATE_SAVING_POT struct {
	CurScore         *uint32 `protobuf:"varint,1,opt,name=cur_score,json=curScore" json:"cur_score,omitempty"`
	CurState         *uint32 `protobuf:"varint,2,opt,name=cur_state,json=curState" json:"cur_state,omitempty"`
	LimitScore       *uint32 `protobuf:"varint,3,opt,name=limit_score,json=limitScore" json:"limit_score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_UPDATE_SAVING_POT) Reset()                    { *m = CMD_S_UPDATE_SAVING_POT{} }
func (m *CMD_S_UPDATE_SAVING_POT) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_UPDATE_SAVING_POT) ProtoMessage()               {}
func (*CMD_S_UPDATE_SAVING_POT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{152} }

func (m *CMD_S_UPDATE_SAVING_POT) GetCurScore() uint32 {
	if m != nil && m.CurScore != nil {
		return *m.CurScore
	}
	return 0
}

func (m *CMD_S_UPDATE_SAVING_POT) GetCurState() uint32 {
	if m != nil && m.CurState != nil {
		return *m.CurState
	}
	return 0
}

func (m *CMD_S_UPDATE_SAVING_POT) GetLimitScore() uint32 {
	if m != nil && m.LimitScore != nil {
		return *m.LimitScore
	}
	return 0
}

type CMD_S_PERSONAL_POOL_INFO struct {
	Personalpool     *uint64 `protobuf:"varint,1,opt,name=personalpool" json:"personalpool,omitempty"`
	Killnum          *uint32 `protobuf:"varint,2,opt,name=killnum" json:"killnum,omitempty"`
	Killmaxnum       *uint32 `protobuf:"varint,3,opt,name=killmaxnum" json:"killmaxnum,omitempty"`
	Lastreward       *uint64 `protobuf:"varint,4,opt,name=lastreward" json:"lastreward,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_PERSONAL_POOL_INFO) Reset()                    { *m = CMD_S_PERSONAL_POOL_INFO{} }
func (m *CMD_S_PERSONAL_POOL_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_PERSONAL_POOL_INFO) ProtoMessage()               {}
func (*CMD_S_PERSONAL_POOL_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{153} }

func (m *CMD_S_PERSONAL_POOL_INFO) GetPersonalpool() uint64 {
	if m != nil && m.Personalpool != nil {
		return *m.Personalpool
	}
	return 0
}

func (m *CMD_S_PERSONAL_POOL_INFO) GetKillnum() uint32 {
	if m != nil && m.Killnum != nil {
		return *m.Killnum
	}
	return 0
}

func (m *CMD_S_PERSONAL_POOL_INFO) GetKillmaxnum() uint32 {
	if m != nil && m.Killmaxnum != nil {
		return *m.Killmaxnum
	}
	return 0
}

func (m *CMD_S_PERSONAL_POOL_INFO) GetLastreward() uint64 {
	if m != nil && m.Lastreward != nil {
		return *m.Lastreward
	}
	return 0
}

type CMD_C_PERSONALPOOL_REWARD_REQ struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_PERSONALPOOL_REWARD_REQ) Reset()                    { *m = CMD_C_PERSONALPOOL_REWARD_REQ{} }
func (m *CMD_C_PERSONALPOOL_REWARD_REQ) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_PERSONALPOOL_REWARD_REQ) ProtoMessage()               {}
func (*CMD_C_PERSONALPOOL_REWARD_REQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{154} }

type CMD_S_PERSONAL_POOL_UPDATE struct {
	Personalpool     *uint32 `protobuf:"varint,1,opt,name=personalpool" json:"personalpool,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_PERSONAL_POOL_UPDATE) Reset()                    { *m = CMD_S_PERSONAL_POOL_UPDATE{} }
func (m *CMD_S_PERSONAL_POOL_UPDATE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_PERSONAL_POOL_UPDATE) ProtoMessage()               {}
func (*CMD_S_PERSONAL_POOL_UPDATE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{155} }

func (m *CMD_S_PERSONAL_POOL_UPDATE) GetPersonalpool() uint32 {
	if m != nil && m.Personalpool != nil {
		return *m.Personalpool
	}
	return 0
}

type CMD_S_PERSONAL_POOL_REWARD struct {
	Result           *uint32  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Score            *uint64  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Pool             *uint64  `protobuf:"varint,3,opt,name=pool" json:"pool,omitempty"`
	Baserate         *uint32  `protobuf:"varint,4,opt,name=baserate" json:"baserate,omitempty"`
	Secrate          *uint32  `protobuf:"varint,5,opt,name=secrate" json:"secrate,omitempty"`
	Ration           *uint32  `protobuf:"varint,6,opt,name=ration" json:"ration,omitempty"`
	ArrRation        []uint32 `protobuf:"varint,7,rep,name=arr_ration,json=arrRation" json:"arr_ration,omitempty"`
	MaxUpRate        *uint32  `protobuf:"varint,8,opt,name=max_up_rate,json=maxUpRate" json:"max_up_rate,omitempty"`
	MaxBaseRate      *uint32  `protobuf:"varint,9,opt,name=max_base_rate,json=maxBaseRate" json:"max_base_rate,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_S_PERSONAL_POOL_REWARD) Reset()                    { *m = CMD_S_PERSONAL_POOL_REWARD{} }
func (m *CMD_S_PERSONAL_POOL_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_PERSONAL_POOL_REWARD) ProtoMessage()               {}
func (*CMD_S_PERSONAL_POOL_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{156} }

func (m *CMD_S_PERSONAL_POOL_REWARD) GetResult() uint32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_S_PERSONAL_POOL_REWARD) GetScore() uint64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMD_S_PERSONAL_POOL_REWARD) GetPool() uint64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *CMD_S_PERSONAL_POOL_REWARD) GetBaserate() uint32 {
	if m != nil && m.Baserate != nil {
		return *m.Baserate
	}
	return 0
}

func (m *CMD_S_PERSONAL_POOL_REWARD) GetSecrate() uint32 {
	if m != nil && m.Secrate != nil {
		return *m.Secrate
	}
	return 0
}

func (m *CMD_S_PERSONAL_POOL_REWARD) GetRation() uint32 {
	if m != nil && m.Ration != nil {
		return *m.Ration
	}
	return 0
}

func (m *CMD_S_PERSONAL_POOL_REWARD) GetArrRation() []uint32 {
	if m != nil {
		return m.ArrRation
	}
	return nil
}

func (m *CMD_S_PERSONAL_POOL_REWARD) GetMaxUpRate() uint32 {
	if m != nil && m.MaxUpRate != nil {
		return *m.MaxUpRate
	}
	return 0
}

func (m *CMD_S_PERSONAL_POOL_REWARD) GetMaxBaseRate() uint32 {
	if m != nil && m.MaxBaseRate != nil {
		return *m.MaxBaseRate
	}
	return 0
}

// 同步金币/能量
type CMD_GR_S_SYNC_SCORE struct {
	Score            *uint64 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_GR_S_SYNC_SCORE) Reset()                    { *m = CMD_GR_S_SYNC_SCORE{} }
func (m *CMD_GR_S_SYNC_SCORE) String() string            { return proto.CompactTextString(m) }
func (*CMD_GR_S_SYNC_SCORE) ProtoMessage()               {}
func (*CMD_GR_S_SYNC_SCORE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{157} }

func (m *CMD_GR_S_SYNC_SCORE) GetScore() uint64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMD_GR_S_SYNC_SCORE) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 秘宝能量
type CMD_S_TREASURE_ENERGY struct {
	CurEnergyValue   *int32 `protobuf:"varint,1,opt,name=cur_energy_value,json=curEnergyValue" json:"cur_energy_value,omitempty"`
	MaxEnergyValue   *int32 `protobuf:"varint,2,opt,name=max_energy_value,json=maxEnergyValue" json:"max_energy_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_TREASURE_ENERGY) Reset()                    { *m = CMD_S_TREASURE_ENERGY{} }
func (m *CMD_S_TREASURE_ENERGY) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_TREASURE_ENERGY) ProtoMessage()               {}
func (*CMD_S_TREASURE_ENERGY) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{158} }

func (m *CMD_S_TREASURE_ENERGY) GetCurEnergyValue() int32 {
	if m != nil && m.CurEnergyValue != nil {
		return *m.CurEnergyValue
	}
	return 0
}

func (m *CMD_S_TREASURE_ENERGY) GetMaxEnergyValue() int32 {
	if m != nil && m.MaxEnergyValue != nil {
		return *m.MaxEnergyValue
	}
	return 0
}

// 秘宝奖励
type CMD_S_TREASURE_REWARD struct {
	RewardType       *int32 `protobuf:"varint,1,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	RewardEffect     *int32 `protobuf:"varint,2,opt,name=reward_effect,json=rewardEffect" json:"reward_effect,omitempty"`
	RewardIndex      *int32 `protobuf:"varint,3,opt,name=reward_index,json=rewardIndex" json:"reward_index,omitempty"`
	Score            *int64 `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	ChairId          *int32 `protobuf:"varint,5,opt,name=chair_id,json=chairId" json:"chair_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_TREASURE_REWARD) Reset()                    { *m = CMD_S_TREASURE_REWARD{} }
func (m *CMD_S_TREASURE_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_TREASURE_REWARD) ProtoMessage()               {}
func (*CMD_S_TREASURE_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{159} }

func (m *CMD_S_TREASURE_REWARD) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *CMD_S_TREASURE_REWARD) GetRewardEffect() int32 {
	if m != nil && m.RewardEffect != nil {
		return *m.RewardEffect
	}
	return 0
}

func (m *CMD_S_TREASURE_REWARD) GetRewardIndex() int32 {
	if m != nil && m.RewardIndex != nil {
		return *m.RewardIndex
	}
	return 0
}

func (m *CMD_S_TREASURE_REWARD) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMD_S_TREASURE_REWARD) GetChairId() int32 {
	if m != nil && m.ChairId != nil {
		return *m.ChairId
	}
	return 0
}

type CMD_C_CLEAR_FISH struct {
	EffecId          *int32 `protobuf:"varint,1,opt,name=effec_id,json=effecId" json:"effec_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_CLEAR_FISH) Reset()                    { *m = CMD_C_CLEAR_FISH{} }
func (m *CMD_C_CLEAR_FISH) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_CLEAR_FISH) ProtoMessage()               {}
func (*CMD_C_CLEAR_FISH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{160} }

func (m *CMD_C_CLEAR_FISH) GetEffecId() int32 {
	if m != nil && m.EffecId != nil {
		return *m.EffecId
	}
	return 0
}

// 世界BOSS放技能
type CMD_S_WORLD_BOSS_DO_SKILL struct {
	BossId           *uint32                                `protobuf:"varint,1,opt,name=bossId" json:"bossId,omitempty"`
	SkillId          *CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID `protobuf:"varint,2,opt,name=skill_id,json=skillId,enum=CMD.CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID" json:"skill_id,omitempty"`
	XXX_unrecognized []byte                                 `json:"-"`
}

func (m *CMD_S_WORLD_BOSS_DO_SKILL) Reset()                    { *m = CMD_S_WORLD_BOSS_DO_SKILL{} }
func (m *CMD_S_WORLD_BOSS_DO_SKILL) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_WORLD_BOSS_DO_SKILL) ProtoMessage()               {}
func (*CMD_S_WORLD_BOSS_DO_SKILL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{161} }

func (m *CMD_S_WORLD_BOSS_DO_SKILL) GetBossId() uint32 {
	if m != nil && m.BossId != nil {
		return *m.BossId
	}
	return 0
}

func (m *CMD_S_WORLD_BOSS_DO_SKILL) GetSkillId() CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return CMD_S_WORLD_BOSS_DO_SKILL_BSID_CALL
}

// BOSS技能对玩家的影响效果
type TagSkillEffect struct {
	Chair            *uint32 `protobuf:"varint,1,opt,name=chair" json:"chair,omitempty"`
	Effect           *uint32 `protobuf:"varint,2,opt,name=effect" json:"effect,omitempty"`
	Effective        *bool   `protobuf:"varint,3,opt,name=effective" json:"effective,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagSkillEffect) Reset()                    { *m = TagSkillEffect{} }
func (m *TagSkillEffect) String() string            { return proto.CompactTextString(m) }
func (*TagSkillEffect) ProtoMessage()               {}
func (*TagSkillEffect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{162} }

func (m *TagSkillEffect) GetChair() uint32 {
	if m != nil && m.Chair != nil {
		return *m.Chair
	}
	return 0
}

func (m *TagSkillEffect) GetEffect() uint32 {
	if m != nil && m.Effect != nil {
		return *m.Effect
	}
	return 0
}

func (m *TagSkillEffect) GetEffective() bool {
	if m != nil && m.Effective != nil {
		return *m.Effective
	}
	return false
}

type CMD_S_SKILL_EFFECT struct {
	BossId           *uint32                                `protobuf:"varint,1,opt,name=bossId" json:"bossId,omitempty"`
	Skill            *CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID `protobuf:"varint,2,opt,name=skill,enum=CMD.CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID" json:"skill,omitempty"`
	Effects          []*TagSkillEffect                      `protobuf:"bytes,3,rep,name=effects" json:"effects,omitempty"`
	XXX_unrecognized []byte                                 `json:"-"`
}

func (m *CMD_S_SKILL_EFFECT) Reset()                    { *m = CMD_S_SKILL_EFFECT{} }
func (m *CMD_S_SKILL_EFFECT) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SKILL_EFFECT) ProtoMessage()               {}
func (*CMD_S_SKILL_EFFECT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{163} }

func (m *CMD_S_SKILL_EFFECT) GetBossId() uint32 {
	if m != nil && m.BossId != nil {
		return *m.BossId
	}
	return 0
}

func (m *CMD_S_SKILL_EFFECT) GetSkill() CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID {
	if m != nil && m.Skill != nil {
		return *m.Skill
	}
	return CMD_S_WORLD_BOSS_DO_SKILL_BSID_CALL
}

func (m *CMD_S_SKILL_EFFECT) GetEffects() []*TagSkillEffect {
	if m != nil {
		return m.Effects
	}
	return nil
}

// 护盾值更新
type CMD_S_PSEIDON_SHIELD_VALUE struct {
	BossId           *uint32                                  `protobuf:"varint,1,opt,name=bossId" json:"bossId,omitempty"`
	Value            *uint32                                  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Reason           *CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason `protobuf:"varint,3,opt,name=reason,enum=CMD.CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason" json:"reason,omitempty"`
	XXX_unrecognized []byte                                   `json:"-"`
}

func (m *CMD_S_PSEIDON_SHIELD_VALUE) Reset()                    { *m = CMD_S_PSEIDON_SHIELD_VALUE{} }
func (m *CMD_S_PSEIDON_SHIELD_VALUE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_PSEIDON_SHIELD_VALUE) ProtoMessage()               {}
func (*CMD_S_PSEIDON_SHIELD_VALUE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{164} }

func (m *CMD_S_PSEIDON_SHIELD_VALUE) GetBossId() uint32 {
	if m != nil && m.BossId != nil {
		return *m.BossId
	}
	return 0
}

func (m *CMD_S_PSEIDON_SHIELD_VALUE) GetValue() uint32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *CMD_S_PSEIDON_SHIELD_VALUE) GetReason() CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return CMD_S_PSEIDON_SHIELD_VALUE_UR_CREATE
}

// 弱点暴露位置
type CMD_S_PSEIDON_WEAKNESS struct {
	BossId           *uint32  `protobuf:"varint,1,opt,name=bossId" json:"bossId,omitempty"`
	Weaknesses       []uint32 `protobuf:"varint,2,rep,name=weaknesses" json:"weaknesses,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMD_S_PSEIDON_WEAKNESS) Reset()                    { *m = CMD_S_PSEIDON_WEAKNESS{} }
func (m *CMD_S_PSEIDON_WEAKNESS) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_PSEIDON_WEAKNESS) ProtoMessage()               {}
func (*CMD_S_PSEIDON_WEAKNESS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{165} }

func (m *CMD_S_PSEIDON_WEAKNESS) GetBossId() uint32 {
	if m != nil && m.BossId != nil {
		return *m.BossId
	}
	return 0
}

func (m *CMD_S_PSEIDON_WEAKNESS) GetWeaknesses() []uint32 {
	if m != nil {
		return m.Weaknesses
	}
	return nil
}

// 打爆弱点
type CMD_S_WEAKNESS_EXPLODE struct {
	BossId           *uint32 `protobuf:"varint,1,opt,name=bossId" json:"bossId,omitempty"`
	Weakness         *uint32 `protobuf:"varint,2,opt,name=weakness" json:"weakness,omitempty"`
	Score            *uint32 `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_WEAKNESS_EXPLODE) Reset()                    { *m = CMD_S_WEAKNESS_EXPLODE{} }
func (m *CMD_S_WEAKNESS_EXPLODE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_WEAKNESS_EXPLODE) ProtoMessage()               {}
func (*CMD_S_WEAKNESS_EXPLODE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{166} }

func (m *CMD_S_WEAKNESS_EXPLODE) GetBossId() uint32 {
	if m != nil && m.BossId != nil {
		return *m.BossId
	}
	return 0
}

func (m *CMD_S_WEAKNESS_EXPLODE) GetWeakness() uint32 {
	if m != nil && m.Weakness != nil {
		return *m.Weakness
	}
	return 0
}

func (m *CMD_S_WEAKNESS_EXPLODE) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 修复炮台
type CMD_C_CANNON_REPAIR struct {
	ClickTimes       *uint32 `protobuf:"varint,1,opt,name=click_times,json=clickTimes" json:"click_times,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_CANNON_REPAIR) Reset()                    { *m = CMD_C_CANNON_REPAIR{} }
func (m *CMD_C_CANNON_REPAIR) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_CANNON_REPAIR) ProtoMessage()               {}
func (*CMD_C_CANNON_REPAIR) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{167} }

func (m *CMD_C_CANNON_REPAIR) GetClickTimes() uint32 {
	if m != nil && m.ClickTimes != nil {
		return *m.ClickTimes
	}
	return 0
}

type CMD_S_CANNON_REPAIR struct {
	Chair            *uint32 `protobuf:"varint,1,opt,name=chair" json:"chair,omitempty"`
	RepairTime       *uint32 `protobuf:"varint,2,opt,name=repair_time,json=repairTime" json:"repair_time,omitempty"`
	InitTime         *uint32 `protobuf:"varint,3,opt,name=init_time,json=initTime" json:"init_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_CANNON_REPAIR) Reset()                    { *m = CMD_S_CANNON_REPAIR{} }
func (m *CMD_S_CANNON_REPAIR) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CANNON_REPAIR) ProtoMessage()               {}
func (*CMD_S_CANNON_REPAIR) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{168} }

func (m *CMD_S_CANNON_REPAIR) GetChair() uint32 {
	if m != nil && m.Chair != nil {
		return *m.Chair
	}
	return 0
}

func (m *CMD_S_CANNON_REPAIR) GetRepairTime() uint32 {
	if m != nil && m.RepairTime != nil {
		return *m.RepairTime
	}
	return 0
}

func (m *CMD_S_CANNON_REPAIR) GetInitTime() uint32 {
	if m != nil && m.InitTime != nil {
		return *m.InitTime
	}
	return 0
}

// 虚弱状态结束:所有弱点消失
type CMD_S_WEAK_STATUS_END struct {
	BossId           *uint32 `protobuf:"varint,1,opt,name=bossId" json:"bossId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_WEAK_STATUS_END) Reset()                    { *m = CMD_S_WEAK_STATUS_END{} }
func (m *CMD_S_WEAK_STATUS_END) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_WEAK_STATUS_END) ProtoMessage()               {}
func (*CMD_S_WEAK_STATUS_END) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{169} }

func (m *CMD_S_WEAK_STATUS_END) GetBossId() uint32 {
	if m != nil && m.BossId != nil {
		return *m.BossId
	}
	return 0
}

// 玩家技能
type CMD_S_PLAYER_SKILL_EFFECT struct {
	Skill            *uint32           `protobuf:"varint,1,opt,name=skill" json:"skill,omitempty"`
	Effects          []*TagSkillEffect `protobuf:"bytes,2,rep,name=effects" json:"effects,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CMD_S_PLAYER_SKILL_EFFECT) Reset()                    { *m = CMD_S_PLAYER_SKILL_EFFECT{} }
func (m *CMD_S_PLAYER_SKILL_EFFECT) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_PLAYER_SKILL_EFFECT) ProtoMessage()               {}
func (*CMD_S_PLAYER_SKILL_EFFECT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{170} }

func (m *CMD_S_PLAYER_SKILL_EFFECT) GetSkill() uint32 {
	if m != nil && m.Skill != nil {
		return *m.Skill
	}
	return 0
}

func (m *CMD_S_PLAYER_SKILL_EFFECT) GetEffects() []*TagSkillEffect {
	if m != nil {
		return m.Effects
	}
	return nil
}

// 玩家技能状态
type TagSkillStatus struct {
	Type             *TagSkillStatus_SkillEffectType `protobuf:"varint,1,opt,name=type,enum=CMD.TagSkillStatus_SkillEffectType" json:"type,omitempty"`
	Current          *uint32                         `protobuf:"varint,2,opt,name=current" json:"current,omitempty"`
	Maximum          *uint32                         `protobuf:"varint,3,opt,name=maximum" json:"maximum,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *TagSkillStatus) Reset()                    { *m = TagSkillStatus{} }
func (m *TagSkillStatus) String() string            { return proto.CompactTextString(m) }
func (*TagSkillStatus) ProtoMessage()               {}
func (*TagSkillStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{171} }

func (m *TagSkillStatus) GetType() TagSkillStatus_SkillEffectType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return TagSkillStatus_SET_NULL
}

func (m *TagSkillStatus) GetCurrent() uint32 {
	if m != nil && m.Current != nil {
		return *m.Current
	}
	return 0
}

func (m *TagSkillStatus) GetMaximum() uint32 {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return 0
}

type TagPlayerSkillStatus struct {
	Chair            *uint32           `protobuf:"varint,1,opt,name=chair" json:"chair,omitempty"`
	Status           []*TagSkillStatus `protobuf:"bytes,2,rep,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *TagPlayerSkillStatus) Reset()                    { *m = TagPlayerSkillStatus{} }
func (m *TagPlayerSkillStatus) String() string            { return proto.CompactTextString(m) }
func (*TagPlayerSkillStatus) ProtoMessage()               {}
func (*TagPlayerSkillStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{172} }

func (m *TagPlayerSkillStatus) GetChair() uint32 {
	if m != nil && m.Chair != nil {
		return *m.Chair
	}
	return 0
}

func (m *TagPlayerSkillStatus) GetStatus() []*TagSkillStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type CMD_S_PLAYER_SKILL_STATUS struct {
	Status           []*TagPlayerSkillStatus `protobuf:"bytes,1,rep,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *CMD_S_PLAYER_SKILL_STATUS) Reset()                    { *m = CMD_S_PLAYER_SKILL_STATUS{} }
func (m *CMD_S_PLAYER_SKILL_STATUS) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_PLAYER_SKILL_STATUS) ProtoMessage()               {}
func (*CMD_S_PLAYER_SKILL_STATUS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{173} }

func (m *CMD_S_PLAYER_SKILL_STATUS) GetStatus() []*TagPlayerSkillStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// 请求同步状态
type CMD_C_SYNC_USER_STATE struct {
	SateType         *uint32 `protobuf:"varint,1,opt,name=sate_type,json=sateType" json:"sate_type,omitempty"`
	StateResult      *uint32 `protobuf:"varint,2,opt,name=state_result,json=stateResult" json:"state_result,omitempty"`
	Reward           []byte  `protobuf:"bytes,3,opt,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_SYNC_USER_STATE) Reset()                    { *m = CMD_C_SYNC_USER_STATE{} }
func (m *CMD_C_SYNC_USER_STATE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_SYNC_USER_STATE) ProtoMessage()               {}
func (*CMD_C_SYNC_USER_STATE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{174} }

func (m *CMD_C_SYNC_USER_STATE) GetSateType() uint32 {
	if m != nil && m.SateType != nil {
		return *m.SateType
	}
	return 0
}

func (m *CMD_C_SYNC_USER_STATE) GetStateResult() uint32 {
	if m != nil && m.StateResult != nil {
		return *m.StateResult
	}
	return 0
}

func (m *CMD_C_SYNC_USER_STATE) GetReward() []byte {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 请求同步状态返回
type CMD_S_SYNC_USER_STATE struct {
	Type             *CMD_S_SYNC_USER_STATE_StateType `protobuf:"varint,1,opt,name=type,enum=CMD.CMD_S_SYNC_USER_STATE_StateType" json:"type,omitempty"`
	Chair            *uint32                          `protobuf:"varint,2,opt,name=chair" json:"chair,omitempty"`
	StateResult      *uint32                          `protobuf:"varint,3,opt,name=state_result,json=stateResult" json:"state_result,omitempty"`
	FishId           *uint32                          `protobuf:"varint,4,opt,name=fish_id,json=fishId" json:"fish_id,omitempty"`
	Reward           []byte                           `protobuf:"bytes,5,opt,name=reward" json:"reward,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *CMD_S_SYNC_USER_STATE) Reset()                    { *m = CMD_S_SYNC_USER_STATE{} }
func (m *CMD_S_SYNC_USER_STATE) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SYNC_USER_STATE) ProtoMessage()               {}
func (*CMD_S_SYNC_USER_STATE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{175} }

func (m *CMD_S_SYNC_USER_STATE) GetType() CMD_S_SYNC_USER_STATE_StateType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CMD_S_SYNC_USER_STATE_State_TREE
}

func (m *CMD_S_SYNC_USER_STATE) GetChair() uint32 {
	if m != nil && m.Chair != nil {
		return *m.Chair
	}
	return 0
}

func (m *CMD_S_SYNC_USER_STATE) GetStateResult() uint32 {
	if m != nil && m.StateResult != nil {
		return *m.StateResult
	}
	return 0
}

func (m *CMD_S_SYNC_USER_STATE) GetFishId() uint32 {
	if m != nil && m.FishId != nil {
		return *m.FishId
	}
	return 0
}

func (m *CMD_S_SYNC_USER_STATE) GetReward() []byte {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 触发用户提示返回
type CMD_S_TRIGER_USER_TIPS struct {
	Type             *CMD_S_TRIGER_USER_TIPS_TipsType `protobuf:"varint,1,opt,name=type,enum=CMD.CMD_S_TRIGER_USER_TIPS_TipsType" json:"type,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *CMD_S_TRIGER_USER_TIPS) Reset()                    { *m = CMD_S_TRIGER_USER_TIPS{} }
func (m *CMD_S_TRIGER_USER_TIPS) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_TRIGER_USER_TIPS) ProtoMessage()               {}
func (*CMD_S_TRIGER_USER_TIPS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{176} }

func (m *CMD_S_TRIGER_USER_TIPS) GetType() CMD_S_TRIGER_USER_TIPS_TipsType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CMD_S_TRIGER_USER_TIPS_Tips_LOCK
}

// 妖精场切换皮肤提升倍数
type CMD_C_CHANGE_MAONSTER_MULTIPLE struct {
	Multiple         *uint32 `protobuf:"varint,1,opt,name=multiple" json:"multiple,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_CHANGE_MAONSTER_MULTIPLE) Reset()         { *m = CMD_C_CHANGE_MAONSTER_MULTIPLE{} }
func (m *CMD_C_CHANGE_MAONSTER_MULTIPLE) String() string { return proto.CompactTextString(m) }
func (*CMD_C_CHANGE_MAONSTER_MULTIPLE) ProtoMessage()    {}
func (*CMD_C_CHANGE_MAONSTER_MULTIPLE) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{177}
}

func (m *CMD_C_CHANGE_MAONSTER_MULTIPLE) GetMultiple() uint32 {
	if m != nil && m.Multiple != nil {
		return *m.Multiple
	}
	return 0
}

// 妖精场切换皮肤提升倍数
type CMD_S_CHANGE_MAONSTER_MULTIPLE struct {
	Result           *CMD_S_CHANGE_MAONSTER_MULTIPLE_Result `protobuf:"varint,1,opt,name=result,enum=CMD.CMD_S_CHANGE_MAONSTER_MULTIPLE_Result" json:"result,omitempty"`
	Multiple         *uint32                                `protobuf:"varint,2,opt,name=multiple" json:"multiple,omitempty"`
	Chair            *uint32                                `protobuf:"varint,3,opt,name=chair" json:"chair,omitempty"`
	XXX_unrecognized []byte                                 `json:"-"`
}

func (m *CMD_S_CHANGE_MAONSTER_MULTIPLE) Reset()         { *m = CMD_S_CHANGE_MAONSTER_MULTIPLE{} }
func (m *CMD_S_CHANGE_MAONSTER_MULTIPLE) String() string { return proto.CompactTextString(m) }
func (*CMD_S_CHANGE_MAONSTER_MULTIPLE) ProtoMessage()    {}
func (*CMD_S_CHANGE_MAONSTER_MULTIPLE) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{178}
}

func (m *CMD_S_CHANGE_MAONSTER_MULTIPLE) GetResult() CMD_S_CHANGE_MAONSTER_MULTIPLE_Result {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return CMD_S_CHANGE_MAONSTER_MULTIPLE_Successful
}

func (m *CMD_S_CHANGE_MAONSTER_MULTIPLE) GetMultiple() uint32 {
	if m != nil && m.Multiple != nil {
		return *m.Multiple
	}
	return 0
}

func (m *CMD_S_CHANGE_MAONSTER_MULTIPLE) GetChair() uint32 {
	if m != nil && m.Chair != nil {
		return *m.Chair
	}
	return 0
}

// 开始冒险
type CMD_C_START_ADVENTURE struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_START_ADVENTURE) Reset()                    { *m = CMD_C_START_ADVENTURE{} }
func (m *CMD_C_START_ADVENTURE) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_START_ADVENTURE) ProtoMessage()               {}
func (*CMD_C_START_ADVENTURE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{179} }

// 波次信息
type CMD_S_WHEEL_INFO struct {
	CurWheel         *uint32 `protobuf:"varint,1,opt,name=cur_wheel,json=curWheel" json:"cur_wheel,omitempty"`
	MaxWheel         *uint32 `protobuf:"varint,2,opt,name=max_wheel,json=maxWheel" json:"max_wheel,omitempty"`
	CountDown        *uint32 `protobuf:"varint,3,opt,name=count_down,json=countDown" json:"count_down,omitempty"`
	CurFish          *uint32 `protobuf:"varint,4,opt,name=cur_fish,json=curFish" json:"cur_fish,omitempty"`
	MaxFish          *uint32 `protobuf:"varint,5,opt,name=max_fish,json=maxFish" json:"max_fish,omitempty"`
	BIsSummon        *bool   `protobuf:"varint,6,opt,name=bIsSummon" json:"bIsSummon,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_WHEEL_INFO) Reset()                    { *m = CMD_S_WHEEL_INFO{} }
func (m *CMD_S_WHEEL_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_WHEEL_INFO) ProtoMessage()               {}
func (*CMD_S_WHEEL_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{180} }

func (m *CMD_S_WHEEL_INFO) GetCurWheel() uint32 {
	if m != nil && m.CurWheel != nil {
		return *m.CurWheel
	}
	return 0
}

func (m *CMD_S_WHEEL_INFO) GetMaxWheel() uint32 {
	if m != nil && m.MaxWheel != nil {
		return *m.MaxWheel
	}
	return 0
}

func (m *CMD_S_WHEEL_INFO) GetCountDown() uint32 {
	if m != nil && m.CountDown != nil {
		return *m.CountDown
	}
	return 0
}

func (m *CMD_S_WHEEL_INFO) GetCurFish() uint32 {
	if m != nil && m.CurFish != nil {
		return *m.CurFish
	}
	return 0
}

func (m *CMD_S_WHEEL_INFO) GetMaxFish() uint32 {
	if m != nil && m.MaxFish != nil {
		return *m.MaxFish
	}
	return 0
}

func (m *CMD_S_WHEEL_INFO) GetBIsSummon() bool {
	if m != nil && m.BIsSummon != nil {
		return *m.BIsSummon
	}
	return false
}

// 预言下注
type CMD_C_PREDICTION_CHIP struct {
	FishId           *uint32 `protobuf:"varint,1,opt,name=fish_id,json=fishId" json:"fish_id,omitempty"`
	AddChip          *uint32 `protobuf:"varint,2,opt,name=add_chip,json=addChip" json:"add_chip,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_PREDICTION_CHIP) Reset()                    { *m = CMD_C_PREDICTION_CHIP{} }
func (m *CMD_C_PREDICTION_CHIP) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_PREDICTION_CHIP) ProtoMessage()               {}
func (*CMD_C_PREDICTION_CHIP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{181} }

func (m *CMD_C_PREDICTION_CHIP) GetFishId() uint32 {
	if m != nil && m.FishId != nil {
		return *m.FishId
	}
	return 0
}

func (m *CMD_C_PREDICTION_CHIP) GetAddChip() uint32 {
	if m != nil && m.AddChip != nil {
		return *m.AddChip
	}
	return 0
}

// 预言信息
type CMD_S_PREDICTION_INFO struct {
	FishId           *uint32                       `protobuf:"varint,1,opt,name=fish_id,json=fishId" json:"fish_id,omitempty"`
	Chip             *uint32                       `protobuf:"varint,2,opt,name=chip" json:"chip,omitempty"`
	WinScore         *int32                        `protobuf:"varint,3,opt,name=win_score,json=winScore" json:"win_score,omitempty"`
	Result           *CMD_S_PREDICTION_INFO_Result `protobuf:"varint,4,opt,name=result,enum=CMD.CMD_S_PREDICTION_INFO_Result" json:"result,omitempty"`
	AddChip          *uint32                       `protobuf:"varint,5,opt,name=add_chip,json=addChip" json:"add_chip,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *CMD_S_PREDICTION_INFO) Reset()                    { *m = CMD_S_PREDICTION_INFO{} }
func (m *CMD_S_PREDICTION_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_PREDICTION_INFO) ProtoMessage()               {}
func (*CMD_S_PREDICTION_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{182} }

func (m *CMD_S_PREDICTION_INFO) GetFishId() uint32 {
	if m != nil && m.FishId != nil {
		return *m.FishId
	}
	return 0
}

func (m *CMD_S_PREDICTION_INFO) GetChip() uint32 {
	if m != nil && m.Chip != nil {
		return *m.Chip
	}
	return 0
}

func (m *CMD_S_PREDICTION_INFO) GetWinScore() int32 {
	if m != nil && m.WinScore != nil {
		return *m.WinScore
	}
	return 0
}

func (m *CMD_S_PREDICTION_INFO) GetResult() CMD_S_PREDICTION_INFO_Result {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return CMD_S_PREDICTION_INFO_Success
}

func (m *CMD_S_PREDICTION_INFO) GetAddChip() uint32 {
	if m != nil && m.AddChip != nil {
		return *m.AddChip
	}
	return 0
}

// boss相关数值
type CMD_S_BOSS_DATA struct {
	CurEnergy        *uint32 `protobuf:"varint,1,opt,name=cur_energy,json=curEnergy" json:"cur_energy,omitempty"`
	MaxEnergy        *uint32 `protobuf:"varint,2,opt,name=max_energy,json=maxEnergy" json:"max_energy,omitempty"`
	CurRage          *uint32 `protobuf:"varint,3,opt,name=cur_rage,json=curRage" json:"cur_rage,omitempty"`
	MaxRage          *uint32 `protobuf:"varint,4,opt,name=max_rage,json=maxRage" json:"max_rage,omitempty"`
	ScoreBox         *uint32 `protobuf:"varint,5,opt,name=score_box,json=scoreBox" json:"score_box,omitempty"`
	IsFury           *uint32 `protobuf:"varint,6,opt,name=is_fury,json=isFury" json:"is_fury,omitempty"`
	IsSupper         *uint32 `protobuf:"varint,7,opt,name=is_supper,json=isSupper" json:"is_supper,omitempty"`
	FishKind         *uint32 `protobuf:"varint,8,opt,name=fish_kind,json=fishKind" json:"fish_kind,omitempty"`
	FishUid          *uint32 `protobuf:"varint,9,opt,name=fish_uid,json=fishUid" json:"fish_uid,omitempty"`
	ConsumeEnergy    *uint32 `protobuf:"varint,10,opt,name=consume_energy,json=consumeEnergy" json:"consume_energy,omitempty"`
	AddRage          *uint32 `protobuf:"varint,11,opt,name=add_rage,json=addRage" json:"add_rage,omitempty"`
	AddScoreBox      *uint32 `protobuf:"varint,12,opt,name=add_score_box,json=addScoreBox" json:"add_score_box,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_BOSS_DATA) Reset()                    { *m = CMD_S_BOSS_DATA{} }
func (m *CMD_S_BOSS_DATA) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_BOSS_DATA) ProtoMessage()               {}
func (*CMD_S_BOSS_DATA) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{183} }

func (m *CMD_S_BOSS_DATA) GetCurEnergy() uint32 {
	if m != nil && m.CurEnergy != nil {
		return *m.CurEnergy
	}
	return 0
}

func (m *CMD_S_BOSS_DATA) GetMaxEnergy() uint32 {
	if m != nil && m.MaxEnergy != nil {
		return *m.MaxEnergy
	}
	return 0
}

func (m *CMD_S_BOSS_DATA) GetCurRage() uint32 {
	if m != nil && m.CurRage != nil {
		return *m.CurRage
	}
	return 0
}

func (m *CMD_S_BOSS_DATA) GetMaxRage() uint32 {
	if m != nil && m.MaxRage != nil {
		return *m.MaxRage
	}
	return 0
}

func (m *CMD_S_BOSS_DATA) GetScoreBox() uint32 {
	if m != nil && m.ScoreBox != nil {
		return *m.ScoreBox
	}
	return 0
}

func (m *CMD_S_BOSS_DATA) GetIsFury() uint32 {
	if m != nil && m.IsFury != nil {
		return *m.IsFury
	}
	return 0
}

func (m *CMD_S_BOSS_DATA) GetIsSupper() uint32 {
	if m != nil && m.IsSupper != nil {
		return *m.IsSupper
	}
	return 0
}

func (m *CMD_S_BOSS_DATA) GetFishKind() uint32 {
	if m != nil && m.FishKind != nil {
		return *m.FishKind
	}
	return 0
}

func (m *CMD_S_BOSS_DATA) GetFishUid() uint32 {
	if m != nil && m.FishUid != nil {
		return *m.FishUid
	}
	return 0
}

func (m *CMD_S_BOSS_DATA) GetConsumeEnergy() uint32 {
	if m != nil && m.ConsumeEnergy != nil {
		return *m.ConsumeEnergy
	}
	return 0
}

func (m *CMD_S_BOSS_DATA) GetAddRage() uint32 {
	if m != nil && m.AddRage != nil {
		return *m.AddRage
	}
	return 0
}

func (m *CMD_S_BOSS_DATA) GetAddScoreBox() uint32 {
	if m != nil && m.AddScoreBox != nil {
		return *m.AddScoreBox
	}
	return 0
}

type CMD_S_BossSkillStatus struct {
	Status           *CMD_S_BossSkillStatus_BossSkillStatus `protobuf:"varint,1,opt,name=Status,enum=CMD.CMD_S_BossSkillStatus_BossSkillStatus" json:"Status,omitempty"`
	BossID           *int32                                 `protobuf:"varint,2,opt,name=BossID" json:"BossID,omitempty"`
	XXX_unrecognized []byte                                 `json:"-"`
}

func (m *CMD_S_BossSkillStatus) Reset()                    { *m = CMD_S_BossSkillStatus{} }
func (m *CMD_S_BossSkillStatus) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_BossSkillStatus) ProtoMessage()               {}
func (*CMD_S_BossSkillStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{184} }

func (m *CMD_S_BossSkillStatus) GetStatus() CMD_S_BossSkillStatus_BossSkillStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return CMD_S_BossSkillStatus_SkillStatus_Idel
}

func (m *CMD_S_BossSkillStatus) GetBossID() int32 {
	if m != nil && m.BossID != nil {
		return *m.BossID
	}
	return 0
}

// 道具
type TagGameItemInfo struct {
	ItemId           *uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemNum          *uint32 `protobuf:"varint,2,opt,name=item_num,json=itemNum" json:"item_num,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagGameItemInfo) Reset()                    { *m = TagGameItemInfo{} }
func (m *TagGameItemInfo) String() string            { return proto.CompactTextString(m) }
func (*TagGameItemInfo) ProtoMessage()               {}
func (*TagGameItemInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{185} }

func (m *TagGameItemInfo) GetItemId() uint32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *TagGameItemInfo) GetItemNum() uint32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

type CMD_S_SelectCard struct {
	CommonCardNum    *uint32          `protobuf:"varint,1,opt,name=CommonCardNum" json:"CommonCardNum,omitempty"`
	SuperCardNum     *uint32          `protobuf:"varint,2,opt,name=SuperCardNum" json:"SuperCardNum,omitempty"`
	ConsumeItem      *TagGameItemInfo `protobuf:"bytes,3,opt,name=ConsumeItem" json:"ConsumeItem,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_S_SelectCard) Reset()                    { *m = CMD_S_SelectCard{} }
func (m *CMD_S_SelectCard) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SelectCard) ProtoMessage()               {}
func (*CMD_S_SelectCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{186} }

func (m *CMD_S_SelectCard) GetCommonCardNum() uint32 {
	if m != nil && m.CommonCardNum != nil {
		return *m.CommonCardNum
	}
	return 0
}

func (m *CMD_S_SelectCard) GetSuperCardNum() uint32 {
	if m != nil && m.SuperCardNum != nil {
		return *m.SuperCardNum
	}
	return 0
}

func (m *CMD_S_SelectCard) GetConsumeItem() *TagGameItemInfo {
	if m != nil {
		return m.ConsumeItem
	}
	return nil
}

type CMD_C_SelectCard struct {
	CardType         *CMD_C_SelectCard_SelectCardType `protobuf:"varint,1,opt,name=CardType,enum=CMD.CMD_C_SelectCard_SelectCardType" json:"CardType,omitempty"`
	IsEndSelectCard  *bool                            `protobuf:"varint,2,opt,name=IsEndSelectCard" json:"IsEndSelectCard,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *CMD_C_SelectCard) Reset()                    { *m = CMD_C_SelectCard{} }
func (m *CMD_C_SelectCard) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_SelectCard) ProtoMessage()               {}
func (*CMD_C_SelectCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{187} }

func (m *CMD_C_SelectCard) GetCardType() CMD_C_SelectCard_SelectCardType {
	if m != nil && m.CardType != nil {
		return *m.CardType
	}
	return CMD_C_SelectCard_CommonCard
}

func (m *CMD_C_SelectCard) GetIsEndSelectCard() bool {
	if m != nil && m.IsEndSelectCard != nil {
		return *m.IsEndSelectCard
	}
	return false
}

type CMD_S_SelectCardAward struct {
	CommonCardNum    *uint32          `protobuf:"varint,1,opt,name=CommonCardNum" json:"CommonCardNum,omitempty"`
	SuperCardNum     *uint32          `protobuf:"varint,2,opt,name=SuperCardNum" json:"SuperCardNum,omitempty"`
	AwardItem        *TagGameItemInfo `protobuf:"bytes,3,opt,name=AwardItem" json:"AwardItem,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_S_SelectCardAward) Reset()                    { *m = CMD_S_SelectCardAward{} }
func (m *CMD_S_SelectCardAward) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SelectCardAward) ProtoMessage()               {}
func (*CMD_S_SelectCardAward) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{188} }

func (m *CMD_S_SelectCardAward) GetCommonCardNum() uint32 {
	if m != nil && m.CommonCardNum != nil {
		return *m.CommonCardNum
	}
	return 0
}

func (m *CMD_S_SelectCardAward) GetSuperCardNum() uint32 {
	if m != nil && m.SuperCardNum != nil {
		return *m.SuperCardNum
	}
	return 0
}

func (m *CMD_S_SelectCardAward) GetAwardItem() *TagGameItemInfo {
	if m != nil {
		return m.AwardItem
	}
	return nil
}

type CMD_S_SelectCardEnd struct {
	CommonCardNum       *uint32            `protobuf:"varint,1,opt,name=CommonCardNum" json:"CommonCardNum,omitempty"`
	SuperCardNum        *uint32            `protobuf:"varint,2,opt,name=SuperCardNum" json:"SuperCardNum,omitempty"`
	CommonAwardItemList []*TagGameItemInfo `protobuf:"bytes,3,rep,name=CommonAwardItemList" json:"CommonAwardItemList,omitempty"`
	SuperAwardItemList  []*TagGameItemInfo `protobuf:"bytes,4,rep,name=SuperAwardItemList" json:"SuperAwardItemList,omitempty"`
	XXX_unrecognized    []byte             `json:"-"`
}

func (m *CMD_S_SelectCardEnd) Reset()                    { *m = CMD_S_SelectCardEnd{} }
func (m *CMD_S_SelectCardEnd) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SelectCardEnd) ProtoMessage()               {}
func (*CMD_S_SelectCardEnd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{189} }

func (m *CMD_S_SelectCardEnd) GetCommonCardNum() uint32 {
	if m != nil && m.CommonCardNum != nil {
		return *m.CommonCardNum
	}
	return 0
}

func (m *CMD_S_SelectCardEnd) GetSuperCardNum() uint32 {
	if m != nil && m.SuperCardNum != nil {
		return *m.SuperCardNum
	}
	return 0
}

func (m *CMD_S_SelectCardEnd) GetCommonAwardItemList() []*TagGameItemInfo {
	if m != nil {
		return m.CommonAwardItemList
	}
	return nil
}

func (m *CMD_S_SelectCardEnd) GetSuperAwardItemList() []*TagGameItemInfo {
	if m != nil {
		return m.SuperAwardItemList
	}
	return nil
}

// 通知结算
type CMD_C_EndGame struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_EndGame) Reset()                    { *m = CMD_C_EndGame{} }
func (m *CMD_C_EndGame) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_EndGame) ProtoMessage()               {}
func (*CMD_C_EndGame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{190} }

type CMD_S_ClosAnAccount struct {
	ItemList         []*TagGameItemInfo `protobuf:"bytes,1,rep,name=ItemList" json:"ItemList,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CMD_S_ClosAnAccount) Reset()                    { *m = CMD_S_ClosAnAccount{} }
func (m *CMD_S_ClosAnAccount) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_ClosAnAccount) ProtoMessage()               {}
func (*CMD_S_ClosAnAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{191} }

func (m *CMD_S_ClosAnAccount) GetItemList() []*TagGameItemInfo {
	if m != nil {
		return m.ItemList
	}
	return nil
}

type CMD_S_GameEndLeadTime struct {
	LeadTime         *uint64 `protobuf:"varint,1,opt,name=LeadTime" json:"LeadTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_GameEndLeadTime) Reset()                    { *m = CMD_S_GameEndLeadTime{} }
func (m *CMD_S_GameEndLeadTime) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GameEndLeadTime) ProtoMessage()               {}
func (*CMD_S_GameEndLeadTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{192} }

func (m *CMD_S_GameEndLeadTime) GetLeadTime() uint64 {
	if m != nil && m.LeadTime != nil {
		return *m.LeadTime
	}
	return 0
}

// 奖励信息
type CMD_S_DialAwardInfo struct {
	AwardInfo        *TagGameItemInfo `protobuf:"bytes,2,opt,name=AwardInfo" json:"AwardInfo,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_S_DialAwardInfo) Reset()                    { *m = CMD_S_DialAwardInfo{} }
func (m *CMD_S_DialAwardInfo) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_DialAwardInfo) ProtoMessage()               {}
func (*CMD_S_DialAwardInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{193} }

func (m *CMD_S_DialAwardInfo) GetAwardInfo() *TagGameItemInfo {
	if m != nil {
		return m.AwardInfo
	}
	return nil
}

// 动画完成
type CMD_C_DialCartoonComplete struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_DialCartoonComplete) Reset()                    { *m = CMD_C_DialCartoonComplete{} }
func (m *CMD_C_DialCartoonComplete) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_DialCartoonComplete) ProtoMessage()               {}
func (*CMD_C_DialCartoonComplete) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{194} }

func init() {
	proto.RegisterType((*TagUsedSkill)(nil), "CMD.tagUsedSkill")
	proto.RegisterType((*TagUserInfo)(nil), "CMD.tagUserInfo")
	proto.RegisterType((*TagRewardPoolOption)(nil), "CMD.tagRewardPoolOption")
	proto.RegisterType((*TagBuff)(nil), "CMD.tagBuff")
	proto.RegisterType((*CMD_S_ENTER_SCENE)(nil), "CMD.CMD_S_ENTER_SCENE")
	proto.RegisterType((*CMD_S_OTHER_ENTER_SCENE)(nil), "CMD.CMD_S_OTHER_ENTER_SCENE")
	proto.RegisterType((*CMD_S_EXIT_SCENE)(nil), "CMD.CMD_S_EXIT_SCENE")
	proto.RegisterType((*CMD_S_SWITCH_SCENE)(nil), "CMD.CMD_S_SWITCH_SCENE")
	proto.RegisterType((*CMD_S_FISH_FORM_END)(nil), "CMD.CMD_S_FISH_FORM_END")
	proto.RegisterType((*CMD_S_SCENE_STATE)(nil), "CMD.CMD_S_SCENE_STATE")
	proto.RegisterType((*CMD_S_FISH_STATE_INFO)(nil), "CMD.CMD_S_FISH_STATE_INFO")
	proto.RegisterType((*CMD_S_PIRANHA_ATTACK_INFO)(nil), "CMD.CMD_S_PIRANHA_ATTACK_INFO")
	proto.RegisterType((*TagSceneFish)(nil), "CMD.tagSceneFish")
	proto.RegisterType((*CMD_S_SCENE_FISH)(nil), "CMD.CMD_S_SCENE_FISH")
	proto.RegisterType((*TagSceneBullet)(nil), "CMD.tagSceneBullet")
	proto.RegisterType((*CMD_S_SCENE_BULLET)(nil), "CMD.CMD_S_SCENE_BULLET")
	proto.RegisterType((*CMD_S_DISTRIBUTE_FISH)(nil), "CMD.CMD_S_DISTRIBUTE_FISH")
	proto.RegisterType((*CMD_C_USER_FIRE)(nil), "CMD.CMD_C_USER_FIRE")
	proto.RegisterType((*CMD_S_USER_FIRE)(nil), "CMD.CMD_S_USER_FIRE")
	proto.RegisterType((*CMD_C_USE_SKILL)(nil), "CMD.CMD_C_USE_SKILL")
	proto.RegisterType((*CMD_S_USE_SKILL)(nil), "CMD.CMD_S_USE_SKILL")
	proto.RegisterType((*CMD_C_SKILL_FINISH)(nil), "CMD.CMD_C_SKILL_FINISH")
	proto.RegisterType((*CMD_C_BUY_SKILL)(nil), "CMD.CMD_C_BUY_SKILL")
	proto.RegisterType((*CMD_S_BUY_SKILL)(nil), "CMD.CMD_S_BUY_SKILL")
	proto.RegisterType((*CMD_C_CATCH_FISH)(nil), "CMD.CMD_C_CATCH_FISH")
	proto.RegisterType((*CMD_SUB_C_DRILL_CATCH_FISH)(nil), "CMD.CMD_SUB_C_DRILL_CATCH_FISH")
	proto.RegisterType((*CMD_SUB_S_DRILL_DISAPPEAR)(nil), "CMD.CMD_SUB_S_DRILL_DISAPPEAR")
	proto.RegisterType((*TagDropItem)(nil), "CMD.tagDropItem")
	proto.RegisterType((*TagCatchFish)(nil), "CMD.tagCatchFish")
	proto.RegisterType((*CMD_S_CATCH_FISH)(nil), "CMD.CMD_S_CATCH_FISH")
	proto.RegisterType((*CMD_C_SKILL_CATCH_FISH)(nil), "CMD.CMD_C_SKILL_CATCH_FISH")
	proto.RegisterType((*CMD_C_LASER_CANNON_CATCH_FISH)(nil), "CMD.CMD_C_LASER_CANNON_CATCH_FISH")
	proto.RegisterType((*CMD_S_LASER_CANNON_CATCH_FISH)(nil), "CMD.CMD_S_LASER_CANNON_CATCH_FISH")
	proto.RegisterType((*CMD_S_UPDATE_LASER_ENERGY)(nil), "CMD.CMD_S_UPDATE_LASER_ENERGY")
	proto.RegisterType((*CMD_S_UPDATE_USER_SCORE)(nil), "CMD.CMD_S_UPDATE_USER_SCORE")
	proto.RegisterType((*CMD_S_START_ALMS)(nil), "CMD.CMD_S_START_ALMS")
	proto.RegisterType((*CMD_C_REFRESH_ALMS)(nil), "CMD.CMD_C_REFRESH_ALMS")
	proto.RegisterType((*CMD_S_STOP_ALMS)(nil), "CMD.CMD_S_STOP_ALMS")
	proto.RegisterType((*CMD_C_GET_ALMS)(nil), "CMD.CMD_C_GET_ALMS")
	proto.RegisterType((*CMD_S_GET_ALMS)(nil), "CMD.CMD_S_GET_ALMS")
	proto.RegisterType((*CMD_S_BOSS_COME)(nil), "CMD.CMD_S_BOSS_COME")
	proto.RegisterType((*CMD_C_CHANGE_FIRE)(nil), "CMD.CMD_C_CHANGE_FIRE")
	proto.RegisterType((*CMD_S_CHANGE_FIRE)(nil), "CMD.CMD_S_CHANGE_FIRE")
	proto.RegisterType((*CMD_S_TRRIGER_EGG)(nil), "CMD.CMD_S_TRRIGER_EGG")
	proto.RegisterType((*CMD_S_TRRIGER_NUM)(nil), "CMD.CMD_S_TRRIGER_NUM")
	proto.RegisterType((*CMD_C_SMASH_EGG)(nil), "CMD.CMD_C_SMASH_EGG")
	proto.RegisterType((*CMD_S_SMASH_EGG)(nil), "CMD.CMD_S_SMASH_EGG")
	proto.RegisterType((*CMD_S_TRRIGER_MONEY_TREE)(nil), "CMD.CMD_S_TRRIGER_MONEY_TREE")
	proto.RegisterType((*CMD_C_SMASH_MONEY_TREE)(nil), "CMD.CMD_C_SMASH_MONEY_TREE")
	proto.RegisterType((*CMD_S_SMASH_MONEY_TREE)(nil), "CMD.CMD_S_SMASH_MONEY_TREE")
	proto.RegisterType((*CMD_C_NUM_VAL)(nil), "CMD.CMD_C_NUM_VAL")
	proto.RegisterType((*CMD_S_NUM_VAL)(nil), "CMD.CMD_S_NUM_VAL")
	proto.RegisterType((*CMD_S_GUESS_SINDOU)(nil), "CMD.CMD_S_GUESS_SINDOU")
	proto.RegisterType((*CMD_C_SINDOU_REQ)(nil), "CMD.CMD_C_SINDOU_REQ")
	proto.RegisterType((*CMD_S_SINDOU_REQ)(nil), "CMD.CMD_S_SINDOU_REQ")
	proto.RegisterType((*CMD_S_BOMB_FISH)(nil), "CMD.CMD_S_BOMB_FISH")
	proto.RegisterType((*CMD_C_VIP_GET_ALMS)(nil), "CMD.CMD_C_VIP_GET_ALMS")
	proto.RegisterType((*CMD_C_GET_RED_ENVELOPE)(nil), "CMD.CMD_C_GET_RED_ENVELOPE")
	proto.RegisterType((*CMD_S_GET_RED_ENVELOPE)(nil), "CMD.CMD_S_GET_RED_ENVELOPE")
	proto.RegisterType((*CMD_S_SUMMON_FISH_INFO)(nil), "CMD.CMD_S_SUMMON_FISH_INFO")
	proto.RegisterType((*CMD_S_SHENDENG_FISH)(nil), "CMD.CMD_S_SHENDENG_FISH")
	proto.RegisterType((*CMD_C_SHENDENG_FISH)(nil), "CMD.CMD_C_SHENDENG_FISH")
	proto.RegisterType((*CMD_S_FISH_CHANGE_PATH)(nil), "CMD.CMD_S_FISH_CHANGE_PATH")
	proto.RegisterType((*CMD_S_REQ_REWARD_POOL_DETAIL)(nil), "CMD.CMD_S_REQ_REWARD_POOL_DETAIL")
	proto.RegisterType((*CMD_S_READY_REWARDPOOL)(nil), "CMD.CMD_S_READY_REWARDPOOL")
	proto.RegisterType((*CMD_S_OPEN_REWARDPOOL)(nil), "CMD.CMD_S_OPEN_REWARDPOOL")
	proto.RegisterType((*CMD_S_CLOSE_REWARDPOOL)(nil), "CMD.CMD_S_CLOSE_REWARDPOOL")
	proto.RegisterType((*TagUserRewardPoolRank)(nil), "CMD.tagUserRewardPoolRank")
	proto.RegisterType((*CMD_S_UPDATE_REWARDPOOL_RANK)(nil), "CMD.CMD_S_UPDATE_REWARDPOOL_RANK")
	proto.RegisterType((*CMD_S_UPDATE_REWARDPOOL_TASK)(nil), "CMD.CMD_S_UPDATE_REWARDPOOL_TASK")
	proto.RegisterType((*CMD_C_UNLOCK_CANNON_MULTIPLE)(nil), "CMD.CMD_C_UNLOCK_CANNON_MULTIPLE")
	proto.RegisterType((*TagUpLevelReward)(nil), "CMD.tagUpLevelReward")
	proto.RegisterType((*CMD_S_UPLEVEL_REWARD)(nil), "CMD.CMD_S_UPLEVEL_REWARD")
	proto.RegisterType((*CMD_S_UNLOCK_CANNON_MULTIPLE)(nil), "CMD.CMD_S_UNLOCK_CANNON_MULTIPLE")
	proto.RegisterType((*CMD_S_ALL_CANNON_LEVEL)(nil), "CMD.CMD_S_ALL_CANNON_LEVEL")
	proto.RegisterType((*CMD_S_USER_UP_LEVEL)(nil), "CMD.CMD_S_USER_UP_LEVEL")
	proto.RegisterType((*CMD_S_USER_ADD_EXP)(nil), "CMD.CMD_S_USER_ADD_EXP")
	proto.RegisterType((*CMD_S_UPDATE_GAME_NEWGUIDE_STATUS)(nil), "CMD.CMD_S_UPDATE_GAME_NEWGUIDE_STATUS")
	proto.RegisterType((*CMD_S_GAME_START)(nil), "CMD.CMD_S_GAME_START")
	proto.RegisterType((*CMD_S_GAME_END)(nil), "CMD.CMD_S_GAME_END")
	proto.RegisterType((*TagUserResult)(nil), "CMD.tagUserResult")
	proto.RegisterType((*CMD_S_GAME_RESULT)(nil), "CMD.CMD_S_GAME_RESULT")
	proto.RegisterType((*CMD_S_GAME_RANK)(nil), "CMD.CMD_S_GAME_RANK")
	proto.RegisterType((*CMD_C_CANNON_ANGLE)(nil), "CMD.CMD_C_CANNON_ANGLE")
	proto.RegisterType((*CMD_S_CANNON_ANGLE)(nil), "CMD.CMD_S_CANNON_ANGLE")
	proto.RegisterType((*CMD_C_ENTER_BACKSTAGE)(nil), "CMD.CMD_C_ENTER_BACKSTAGE")
	proto.RegisterType((*CMD_C_BACK_GAME)(nil), "CMD.CMD_C_BACK_GAME")
	proto.RegisterType((*CMD_S_MATCH_UP_CANNON)(nil), "CMD.CMD_S_MATCH_UP_CANNON")
	proto.RegisterType((*CMD_C_START_EGG)(nil), "CMD.CMD_C_START_EGG")
	proto.RegisterType((*CMD_S_START_EGG)(nil), "CMD.CMD_S_START_EGG")
	proto.RegisterType((*CMD_C_START_TREE)(nil), "CMD.CMD_C_START_TREE")
	proto.RegisterType((*CMD_S_START_TREE)(nil), "CMD.CMD_S_START_TREE")
	proto.RegisterType((*CMD_S_TREASURE_INFO)(nil), "CMD.CMD_S_TREASURE_INFO")
	proto.RegisterType((*CMD_C_TREASURE_START)(nil), "CMD.CMD_C_TREASURE_START")
	proto.RegisterType((*CMD_S_TREASURE_REULST)(nil), "CMD.CMD_S_TREASURE_REULST")
	proto.RegisterType((*CMD_C_START_SKILL)(nil), "CMD.CMD_C_START_SKILL")
	proto.RegisterType((*CMD_S_START_SKILL)(nil), "CMD.CMD_S_START_SKILL")
	proto.RegisterType((*CMD_C_CANCEL_SKILL)(nil), "CMD.CMD_C_CANCEL_SKILL")
	proto.RegisterType((*CMD_S_CANCEL_SKILL)(nil), "CMD.CMD_S_CANCEL_SKILL")
	proto.RegisterType((*TagTaskFish)(nil), "CMD.tagTaskFish")
	proto.RegisterType((*CMD_S_START_MYSTERIOUS_TASK)(nil), "CMD.CMD_S_START_MYSTERIOUS_TASK")
	proto.RegisterType((*CMD_S_CLOSE_MYSTERIOUS_TASK)(nil), "CMD.CMD_S_CLOSE_MYSTERIOUS_TASK")
	proto.RegisterType((*CMD_S_UPDATE_MYSTERIOUS_TASK)(nil), "CMD.CMD_S_UPDATE_MYSTERIOUS_TASK")
	proto.RegisterType((*CMD_S_ARENA_GAME_END)(nil), "CMD.CMD_S_ARENA_GAME_END")
	proto.RegisterType((*CMD_S_ARENA_CLOSE)(nil), "CMD.CMD_S_ARENA_CLOSE")
	proto.RegisterType((*CMD_S_CHANGE_ACHIEVEMENT_TITLE)(nil), "CMD.CMD_S_CHANGE_ACHIEVEMENT_TITLE")
	proto.RegisterType((*CMD_S_ARENA_ACTIVITY_END)(nil), "CMD.CMD_S_ARENA_ACTIVITY_END")
	proto.RegisterType((*CMD_C_BUY_BULLET_SKIN)(nil), "CMD.CMD_C_BUY_BULLET_SKIN")
	proto.RegisterType((*CMD_S_BUY_BULLET_SKIN)(nil), "CMD.CMD_S_BUY_BULLET_SKIN")
	proto.RegisterType((*CMD_C_CHANGE_BULLET_SKIN)(nil), "CMD.CMD_C_CHANGE_BULLET_SKIN")
	proto.RegisterType((*CMD_S_CHANGE_BULLET_SKIN)(nil), "CMD.CMD_S_CHANGE_BULLET_SKIN")
	proto.RegisterType((*CMD_S_BC_USER_CHANGE_BULLET_SKIN)(nil), "CMD.CMD_S_BC_USER_CHANGE_BULLET_SKIN")
	proto.RegisterType((*TagUserBulletSkinInfo)(nil), "CMD.tagUserBulletSkinInfo")
	proto.RegisterType((*CMD_S_UserBulletSkin)(nil), "CMD.CMD_S_UserBulletSkin")
	proto.RegisterType((*CMD_C_RESIGNUP_ARENA_ACTIVITY)(nil), "CMD.CMD_C_RESIGNUP_ARENA_ACTIVITY")
	proto.RegisterType((*CMD_S_RESIGNUP_ARENA_ACTIVITY)(nil), "CMD.CMD_S_RESIGNUP_ARENA_ACTIVITY")
	proto.RegisterType((*CMD_S_DROP_CARD)(nil), "CMD.CMD_S_DROP_CARD")
	proto.RegisterType((*CMD_S_CARD_REWARD)(nil), "CMD.CMD_S_CARD_REWARD")
	proto.RegisterType((*CMD_S_SLOT_PLAYER_PROGRESS)(nil), "CMD.CMD_S_SLOT_PLAYER_PROGRESS")
	proto.RegisterType((*CMD_S_SLOT_GAME_REWARD)(nil), "CMD.CMD_S_SLOT_GAME_REWARD")
	proto.RegisterType((*CMD_S_MULTIPLE_REWARD_OPEN)(nil), "CMD.CMD_S_MULTIPLE_REWARD_OPEN")
	proto.RegisterType((*CMD_S_GET_MULTIPLE_REWARD)(nil), "CMD.CMD_S_GET_MULTIPLE_REWARD")
	proto.RegisterType((*CMD_S_SYNC_TIGER_MAC)(nil), "CMD.CMD_S_SYNC_TIGER_MAC")
	proto.RegisterType((*TagCasinoRankPlayerInfo)(nil), "CMD.tagCasinoRankPlayerInfo")
	proto.RegisterType((*CMD_S_CASINO_ARENA_RANK)(nil), "CMD.CMD_S_CASINO_ARENA_RANK")
	proto.RegisterType((*TagRankDetailInfo)(nil), "CMD.tagRankDetailInfo")
	proto.RegisterType((*CMD_S_ARENA_RANK_DETAIL)(nil), "CMD.CMD_S_ARENA_RANK_DETAIL")
	proto.RegisterType((*CMD_S_SLAM_POOL)(nil), "CMD.CMD_S_SLAM_POOL")
	proto.RegisterType((*CMD_S_CASINO_ARENA)(nil), "CMD.CMD_S_CASINO_ARENA")
	proto.RegisterType((*CMD_S_SLAM_POOL_PLAYER)(nil), "CMD.CMD_S_SLAM_POOL_PLAYER")
	proto.RegisterType((*CMD_S_BOSS_ROULETTE)(nil), "CMD.CMD_S_BOSS_ROULETTE")
	proto.RegisterType((*CMD_C_START_BOSS_ROULETTE)(nil), "CMD.CMD_C_START_BOSS_ROULETTE")
	proto.RegisterType((*CMD_S_START_BOSS_ROULETTE)(nil), "CMD.CMD_S_START_BOSS_ROULETTE")
	proto.RegisterType((*CMD_C_BOSS_ROULETTE_REQ)(nil), "CMD.CMD_C_BOSS_ROULETTE_REQ")
	proto.RegisterType((*CMD_S_BOSS_ROULETTE_REQ)(nil), "CMD.CMD_S_BOSS_ROULETTE_REQ")
	proto.RegisterType((*CMD_S_RANDOM_MULTIPLE)(nil), "CMD.CMD_S_RANDOM_MULTIPLE")
	proto.RegisterType((*CMD_C_RANDOM_MULTIPLE_REQ)(nil), "CMD.CMD_C_RANDOM_MULTIPLE_REQ")
	proto.RegisterType((*CMD_S_RANDOM_MULTIPLE_RESULT)(nil), "CMD.CMD_S_RANDOM_MULTIPLE_RESULT")
	proto.RegisterType((*CMD_S_CLASSIC_PRIZE_POOL_UPDATE_STAR)(nil), "CMD.CMD_S_CLASSIC_PRIZE_POOL_UPDATE_STAR")
	proto.RegisterType((*CMD_C_CLASSIC_PRIZE_POOL_GUESS)(nil), "CMD.CMD_C_CLASSIC_PRIZE_POOL_GUESS")
	proto.RegisterType((*CMD_S_CLASSIC_PRIZE_POOL_GUESS)(nil), "CMD.CMD_S_CLASSIC_PRIZE_POOL_GUESS")
	proto.RegisterType((*CMD_C_CLASSIC_PRIZE_POOL_GUESS_GET)(nil), "CMD.CMD_C_CLASSIC_PRIZE_POOL_GUESS_GET")
	proto.RegisterType((*CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET)(nil), "CMD.CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET")
	proto.RegisterType((*CMD_C_CLASSIC_PRIZE_POOL_GET_STAR)(nil), "CMD.CMD_C_CLASSIC_PRIZE_POOL_GET_STAR")
	proto.RegisterType((*CMD_S_CLASSIC_PRIZE_POOL_GET_STAR)(nil), "CMD.CMD_S_CLASSIC_PRIZE_POOL_GET_STAR")
	proto.RegisterType((*CMD_C_BUY_MONSTER_SKIN)(nil), "CMD.CMD_C_BUY_MONSTER_SKIN")
	proto.RegisterType((*CMD_S_BUY_MONSTER_SKIN)(nil), "CMD.CMD_S_BUY_MONSTER_SKIN")
	proto.RegisterType((*CMD_C_CHANGE_MONSTER_SKIN)(nil), "CMD.CMD_C_CHANGE_MONSTER_SKIN")
	proto.RegisterType((*CMD_S_CHANGE_MONSTER_SKIN)(nil), "CMD.CMD_S_CHANGE_MONSTER_SKIN")
	proto.RegisterType((*CMD_S_BC_USER_CHANGE_MONSTER_SKIN)(nil), "CMD.CMD_S_BC_USER_CHANGE_MONSTER_SKIN")
	proto.RegisterType((*TagUserMonsterSkinInfo)(nil), "CMD.tagUserMonsterSkinInfo")
	proto.RegisterType((*CMD_S_UserMonsterSkin)(nil), "CMD.CMD_S_UserMonsterSkin")
	proto.RegisterType((*CMD_S_UPDATE_SAVING_POT)(nil), "CMD.CMD_S_UPDATE_SAVING_POT")
	proto.RegisterType((*CMD_S_PERSONAL_POOL_INFO)(nil), "CMD.CMD_S_PERSONAL_POOL_INFO")
	proto.RegisterType((*CMD_C_PERSONALPOOL_REWARD_REQ)(nil), "CMD.CMD_C_PERSONALPOOL_REWARD_REQ")
	proto.RegisterType((*CMD_S_PERSONAL_POOL_UPDATE)(nil), "CMD.CMD_S_PERSONAL_POOL_UPDATE")
	proto.RegisterType((*CMD_S_PERSONAL_POOL_REWARD)(nil), "CMD.CMD_S_PERSONAL_POOL_REWARD")
	proto.RegisterType((*CMD_GR_S_SYNC_SCORE)(nil), "CMD.CMD_GR_S_SYNC_SCORE")
	proto.RegisterType((*CMD_S_TREASURE_ENERGY)(nil), "CMD.CMD_S_TREASURE_ENERGY")
	proto.RegisterType((*CMD_S_TREASURE_REWARD)(nil), "CMD.CMD_S_TREASURE_REWARD")
	proto.RegisterType((*CMD_C_CLEAR_FISH)(nil), "CMD.CMD_C_CLEAR_FISH")
	proto.RegisterType((*CMD_S_WORLD_BOSS_DO_SKILL)(nil), "CMD.CMD_S_WORLD_BOSS_DO_SKILL")
	proto.RegisterType((*TagSkillEffect)(nil), "CMD.tagSkillEffect")
	proto.RegisterType((*CMD_S_SKILL_EFFECT)(nil), "CMD.CMD_S_SKILL_EFFECT")
	proto.RegisterType((*CMD_S_PSEIDON_SHIELD_VALUE)(nil), "CMD.CMD_S_PSEIDON_SHIELD_VALUE")
	proto.RegisterType((*CMD_S_PSEIDON_WEAKNESS)(nil), "CMD.CMD_S_PSEIDON_WEAKNESS")
	proto.RegisterType((*CMD_S_WEAKNESS_EXPLODE)(nil), "CMD.CMD_S_WEAKNESS_EXPLODE")
	proto.RegisterType((*CMD_C_CANNON_REPAIR)(nil), "CMD.CMD_C_CANNON_REPAIR")
	proto.RegisterType((*CMD_S_CANNON_REPAIR)(nil), "CMD.CMD_S_CANNON_REPAIR")
	proto.RegisterType((*CMD_S_WEAK_STATUS_END)(nil), "CMD.CMD_S_WEAK_STATUS_END")
	proto.RegisterType((*CMD_S_PLAYER_SKILL_EFFECT)(nil), "CMD.CMD_S_PLAYER_SKILL_EFFECT")
	proto.RegisterType((*TagSkillStatus)(nil), "CMD.tagSkillStatus")
	proto.RegisterType((*TagPlayerSkillStatus)(nil), "CMD.tagPlayerSkillStatus")
	proto.RegisterType((*CMD_S_PLAYER_SKILL_STATUS)(nil), "CMD.CMD_S_PLAYER_SKILL_STATUS")
	proto.RegisterType((*CMD_C_SYNC_USER_STATE)(nil), "CMD.CMD_C_SYNC_USER_STATE")
	proto.RegisterType((*CMD_S_SYNC_USER_STATE)(nil), "CMD.CMD_S_SYNC_USER_STATE")
	proto.RegisterType((*CMD_S_TRIGER_USER_TIPS)(nil), "CMD.CMD_S_TRIGER_USER_TIPS")
	proto.RegisterType((*CMD_C_CHANGE_MAONSTER_MULTIPLE)(nil), "CMD.CMD_C_CHANGE_MAONSTER_MULTIPLE")
	proto.RegisterType((*CMD_S_CHANGE_MAONSTER_MULTIPLE)(nil), "CMD.CMD_S_CHANGE_MAONSTER_MULTIPLE")
	proto.RegisterType((*CMD_C_START_ADVENTURE)(nil), "CMD.CMD_C_START_ADVENTURE")
	proto.RegisterType((*CMD_S_WHEEL_INFO)(nil), "CMD.CMD_S_WHEEL_INFO")
	proto.RegisterType((*CMD_C_PREDICTION_CHIP)(nil), "CMD.CMD_C_PREDICTION_CHIP")
	proto.RegisterType((*CMD_S_PREDICTION_INFO)(nil), "CMD.CMD_S_PREDICTION_INFO")
	proto.RegisterType((*CMD_S_BOSS_DATA)(nil), "CMD.CMD_S_BOSS_DATA")
	proto.RegisterType((*CMD_S_BossSkillStatus)(nil), "CMD.CMD_S_BossSkillStatus")
	proto.RegisterType((*TagGameItemInfo)(nil), "CMD.tagGameItemInfo")
	proto.RegisterType((*CMD_S_SelectCard)(nil), "CMD.CMD_S_SelectCard")
	proto.RegisterType((*CMD_C_SelectCard)(nil), "CMD.CMD_C_SelectCard")
	proto.RegisterType((*CMD_S_SelectCardAward)(nil), "CMD.CMD_S_SelectCardAward")
	proto.RegisterType((*CMD_S_SelectCardEnd)(nil), "CMD.CMD_S_SelectCardEnd")
	proto.RegisterType((*CMD_C_EndGame)(nil), "CMD.CMD_C_EndGame")
	proto.RegisterType((*CMD_S_ClosAnAccount)(nil), "CMD.CMD_S_ClosAnAccount")
	proto.RegisterType((*CMD_S_GameEndLeadTime)(nil), "CMD.CMD_S_GameEndLeadTime")
	proto.RegisterType((*CMD_S_DialAwardInfo)(nil), "CMD.CMD_S_DialAwardInfo")
	proto.RegisterType((*CMD_C_DialCartoonComplete)(nil), "CMD.CMD_C_DialCartoonComplete")
	proto.RegisterEnum("CMD.CMD_S_TREASURE_REULST_REULST_TYPE", CMD_S_TREASURE_REULST_REULST_TYPE_name, CMD_S_TREASURE_REULST_REULST_TYPE_value)
	proto.RegisterEnum("CMD.CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType", CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType_name, CMD_C_CLASSIC_PRIZE_POOL_GUESS_BetType_value)
	proto.RegisterEnum("CMD.CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result", CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result_name, CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET_Result_value)
	proto.RegisterEnum("CMD.CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID", CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID_name, CMD_S_WORLD_BOSS_DO_SKILL_BossSkillID_value)
	proto.RegisterEnum("CMD.CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason", CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason_name, CMD_S_PSEIDON_SHIELD_VALUE_UpdateReason_value)
	proto.RegisterEnum("CMD.TagSkillStatus_SkillEffectType", TagSkillStatus_SkillEffectType_name, TagSkillStatus_SkillEffectType_value)
	proto.RegisterEnum("CMD.CMD_S_SYNC_USER_STATE_StateType", CMD_S_SYNC_USER_STATE_StateType_name, CMD_S_SYNC_USER_STATE_StateType_value)
	proto.RegisterEnum("CMD.CMD_S_TRIGER_USER_TIPS_TipsType", CMD_S_TRIGER_USER_TIPS_TipsType_name, CMD_S_TRIGER_USER_TIPS_TipsType_value)
	proto.RegisterEnum("CMD.CMD_S_CHANGE_MAONSTER_MULTIPLE_Result", CMD_S_CHANGE_MAONSTER_MULTIPLE_Result_name, CMD_S_CHANGE_MAONSTER_MULTIPLE_Result_value)
	proto.RegisterEnum("CMD.CMD_S_PREDICTION_INFO_Result", CMD_S_PREDICTION_INFO_Result_name, CMD_S_PREDICTION_INFO_Result_value)
	proto.RegisterEnum("CMD.CMD_S_BossSkillStatus_BossSkillStatus", CMD_S_BossSkillStatus_BossSkillStatus_name, CMD_S_BossSkillStatus_BossSkillStatus_value)
	proto.RegisterEnum("CMD.CMD_C_SelectCard_SelectCardType", CMD_C_SelectCard_SelectCardType_name, CMD_C_SelectCard_SelectCardType_value)
}

func init() { proto.RegisterFile("CMD_Game.CMD", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 8662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7d, 0x6d, 0x8c, 0x23, 0x49,
	0x96, 0xd0, 0xf9, 0xab, 0xca, 0x0e, 0x97, 0xab, 0xdc, 0xd9, 0xbd, 0xdd, 0xd5, 0xdd, 0x33, 0xd3,
	0x33, 0xd9, 0xbd, 0x3b, 0xcd, 0xee, 0x6d, 0xcf, 0x4e, 0xf5, 0xee, 0xde, 0x2e, 0x2c, 0xba, 0x71,
	0xd9, 0x59, 0xd5, 0xbe, 0x76, 0xd9, 0xde, 0x4c, 0xbb, 0x67, 0xea, 0x38, 0x29, 0x37, 0xcb, 0x99,
	0xe5, 0x4e, 0xca, 0xce, 0xf4, 0x65, 0xa6, 0xbb, 0xab, 0x38, 0x1d, 0x7f, 0x10, 0x02, 0xdd, 0x07,
	0x27, 0x3e, 0x0e, 0xb8, 0x13, 0x08, 0x9d, 0x84, 0x90, 0x10, 0x08, 0x84, 0x84, 0x84, 0x84, 0x4e,
	0x3a, 0x09, 0x09, 0x0e, 0x21, 0x81, 0x84, 0x04, 0x7f, 0xd8, 0x7f, 0xfc, 0x47, 0x88, 0x3f, 0x48,
	0xfc, 0x43, 0xef, 0xbd, 0x88, 0xc8, 0xc8, 0xb4, 0xcb, 0xd5, 0xb3, 0x37, 0x48, 0xfc, 0x2a, 0xc7,
	0x8b, 0xaf, 0x17, 0xef, 0x45, 0xbc, 0xaf, 0x78, 0x91, 0xc5, 0x76, 0xdb, 0x27, 0x1d, 0xfb, 0xd8,
	0x99, 0x7b, 0xcf, 0x16, 0x51, 0x98, 0x84, 0x5a, 0xa9, 0x7d, 0xd2, 0xd1, 0x7f, 0xa7, 0xc0, 0x76,
	0x12, 0x67, 0x3a, 0x8e, 0x3d, 0xd7, 0xba, 0xf0, 0x67, 0x33, 0xed, 0x3e, 0xab, 0xc6, 0xf0, 0xc3,
	0xf6, 0xdd, 0xfd, 0xc2, 0x87, 0x85, 0xa7, 0x0d, 0x73, 0x1b, 0xcb, 0x5d, 0x57, 0xd3, 0x58, 0x39,
	0xf1, 0xe7, 0xde, 0x7e, 0x11, 0xc1, 0xf8, 0x5b, 0xdb, 0x65, 0xc5, 0x89, 0xbb, 0x5f, 0x42, 0x48,
	0x71, 0x82, 0x6d, 0x96, 0xb1, 0xe7, 0xee, 0x97, 0xa9, 0x0d, 0xfc, 0xd6, 0xee, 0xb0, 0x4a, 0x12,
	0x26, 0xce, 0x6c, 0xbf, 0x82, 0x40, 0x2a, 0x68, 0x77, 0xd9, 0x96, 0xe3, 0xba, 0x96, 0x37, 0xd9,
	0xdf, 0x42, 0x30, 0x2f, 0xe9, 0xff, 0x66, 0x8b, 0xd5, 0x09, 0xa3, 0xa8, 0x1b, 0x9c, 0x87, 0xda,
	0x43, 0x56, 0x0b, 0xfc, 0xc9, 0x85, 0x1d, 0x38, 0x73, 0x0f, 0x31, 0xda, 0x31, 0xab, 0x00, 0xe8,
	0x3b, 0x73, 0x4f, 0xbb, 0xc7, 0xb6, 0x97, 0xb1, 0x17, 0x01, 0xb2, 0x84, 0xd5, 0x16, 0x14, 0xbb,
	0x2e, 0x54, 0x4c, 0x9d, 0xb9, 0x07, 0x15, 0x84, 0xdc, 0x16, 0x14, 0xbb, 0x2e, 0x0c, 0xf7, 0xc6,
	0x5f, 0xd8, 0x33, 0xef, 0x8d, 0x37, 0xe3, 0x58, 0x56, 0xdf, 0xf8, 0x8b, 0x1e, 0x94, 0x01, 0x53,
	0xaa, 0xe0, 0x98, 0x62, 0x01, 0x48, 0x32, 0x79, 0xed, 0xf8, 0x38, 0x0b, 0xe0, 0x5a, 0x31, 0xb7,
	0xb1, 0xdc, 0x75, 0xa1, 0x2a, 0x71, 0xce, 0x66, 0x38, 0xcf, 0x36, 0x55, 0x61, 0xb9, 0x8b, 0xab,
	0x8e, 0x27, 0x61, 0xe4, 0xed, 0x57, 0x3f, 0x2c, 0x3c, 0x2d, 0x99, 0x54, 0xd0, 0xf6, 0xd9, 0xf6,
	0x2c, 0x4c, 0x12, 0x2f, 0xba, 0xda, 0xaf, 0x21, 0x5c, 0x14, 0xb5, 0x8f, 0xd9, 0xde, 0xd9, 0x72,
	0x36, 0xf3, 0x12, 0x7b, 0xbe, 0x9c, 0x45, 0xfe, 0x62, 0xe6, 0xed, 0x33, 0x1c, 0x71, 0x97, 0xc0,
	0x27, 0x1c, 0xaa, 0x1d, 0xb0, 0x3a, 0x90, 0xd5, 0x46, 0xb6, 0xc4, 0xfb, 0xf5, 0x0f, 0x4b, 0x4f,
	0xeb, 0x07, 0xb7, 0x9e, 0xb5, 0x4f, 0x3a, 0xcf, 0x54, 0x4e, 0x9a, 0x6c, 0x29, 0x7e, 0xc6, 0xb0,
	0xea, 0x89, 0x13, 0x04, 0x61, 0x00, 0x88, 0xee, 0xd0, 0xaa, 0x09, 0x40, 0xb4, 0x3a, 0x77, 0x26,
	0xb8, 0x86, 0x06, 0xd1, 0x0a, 0x8a, 0x5d, 0x57, 0x6b, 0xb2, 0x92, 0x77, 0xb9, 0xd8, 0xdf, 0x45,
	0x20, 0xfc, 0x04, 0xf4, 0x5d, 0xdf, 0x99, 0x87, 0x81, 0xbb, 0xbf, 0x47, 0xe8, 0xf3, 0x22, 0xb0,
	0x93, 0xf0, 0xdc, 0x6f, 0xd2, 0x18, 0x54, 0xd2, 0xde, 0x67, 0x8c, 0xcf, 0x1c, 0x2c, 0xe7, 0xfb,
	0xb7, 0xb0, 0x8e, 0xe3, 0xd2, 0x5f, 0xce, 0xb5, 0xc7, 0xac, 0xe1, 0x4c, 0x26, 0xe1, 0x32, 0x48,
	0x38, 0x4b, 0x34, 0x5c, 0xf3, 0x0e, 0x07, 0x12, 0x5b, 0xde, 0x67, 0x6c, 0x16, 0x4e, 0xfd, 0xc0,
	0x4e, 0xae, 0x16, 0xde, 0xfe, 0x6d, 0x6c, 0x51, 0x43, 0xc8, 0xe8, 0x6a, 0xe1, 0x01, 0x13, 0x10,
	0xff, 0x65, 0x34, 0xdb, 0xbf, 0x83, 0x1b, 0x04, 0xd7, 0x33, 0x8e, 0x66, 0xda, 0x23, 0x56, 0x77,
	0x22, 0x2f, 0x70, 0x6c, 0x62, 0xc5, 0xd7, 0xb0, 0x2b, 0x43, 0x90, 0x85, 0xfc, 0xb8, 0xcb, 0xb6,
	0x62, 0x3f, 0xf1, 0x66, 0x6f, 0xf6, 0xef, 0x12, 0xda, 0x54, 0xd2, 0xbe, 0xc3, 0xee, 0x38, 0x93,
	0xd7, 0xbe, 0xf7, 0xc6, 0x9b, 0x7b, 0x41, 0x62, 0x27, 0x7e, 0x42, 0x4c, 0xbe, 0x87, 0xab, 0xd6,
	0x94, 0xba, 0x11, 0x54, 0x75, 0x5d, 0xed, 0x09, 0xe3, 0x8c, 0x02, 0xc6, 0x20, 0x9d, 0xf7, 0x71,
	0xc4, 0x1d, 0x82, 0x5a, 0x17, 0x3e, 0xd0, 0x5a, 0x67, 0x95, 0xb3, 0xe5, 0xf9, 0x79, 0xbc, 0x7f,
	0x1f, 0xd9, 0xb6, 0x23, 0xd8, 0x76, 0xb8, 0x3c, 0x3f, 0x37, 0xa9, 0x4a, 0x7b, 0x8f, 0xd5, 0x62,
	0x6f, 0xc2, 0xd1, 0x7a, 0x40, 0x14, 0x93, 0x00, 0xa0, 0xd8, 0x3c, 0x0c, 0xe2, 0xc4, 0x8b, 0xec,
	0xe5, 0x62, 0xe1, 0x45, 0xfb, 0x0f, 0x69, 0x1a, 0x0e, 0x1c, 0x03, 0x4c, 0xff, 0x7b, 0x05, 0x76,
	0x3b, 0x71, 0xa6, 0xa6, 0xf7, 0xd6, 0x89, 0xdc, 0x61, 0x18, 0xce, 0x06, 0x8b, 0xc4, 0x0f, 0x03,
	0xed, 0x29, 0x6b, 0xba, 0x5e, 0xe2, 0xf8, 0x33, 0x7b, 0x12, 0xc6, 0x09, 0xd1, 0xb3, 0x40, 0xbb,
	0x8c, 0xe0, 0xed, 0x30, 0x4e, 0x90, 0xa8, 0xdf, 0x64, 0xb7, 0xd4, 0x96, 0x6f, 0x9c, 0xd9, 0x92,
	0x4e, 0x7e, 0xc9, 0xdc, 0x4b, 0x9b, 0xbe, 0x02, 0xb0, 0xf6, 0x09, 0xbb, 0xb3, 0x98, 0x39, 0x57,
	0x5e, 0x64, 0xcf, 0xfd, 0xc0, 0x8e, 0x13, 0xe7, 0xca, 0x46, 0x41, 0x41, 0x27, 0xef, 0x16, 0xd5,
	0x9d, 0xf8, 0x81, 0x95, 0x38, 0x57, 0x23, 0x7f, 0xee, 0xe9, 0x7f, 0x8e, 0x6d, 0xf3, 0x35, 0xc3,
	0xe6, 0x83, 0x55, 0xa7, 0xe2, 0x66, 0x0b, 0x8a, 0x5d, 0x57, 0x7b, 0xc0, 0xaa, 0xee, 0x32, 0x72,
	0x00, 0x6d, 0x9c, 0xb7, 0x62, 0xca, 0x32, 0x6c, 0x67, 0xc7, 0x75, 0x6d, 0x2c, 0xe1, 0x2c, 0x15,
	0xb3, 0xea, 0xb8, 0xae, 0x09, 0x65, 0xfd, 0xf7, 0xb7, 0xd8, 0x2d, 0x10, 0x75, 0x96, 0x6d, 0xf4,
	0x47, 0x86, 0x69, 0x5b, 0x6d, 0xa3, 0x6f, 0xc0, 0xca, 0xfd, 0xd8, 0x8e, 0x17, 0xde, 0xc4, 0x77,
	0x66, 0x76, 0x3c, 0xf1, 0x02, 0x5a, 0x79, 0xd5, 0xdc, 0xf5, 0x63, 0x8b, 0xc0, 0x16, 0x40, 0xb5,
	0x3f, 0xc3, 0x1e, 0x28, 0xcd, 0xbc, 0xc0, 0xb3, 0xdf, 0x3a, 0x7e, 0xe2, 0xb9, 0xb6, 0x22, 0xfc,
	0xee, 0xc5, 0xb2, 0x87, 0x17, 0x78, 0x9f, 0x63, 0x3d, 0xac, 0x0c, 0xb6, 0x6a, 0x02, 0xd2, 0x0a,
	0x77, 0x2f, 0x27, 0x40, 0x0d, 0x20, 0x6d, 0x00, 0x68, 0x3f, 0x60, 0xfb, 0xde, 0xe5, 0xe4, 0xb5,
	0x13, 0x4c, 0x3d, 0xc2, 0xde, 0x06, 0x79, 0x45, 0x9b, 0x93, 0x84, 0xd1, 0x5d, 0x51, 0x8f, 0x8b,
	0x19, 0x8b, 0xda, 0x35, 0x3d, 0xcf, 0xfd, 0xf8, 0x35, 0xf5, 0xac, 0xac, 0xe9, 0x79, 0x24, 0x6a,
	0xb5, 0xaf, 0xb3, 0x5d, 0xd9, 0x93, 0xd0, 0x22, 0x81, 0xdb, 0x10, 0x50, 0x42, 0xed, 0x19, 0xbb,
	0x0d, 0xdc, 0x4b, 0x65, 0x50, 0x82, 0x32, 0x68, 0x9b, 0x78, 0x38, 0xf7, 0x83, 0x43, 0x21, 0x86,
	0xb0, 0x02, 0xdb, 0x3b, 0x97, 0x2b, 0xed, 0xab, 0xbc, 0xbd, 0x73, 0x99, 0x6b, 0x0f, 0x8a, 0x05,
	0xe8, 0x0b, 0x9c, 0xae, 0x71, 0xc5, 0x02, 0xe5, 0xae, 0x0b, 0x44, 0x5b, 0x38, 0xcb, 0xd8, 0x23,
	0x0a, 0x93, 0xd4, 0xab, 0x21, 0x04, 0x69, 0xfa, 0x29, 0x28, 0x04, 0x10, 0xb2, 0x48, 0x2b, 0x2e,
	0xf0, 0x9a, 0x8a, 0xc0, 0x43, 0x45, 0x61, 0x32, 0x6c, 0x84, 0x14, 0x83, 0x11, 0xcf, 0xc2, 0x60,
	0x19, 0x23, 0x91, 0x50, 0xe0, 0x55, 0xcc, 0x1a, 0x42, 0x80, 0x2e, 0x58, 0xbd, 0x4c, 0xe0, 0x48,
	0x83, 0x50, 0x6a, 0xf0, 0x6a, 0x84, 0x80, 0x50, 0x7a, 0xc2, 0x76, 0x9d, 0xd9, 0x3c, 0xb6, 0xa7,
	0x5e, 0xc2, 0x29, 0xb6, 0xcb, 0xa5, 0xd2, 0x6c, 0x1e, 0x1f, 0x7b, 0x09, 0x11, 0xec, 0x7d, 0xc6,
	0x68, 0x41, 0x78, 0x8a, 0xf6, 0x68, 0x10, 0x84, 0xe0, 0x01, 0xfa, 0x45, 0xb6, 0x1b, 0xe1, 0xf1,
	0x5b, 0x84, 0xe1, 0xcc, 0x0e, 0x17, 0x24, 0x18, 0xeb, 0x07, 0xfb, 0x02, 0xf1, 0xfc, 0xe1, 0x34,
	0x1b, 0x69, 0xfb, 0xc1, 0x22, 0xc9, 0xe8, 0x96, 0x5b, 0x59, 0xdd, 0xf2, 0x90, 0xd5, 0xfc, 0xd8,
	0x9e, 0x3b, 0x70, 0xe0, 0x51, 0x62, 0x56, 0xcd, 0xaa, 0x1f, 0x9f, 0x60, 0x19, 0x2a, 0x51, 0xf5,
	0x21, 0x31, 0x49, 0x58, 0x56, 0x01, 0x80, 0x27, 0xef, 0x05, 0xbb, 0x47, 0x67, 0x63, 0x30, 0x7a,
	0x61, 0x98, 0x99, 0x13, 0xf2, 0x6d, 0x56, 0x23, 0x5d, 0x1a, 0x9c, 0x87, 0x78, 0x34, 0xd6, 0x11,
	0xb9, 0xba, 0xe4, 0xbf, 0x74, 0x87, 0x35, 0xf9, 0x29, 0xfb, 0xa2, 0x3b, 0xe2, 0x43, 0x28, 0xea,
	0xb8, 0x90, 0x51, 0xc7, 0xaa, 0x0a, 0x2d, 0x5e, 0xaf, 0x42, 0x4b, 0x99, 0x65, 0xea, 0xff, 0xb2,
	0xc0, 0x34, 0x9a, 0xc3, 0xfa, 0xbc, 0x3b, 0x6a, 0xbf, 0xe0, 0xb3, 0xbc, 0xcf, 0x58, 0xe0, 0x5d,
	0x26, 0xca, 0x21, 0x6e, 0x98, 0x35, 0x80, 0xd0, 0xf9, 0xcd, 0x1e, 0xc1, 0x62, 0xfe, 0x08, 0x3e,
	0x64, 0x35, 0xd8, 0x14, 0xf6, 0x85, 0x1f, 0x08, 0xdb, 0xa0, 0x0a, 0x80, 0x97, 0x7e, 0x00, 0xe2,
	0xb9, 0x81, 0x95, 0x20, 0x5d, 0x16, 0x51, 0x78, 0xc6, 0x0f, 0x65, 0x1d, 0x80, 0x2d, 0xd7, 0x1d,
	0x46, 0xe1, 0x19, 0xe8, 0x94, 0xf8, 0xad, 0x9f, 0x4c, 0x5e, 0x13, 0xe3, 0xe9, 0xf0, 0x31, 0x02,
	0x01, 0xe7, 0xf5, 0xef, 0xb3, 0xdb, 0x84, 0xf5, 0x51, 0xd7, 0x7a, 0x61, 0x1f, 0x0d, 0xcc, 0x13,
	0xdb, 0xe8, 0x77, 0xf2, 0xfd, 0x0a, 0x2b, 0xfd, 0x7e, 0x22, 0xe4, 0x16, 0x2e, 0xd3, 0xb6, 0x46,
	0xad, 0x11, 0xca, 0x2d, 0xda, 0x65, 0x71, 0xe2, 0x24, 0x5e, 0x46, 0x62, 0x23, 0xdc, 0x02, 0x30,
	0x6e, 0xb8, 0x8f, 0xd8, 0x4e, 0xbc, 0x8c, 0x16, 0xb3, 0x65, 0xac, 0x4a, 0xaa, 0x3a, 0x87, 0x21,
	0xf7, 0xff, 0x71, 0x81, 0x7d, 0x4d, 0x41, 0x0d, 0x67, 0xb0, 0xbb, 0xfd, 0xa3, 0x01, 0xa8, 0xfa,
	0xa5, 0xe4, 0x1a, 0xfc, 0x04, 0x32, 0x22, 0x29, 0x70, 0x5e, 0x41, 0x46, 0x80, 0xe0, 0x8c, 0xda,
	0x87, 0x6c, 0x27, 0xad, 0xb6, 0x27, 0x9c, 0x92, 0x4c, 0x36, 0x68, 0xa3, 0x01, 0xb4, 0xf0, 0xa4,
	0x2d, 0x48, 0x05, 0x30, 0x73, 0xb8, 0x2c, 0x92, 0x66, 0x0e, 0x51, 0x70, 0x97, 0xc0, 0xc2, 0xcc,
	0xd1, 0x6d, 0x76, 0x9f, 0x50, 0x1d, 0x76, 0xcd, 0x56, 0xff, 0x45, 0xcb, 0x6e, 0x8d, 0x46, 0xad,
	0xf6, 0xcb, 0xeb, 0xd0, 0xdd, 0x67, 0x7c, 0x47, 0x75, 0x38, 0xae, 0xa2, 0x08, 0x2a, 0xde, 0x75,
	0xe6, 0xce, 0x54, 0xe8, 0x23, 0x5e, 0xd2, 0xff, 0x49, 0x11, 0x4d, 0x5f, 0xdc, 0x34, 0x28, 0x15,
	0x56, 0x07, 0xbd, 0xc7, 0xb6, 0x61, 0x9b, 0x28, 0xe6, 0x25, 0x14, 0xc9, 0x64, 0x5a, 0x38, 0xc9,
	0x6b, 0xc5, 0xbc, 0x84, 0xa2, 0x10, 0x65, 0x50, 0x11, 0xb8, 0xde, 0x25, 0xae, 0x1c, 0x45, 0x59,
	0xf2, 0xba, 0x0b, 0x00, 0x98, 0x22, 0x71, 0xa6, 0x7c, 0xc5, 0xf0, 0x33, 0xa5, 0xd2, 0x96, 0x4a,
	0xa5, 0xfb, 0xac, 0x1a, 0x9e, 0x9f, 0xc7, 0x5e, 0x62, 0x5f, 0xa2, 0x04, 0x2e, 0x9a, 0xdb, 0x54,
	0xfe, 0x42, 0xa9, 0xba, 0x42, 0x61, 0x2b, 0xab, 0x4e, 0x51, 0x97, 0x86, 0x4e, 0x92, 0x4a, 0xd8,
	0x2d, 0x28, 0x76, 0x5d, 0x34, 0x83, 0x66, 0xfe, 0x1b, 0xbe, 0x89, 0x50, 0xc2, 0x36, 0x4c, 0x86,
	0x20, 0xc9, 0x4d, 0x3f, 0xb6, 0xcf, 0xc3, 0x68, 0x4e, 0x12, 0xb3, 0x8e, 0x32, 0x85, 0xf9, 0xf1,
	0x51, 0x18, 0xcd, 0x81, 0x38, 0xfa, 0x91, 0x38, 0xee, 0xb4, 0x39, 0x61, 0xff, 0x80, 0x25, 0x4a,
	0x7b, 0x13, 0x55, 0xd1, 0x7e, 0x21, 0x6b, 0x89, 0x4a, 0xc2, 0x9a, 0x24, 0x27, 0x51, 0x23, 0xe9,
	0xff, 0xac, 0xc8, 0x76, 0x45, 0x25, 0x69, 0x88, 0x8c, 0x70, 0x28, 0x64, 0x85, 0xc3, 0x43, 0x56,
	0xe3, 0x0a, 0x46, 0xb2, 0xa0, 0x4a, 0x80, 0xae, 0xab, 0xdd, 0x66, 0x95, 0x45, 0x18, 0xdb, 0x97,
	0xc8, 0x82, 0xa2, 0x59, 0x5e, 0x84, 0xf1, 0x17, 0x02, 0x78, 0x85, 0xb4, 0x27, 0xe0, 0x29, 0x10,
	0xd9, 0x09, 0xa6, 0x7c, 0xab, 0x15, 0x4d, 0x2a, 0xe4, 0x04, 0xc5, 0x56, 0x5e, 0x50, 0xac, 0x31,
	0xc8, 0x49, 0x19, 0xe6, 0x0d, 0x72, 0x92, 0xc6, 0x6e, 0xb8, 0x3c, 0xe3, 0xfa, 0x0f, 0xa5, 0x71,
	0x07, 0xcb, 0x40, 0xd9, 0x59, 0x38, 0xb9, 0x40, 0x12, 0xa5, 0x8c, 0x61, 0x00, 0x03, 0x82, 0xd0,
	0x96, 0xe1, 0xf3, 0x80, 0x32, 0x22, 0xde, 0xf0, 0x55, 0xf7, 0x97, 0x73, 0xbd, 0x2f, 0x65, 0x20,
	0x12, 0xfe, 0x70, 0xdc, 0xeb, 0x19, 0x23, 0xed, 0x07, 0xac, 0x41, 0xa4, 0xa7, 0x86, 0x82, 0xf8,
	0xb7, 0x33, 0xc4, 0x27, 0xfa, 0x9a, 0x3b, 0x71, 0x5a, 0x88, 0xf5, 0xcf, 0x84, 0x08, 0xe8, 0x74,
	0xad, 0x91, 0xd9, 0x3d, 0x1c, 0x8f, 0x38, 0x37, 0x3f, 0x66, 0x95, 0x1b, 0xf8, 0x48, 0xf5, 0xfa,
	0x4f, 0x8b, 0x6c, 0x0f, 0x86, 0x68, 0xdb, 0x63, 0xcb, 0x30, 0xed, 0xa3, 0xae, 0x69, 0xe4, 0x68,
	0x09, 0x5c, 0x2c, 0xab, 0xb4, 0x94, 0x0c, 0x28, 0xaa, 0x0c, 0xc8, 0xd3, 0xa6, 0xb4, 0x42, 0x9b,
	0x35, 0x3c, 0x28, 0xaf, 0xe5, 0x41, 0x6a, 0x7d, 0x27, 0xde, 0x7c, 0x01, 0x83, 0x55, 0x54, 0xeb,
	0x7b, 0xe4, 0xcd, 0x17, 0x2b, 0xa4, 0xde, 0xca, 0x91, 0x1a, 0x24, 0xa8, 0x1f, 0xdb, 0x67, 0x51,
	0xe8, 0xb8, 0x13, 0x27, 0x4e, 0x90, 0xdd, 0x55, 0xb3, 0xee, 0xc7, 0x87, 0x02, 0xb4, 0x99, 0xd7,
	0x1f, 0xb0, 0x7a, 0x7c, 0x6e, 0x4b, 0xf7, 0xb9, 0xc6, 0x4d, 0xf7, 0x73, 0x8b, 0x3b, 0xd0, 0x2b,
	0xa6, 0x3b, 0x5b, 0x63, 0xba, 0xff, 0x97, 0x12, 0x51, 0xd7, 0x52, 0xa8, 0xfb, 0xb3, 0x9e, 0x10,
	0x49, 0xf6, 0x92, 0x4a, 0xf6, 0xc7, 0xac, 0xc1, 0xbb, 0xf0, 0x75, 0x94, 0x71, 0x1d, 0x9c, 0x54,
	0x7c, 0x2d, 0x6b, 0x28, 0x5f, 0x59, 0x4b, 0xf9, 0x3c, 0x13, 0xb7, 0x56, 0x98, 0xb8, 0xca, 0x9b,
	0xed, 0x35, 0xbc, 0xf9, 0x90, 0xed, 0x9c, 0x81, 0xac, 0x15, 0x06, 0x04, 0x19, 0x92, 0x0c, 0x60,
	0x63, 0x32, 0x22, 0xb2, 0xdc, 0xab, 0xe5, 0xb9, 0x07, 0x9e, 0xe6, 0x32, 0x8a, 0xb8, 0xab, 0xc7,
	0xd0, 0x55, 0xa9, 0x01, 0x84, 0x3c, 0x3d, 0x70, 0x81, 0xa1, 0x1a, 0x75, 0x63, 0x9d, 0xbb, 0xc0,
	0xcb, 0x28, 0x42, 0x13, 0x33, 0xc7, 0xb9, 0x9d, 0x3c, 0xe7, 0x60, 0x6c, 0x70, 0x83, 0x68, 0xec,
	0x06, 0x1f, 0x3b, 0x8c, 0x13, 0x1a, 0xfb, 0x23, 0xb6, 0x83, 0x63, 0xbb, 0x8e, 0x8f, 0xbe, 0xf1,
	0x2e, 0x36, 0xa8, 0x03, 0xac, 0x43, 0x20, 0xfd, 0xb5, 0x72, 0x66, 0x6c, 0xeb, 0x65, 0xb7, 0xd7,
	0xdb, 0x14, 0x6a, 0x79, 0xc8, 0x6a, 0x89, 0x13, 0x4d, 0x33, 0x5c, 0x25, 0x00, 0x21, 0xe3, 0xc7,
	0x76, 0x12, 0xf9, 0xd3, 0xa9, 0x17, 0x21, 0x6b, 0xab, 0x66, 0xcd, 0x8f, 0x47, 0x04, 0xd0, 0x7f,
	0xbb, 0xa8, 0x6c, 0xa0, 0x74, 0xaa, 0xeb, 0x36, 0x90, 0x8a, 0x45, 0x71, 0x25, 0xe0, 0x83, 0xc1,
	0x9c, 0xd2, 0xba, 0x60, 0x4e, 0x59, 0x0d, 0xe6, 0xa0, 0x2d, 0x1c, 0x46, 0x1e, 0x3a, 0x8b, 0x7c,
	0xa3, 0xd4, 0x10, 0x02, 0x5e, 0x22, 0x9a, 0x26, 0x38, 0x07, 0xe8, 0x9f, 0x65, 0xcc, 0xa3, 0x28,
	0x75, 0x84, 0x59, 0x08, 0x5a, 0x61, 0xff, 0xf6, 0x0a, 0xfb, 0x33, 0x34, 0xa9, 0xe6, 0x68, 0x72,
	0x9f, 0x81, 0x03, 0x68, 0x83, 0x9b, 0x2c, 0xbc, 0x0b, 0x8a, 0x27, 0xc5, 0xfa, 0x2f, 0x91, 0x00,
	0x6d, 0x13, 0x29, 0xec, 0xa3, 0x6e, 0x1f, 0xa4, 0xdd, 0xcf, 0x44, 0x11, 0xdd, 0x16, 0x5c, 0x3c,
	0x1c, 0x9f, 0xde, 0xcc, 0xc5, 0x3b, 0xac, 0x92, 0x1a, 0xa1, 0x15, 0x93, 0x0a, 0xd9, 0x75, 0x94,
	0xb2, 0xeb, 0xd0, 0xff, 0x41, 0x41, 0x30, 0x2f, 0x9d, 0x21, 0x4f, 0xbd, 0xc2, 0x2a, 0xf5, 0x36,
	0xdb, 0xd7, 0x12, 0xbf, 0x52, 0x16, 0xbf, 0x2c, 0xd7, 0xca, 0xb4, 0xab, 0x53, 0xae, 0x49, 0xf4,
	0x2b, 0x0a, 0xfa, 0xfa, 0x3f, 0x2d, 0x90, 0x25, 0xd0, 0xb6, 0xdb, 0x2d, 0xb0, 0xc9, 0x8f, 0x38,
	0x35, 0xf1, 0xfc, 0xa7, 0xf6, 0xd3, 0x36, 0x94, 0xc7, 0xfe, 0x0d, 0x02, 0x6a, 0x55, 0x34, 0x94,
	0xd6, 0x88, 0x06, 0x75, 0x75, 0x65, 0xd5, 0xb8, 0x43, 0xcb, 0xe6, 0xad, 0xe7, 0x5c, 0x04, 0x5e,
	0x1c, 0xa7, 0x42, 0x9f, 0x09, 0x50, 0xd7, 0xd5, 0xff, 0x5a, 0x81, 0x3d, 0x40, 0x82, 0x8e, 0x0f,
	0xed, 0xb6, 0xdd, 0x31, 0x61, 0x0b, 0x64, 0x11, 0xcf, 0x6c, 0x03, 0x65, 0xe8, 0x9c, 0x4c, 0x28,
	0xe6, 0x65, 0xc2, 0x7b, 0x8c, 0xc5, 0xe7, 0x39, 0xdd, 0x55, 0x8d, 0xcf, 0xb9, 0xd0, 0xbb, 0xc7,
	0xb6, 0x45, 0x55, 0xf9, 0xc3, 0x12, 0x06, 0xd5, 0xb0, 0x42, 0xff, 0xdd, 0x02, 0x37, 0x6c, 0xc7,
	0x87, 0xa0, 0x84, 0x11, 0xa1, 0x4e, 0xd7, 0x6a, 0x0d, 0x87, 0x46, 0xcb, 0xfc, 0x7f, 0x87, 0xcf,
	0x23, 0x56, 0xc7, 0xa3, 0x6a, 0xa7, 0xc1, 0x86, 0x92, 0xc9, 0x10, 0x84, 0x32, 0x4c, 0x6f, 0x61,
	0xd8, 0xb5, 0x13, 0x85, 0x8b, 0x6e, 0xe2, 0xcd, 0x01, 0x7f, 0x3f, 0xf1, 0xe6, 0x8a, 0x2b, 0x07,
	0x45, 0x62, 0x06, 0x56, 0x80, 0x0c, 0xe6, 0xa7, 0x03, 0xca, 0x60, 0xaa, 0xfc, 0x51, 0x19, 0x2d,
	0xea, 0xb6, 0x93, 0x4c, 0x5e, 0xa3, 0x45, 0xbd, 0x79, 0x5b, 0xa4, 0x6e, 0x58, 0x31, 0xe7, 0x86,
	0x49, 0xdf, 0x03, 0x71, 0x2d, 0x29, 0xbe, 0x87, 0x10, 0xb7, 0x58, 0x2d, 0x22, 0xa9, 0x8a, 0x93,
	0xd6, 0xe3, 0xd1, 0x54, 0x25, 0x50, 0x49, 0x7b, 0x42, 0x06, 0x2a, 0x57, 0xb4, 0xdf, 0xd6, 0x1a,
	0xed, 0xa7, 0xb3, 0xc6, 0xcc, 0x0f, 0xb8, 0x52, 0x5b, 0x72, 0x71, 0x54, 0x35, 0xeb, 0x00, 0x3c,
	0x4a, 0x57, 0xe0, 0x7a, 0x8e, 0x6b, 0xc7, 0xfe, 0x34, 0x10, 0xa6, 0x00, 0x00, 0x2c, 0x7f, 0x1a,
	0x64, 0x4e, 0x5d, 0x2d, 0x7b, 0xea, 0x1e, 0x73, 0x1f, 0x53, 0xea, 0x55, 0x52, 0x46, 0xb8, 0x24,
	0xa9, 0x55, 0x9f, 0xb1, 0xdb, 0xd8, 0x28, 0x8c, 0xfc, 0xa9, 0x1f, 0x48, 0xb6, 0x91, 0x62, 0xba,
	0x05, 0x55, 0x03, 0x5e, 0x43, 0x24, 0xf9, 0x84, 0x31, 0x37, 0x0a, 0x17, 0x36, 0xb0, 0x22, 0xde,
	0x6f, 0x64, 0x43, 0x24, 0x82, 0xa9, 0x66, 0xcd, 0xe5, 0xbf, 0x62, 0xed, 0x1b, 0x6c, 0x2f, 0x25,
	0xb1, 0x1d, 0xbf, 0x0e, 0xdf, 0xf2, 0x38, 0x6f, 0x43, 0xd2, 0xd9, 0x7a, 0x1d, 0xbe, 0x55, 0xe3,
	0x73, 0x7b, 0x99, 0xf8, 0x1c, 0x9e, 0xeb, 0xf3, 0x73, 0xd2, 0xa7, 0x4d, 0x0a, 0x33, 0x00, 0x00,
	0xf5, 0xe9, 0x7d, 0x86, 0xbf, 0xc1, 0x8f, 0x16, 0xb1, 0x0b, 0x28, 0xb7, 0x5c, 0xec, 0x37, 0x89,
	0xfc, 0xc4, 0x8e, 0xc0, 0x13, 0xa1, 0x68, 0x6f, 0x15, 0x00, 0xa6, 0x93, 0x78, 0xfa, 0x1f, 0x96,
	0x84, 0x9b, 0xb1, 0xe1, 0x8c, 0x66, 0xad, 0x1f, 0x5c, 0x05, 0xba, 0xc5, 0x3c, 0x4a, 0x08, 0x00,
	0x74, 0x88, 0xbf, 0x25, 0x43, 0xd2, 0x25, 0x8c, 0x66, 0xac, 0x35, 0x8e, 0xd5, 0x38, 0x75, 0x6a,
	0x3d, 0x94, 0xf3, 0xd6, 0x83, 0xd0, 0xf0, 0x62, 0xcb, 0x55, 0x52, 0x0d, 0x2f, 0xb6, 0x9c, 0x34,
	0x02, 0xf8, 0xbe, 0xdb, 0x52, 0x8c, 0x00, 0xbe, 0xf7, 0x32, 0x36, 0xc8, 0x76, 0xce, 0x06, 0x39,
	0x60, 0xf5, 0x09, 0x9c, 0x1c, 0xee, 0x4d, 0x55, 0xb3, 0x56, 0xb8, 0x3c, 0x54, 0x26, 0x9b, 0x88,
	0x9f, 0x31, 0x70, 0x07, 0xd4, 0x9e, 0x77, 0xb9, 0xc0, 0x5d, 0x56, 0xc1, 0x5b, 0x14, 0xe3, 0x72,
	0x91, 0xd9, 0x7f, 0x2c, 0xbb, 0xff, 0xe0, 0x64, 0xc7, 0x36, 0x90, 0x9c, 0xbb, 0x79, 0x5b, 0x7e,
	0xdc, 0x8e, 0xfc, 0x44, 0x65, 0xf5, 0x4e, 0x86, 0xd5, 0x1f, 0xb3, 0xbd, 0x24, 0xf2, 0x9c, 0x78,
	0x19, 0x79, 0xb6, 0x77, 0x7e, 0xee, 0x4d, 0x12, 0x7e, 0x51, 0xb0, 0x2b, 0xc0, 0x06, 0x42, 0xf5,
	0x0b, 0x76, 0x57, 0x55, 0xb5, 0xef, 0x26, 0x67, 0x39, 0x0f, 0x63, 0x3c, 0x67, 0x45, 0x94, 0x95,
	0xc8, 0xc3, 0x18, 0x0e, 0xd9, 0xf5, 0xda, 0x4b, 0x37, 0xd9, 0xfb, 0x34, 0x59, 0xaf, 0x05, 0x86,
	0x72, 0xbb, 0xd5, 0xef, 0x0f, 0xfa, 0xea, 0x9c, 0x99, 0x81, 0x0b, 0xb9, 0x81, 0xd7, 0x7a, 0x24,
	0xfa, 0xaf, 0xd2, 0x98, 0xd6, 0xb5, 0x63, 0x6e, 0x58, 0xc7, 0x7a, 0x1f, 0xe7, 0x11, 0xab, 0x47,
	0x5e, 0xbc, 0x9c, 0x25, 0xf6, 0x24, 0x74, 0x3d, 0x1e, 0xe1, 0x62, 0x04, 0x6a, 0x87, 0xae, 0xa7,
	0x9f, 0x8a, 0x38, 0xc7, 0x78, 0xd8, 0x69, 0x8d, 0x0c, 0x3e, 0xb3, 0xd1, 0x37, 0xcc, 0xe3, 0xd3,
	0x4d, 0xd3, 0x7d, 0xc4, 0x76, 0xbc, 0xc0, 0x8b, 0xa6, 0x57, 0x4a, 0x6c, 0xbe, 0x62, 0xd6, 0x09,
	0x86, 0x71, 0x79, 0xfd, 0x37, 0x4a, 0x22, 0xda, 0xc7, 0xc7, 0x46, 0x8f, 0xc2, 0x6a, 0x0f, 0x36,
	0xbb, 0x14, 0xd9, 0xa3, 0x50, 0xbc, 0xe9, 0x28, 0x94, 0x6e, 0x3e, 0x0a, 0xe5, 0xd5, 0xa3, 0xf0,
	0x88, 0x61, 0x91, 0xfb, 0xaf, 0x42, 0x71, 0x03, 0x88, 0x47, 0x05, 0x60, 0x0c, 0x0a, 0x14, 0x11,
	0x1e, 0xdc, 0x66, 0x24, 0x98, 0x25, 0x22, 0xdb, 0xbc, 0x89, 0xc0, 0x85, 0xee, 0xe0, 0x1a, 0x04,
	0x15, 0xd8, 0xa4, 0xcd, 0x04, 0x3e, 0x55, 0xb5, 0xd9, 0xda, 0xc3, 0x49, 0x97, 0x73, 0xe9, 0xe1,
	0x7c, 0xc4, 0xea, 0xcb, 0x85, 0x2b, 0x23, 0x70, 0x3c, 0x82, 0x42, 0x20, 0x14, 0x36, 0xb9, 0x9b,
	0xa6, 0x7a, 0xfe, 0xa6, 0x49, 0xff, 0x2b, 0x05, 0x19, 0x41, 0x19, 0xb5, 0xcc, 0x91, 0xdd, 0xea,
	0x9d, 0x58, 0x30, 0xe7, 0x5b, 0xc7, 0x4f, 0x68, 0x4e, 0x62, 0x43, 0x15, 0x00, 0x38, 0x67, 0xc6,
	0xd7, 0x2c, 0xe6, 0x7c, 0xcd, 0xc7, 0xac, 0xe1, 0xc7, 0x70, 0xf0, 0xbd, 0xc8, 0xf7, 0x82, 0x89,
	0xc7, 0xfd, 0x80, 0x1d, 0x3f, 0x36, 0x24, 0x0c, 0xb6, 0x24, 0xfa, 0xdf, 0x3c, 0x10, 0x45, 0x05,
	0xfd, 0x8e, 0x30, 0x88, 0x4d, 0xe3, 0xc8, 0x34, 0xac, 0x17, 0x88, 0x8a, 0x7e, 0x4b, 0x18, 0x9e,
	0xd6, 0x68, 0x30, 0x24, 0x50, 0x93, 0xee, 0x8c, 0xdb, 0xf6, 0xb1, 0x41, 0xf8, 0xea, 0xff, 0xbe,
	0x40, 0x20, 0x4b, 0x82, 0x60, 0xb7, 0x80, 0x2d, 0x4b, 0x3b, 0x9a, 0xaf, 0xa1, 0x36, 0xf5, 0x12,
	0x13, 0x01, 0x18, 0x8d, 0xf6, 0x92, 0xcc, 0x5e, 0xaa, 0x4e, 0xbd, 0x44, 0xfa, 0x64, 0xe9, 0xf2,
	0x4b, 0x9b, 0x96, 0x5f, 0xce, 0x2d, 0x9f, 0x0f, 0xab, 0xda, 0xa7, 0x30, 0x2c, 0x45, 0x1b, 0x56,
	0x68, 0xb3, 0xb5, 0x4a, 0x1b, 0xfd, 0x58, 0x1a, 0xda, 0x03, 0xcb, 0xb2, 0xdb, 0x83, 0x13, 0x63,
	0x93, 0xb9, 0xb2, 0xc1, 0x27, 0x78, 0x43, 0x61, 0xdb, 0xb6, 0xdd, 0x7e, 0xd1, 0xea, 0x1f, 0x1b,
	0xe4, 0xb1, 0xaf, 0x71, 0x9f, 0x0b, 0x6b, 0x6f, 0x73, 0x33, 0x37, 0xb3, 0xc5, 0xdc, 0xcd, 0x2c,
	0x55, 0xf2, 0xbb, 0xd3, 0x92, 0xac, 0xc4, 0xab, 0x53, 0xfd, 0x6f, 0x16, 0x44, 0xbc, 0xf8, 0x67,
	0x9a, 0x78, 0x83, 0xcb, 0x90, 0xc1, 0xa9, 0x94, 0xc3, 0x29, 0x7b, 0xa1, 0x5b, 0xce, 0x5d, 0xe8,
	0xea, 0x8f, 0x05, 0x52, 0x23, 0xd3, 0xec, 0x1e, 0x83, 0x24, 0x3b, 0x3e, 0xd6, 0x76, 0x59, 0x51,
	0x8a, 0x99, 0xa2, 0xef, 0xea, 0xd3, 0x7c, 0xa3, 0xfe, 0xf8, 0x24, 0xdf, 0x88, 0x24, 0xe7, 0x5b,
	0x27, 0x72, 0x55, 0xed, 0xce, 0x08, 0x24, 0x02, 0xde, 0xbc, 0x01, 0x49, 0x40, 0x2e, 0x88, 0x08,
	0x46, 0x12, 0xf0, 0x63, 0xe1, 0xaf, 0x59, 0x27, 0x2d, 0xeb, 0x05, 0xe2, 0x72, 0x87, 0x55, 0x28,
	0x38, 0x4b, 0x33, 0x51, 0x41, 0xff, 0x2d, 0xe9, 0x77, 0xa5, 0x2d, 0x73, 0xa2, 0xbb, 0x90, 0x17,
	0xdd, 0xe9, 0x50, 0x45, 0x65, 0xa8, 0x3c, 0xde, 0xa5, 0x1b, 0xf1, 0x2e, 0xaf, 0xe2, 0xfd, 0x92,
	0xed, 0x67, 0x09, 0x74, 0x32, 0xe8, 0x1b, 0xa7, 0xf6, 0xc8, 0x34, 0x8c, 0x75, 0x74, 0x4a, 0x22,
	0xcf, 0x03, 0xdf, 0x37, 0x0c, 0x04, 0x2f, 0x19, 0x80, 0x2c, 0x84, 0xe8, 0x9f, 0x4a, 0xad, 0x8c,
	0x4b, 0x53, 0x86, 0xca, 0xdd, 0xd7, 0x54, 0xc4, 0x7d, 0x8d, 0xfe, 0xeb, 0xd4, 0xc5, 0x5a, 0xed,
	0x72, 0x23, 0x51, 0xbe, 0x0a, 0xb6, 0xfd, 0x3c, 0x6b, 0x10, 0xc6, 0xfd, 0xf1, 0x89, 0xfd, 0xaa,
	0xd5, 0x83, 0x1d, 0x39, 0xbf, 0xca, 0xca, 0x98, 0xea, 0xfc, 0x8a, 0x44, 0x0c, 0x08, 0xa5, 0x06,
	0x61, 0x2b, 0x9a, 0xdf, 0x88, 0xe4, 0x5d, 0xb6, 0xc5, 0x07, 0x23, 0xfc, 0x78, 0x29, 0x3b, 0x4f,
	0x29, 0x3b, 0x0f, 0xec, 0x7c, 0x3e, 0xea, 0x1b, 0x1e, 0xff, 0xa8, 0x98, 0x35, 0x82, 0xbc, 0x72,
	0x66, 0xf9, 0x85, 0x57, 0x6e, 0x5c, 0xf8, 0xd6, 0xea, 0xc2, 0xff, 0x58, 0xde, 0x78, 0x1d, 0x8f,
	0x0d, 0xcb, 0xb2, 0xad, 0x6e, 0xbf, 0x33, 0x18, 0x5f, 0xcb, 0x27, 0x18, 0x72, 0xba, 0x04, 0xdf,
	0x37, 0x58, 0xce, 0xcf, 0xbc, 0x48, 0x18, 0x01, 0x08, 0xeb, 0x23, 0x08, 0x5c, 0x6c, 0x3f, 0xf0,
	0x13, 0xfb, 0x0c, 0x44, 0x42, 0x18, 0x78, 0x57, 0x7c, 0x5d, 0x3b, 0x00, 0x3d, 0xf4, 0x92, 0x13,
	0x80, 0xc1, 0x0c, 0x78, 0xfb, 0xeb, 0x09, 0x5d, 0xb1, 0x35, 0xf7, 0x83, 0x43, 0x0f, 0x8d, 0x42,
	0xbc, 0xe6, 0xf5, 0x84, 0x98, 0xdd, 0x9a, 0x3b, 0x97, 0x87, 0x64, 0x30, 0x9f, 0x39, 0x71, 0x56,
	0x3b, 0xd7, 0x00, 0x42, 0xea, 0xce, 0x17, 0x51, 0x02, 0x5a, 0x82, 0x6d, 0x1a, 0x3f, 0x06, 0xea,
	0x86, 0x6f, 0xbc, 0xc8, 0x9e, 0x3a, 0xa9, 0xb6, 0x03, 0xc0, 0xb1, 0x43, 0xe2, 0x3e, 0x25, 0x7d,
	0x31, 0x47, 0x7a, 0x70, 0x36, 0x72, 0xf8, 0x57, 0xcf, 0x38, 0xee, 0xfa, 0x4f, 0x53, 0xcd, 0x9a,
	0xce, 0x75, 0x9f, 0x55, 0xbd, 0x28, 0x52, 0xf9, 0xbf, 0xed, 0x45, 0x11, 0x32, 0xff, 0x31, 0x6b,
	0xc4, 0x5e, 0x04, 0x88, 0x64, 0x66, 0xdb, 0x21, 0xa0, 0xf9, 0x0e, 0x3b, 0x61, 0xdd, 0x09, 0xae,
	0x64, 0x38, 0xa9, 0x7d, 0x93, 0xdd, 0xc2, 0x5b, 0xd8, 0x4c, 0x3b, 0xa2, 0xe0, 0x1e, 0x54, 0x98,
	0x4a, 0x5b, 0x71, 0x63, 0x0b, 0xb4, 0xe0, 0xba, 0x0a, 0x6f, 0x6c, 0x07, 0x6f, 0xbc, 0x48, 0xef,
	0xa6, 0x7a, 0xea, 0xe4, 0x90, 0x8c, 0xd0, 0x6b, 0xb7, 0x83, 0xf0, 0x9b, 0x55, 0x8b, 0x10, 0x6d,
	0x60, 0xda, 0x5d, 0x52, 0xf1, 0xbf, 0xea, 0x0e, 0x53, 0x9d, 0x6e, 0x0a, 0xf1, 0x00, 0x10, 0xd3,
	0xe8, 0xd8, 0x46, 0xff, 0x95, 0xd1, 0x1b, 0x0c, 0x37, 0x5c, 0xe7, 0x3e, 0x62, 0x75, 0x2f, 0x78,
	0xe3, 0xcd, 0xc2, 0x85, 0x97, 0xaa, 0x2d, 0x26, 0x40, 0x5d, 0x57, 0xff, 0x57, 0x05, 0x21, 0x40,
	0x56, 0x06, 0xcd, 0xf5, 0x2d, 0xe4, 0xfb, 0xe6, 0x0f, 0x2f, 0x1f, 0x5c, 0x39, 0xbc, 0xf7, 0x19,
	0xa8, 0x7a, 0x7b, 0x1a, 0xce, 0xa4, 0x4f, 0x30, 0xf5, 0x92, 0xe3, 0x70, 0x86, 0x7d, 0xa1, 0x2a,
	0x1b, 0x18, 0x00, 0xfb, 0x44, 0xd8, 0x82, 0xbc, 0x41, 0x36, 0x36, 0x00, 0x0d, 0xb8, 0x15, 0xa8,
	0xff, 0x81, 0xc4, 0xdc, 0x1a, 0x9f, 0x9c, 0x0c, 0xfa, 0x74, 0x53, 0x8a, 0x97, 0x8e, 0x9b, 0xa3,
	0x19, 0x33, 0x3f, 0x4e, 0xd4, 0x8b, 0xd7, 0x2a, 0x00, 0xd0, 0x90, 0x51, 0xc8, 0x58, 0xca, 0xdf,
	0x8a, 0xc3, 0x22, 0xa4, 0x22, 0x2d, 0x99, 0xdb, 0x50, 0xee, 0x2f, 0xe7, 0xd9, 0xac, 0xb7, 0x4a,
	0x36, 0xeb, 0x4d, 0xff, 0xfd, 0x82, 0xb8, 0x61, 0xb6, 0x5e, 0x18, 0xfd, 0x8e, 0xd1, 0x3f, 0x5e,
	0xbb, 0x2f, 0xde, 0xe9, 0xfa, 0x5d, 0xb9, 0xe2, 0x2c, 0x5d, 0x77, 0xc5, 0x59, 0xde, 0x70, 0xc5,
	0x59, 0xc9, 0x5d, 0x71, 0x4a, 0xe4, 0xda, 0xff, 0x3f, 0x22, 0xd7, 0x13, 0xcc, 0x45, 0xae, 0x72,
	0xbb, 0x69, 0xd8, 0x1a, 0x6d, 0x8c, 0x60, 0x2a, 0x93, 0x15, 0xd5, 0xc9, 0xf4, 0x88, 0xbd, 0x47,
	0xa3, 0x99, 0xc6, 0x8f, 0x6d, 0xd3, 0xf8, 0xbc, 0x65, 0x76, 0xec, 0xe1, 0x60, 0xd0, 0xb3, 0x3b,
	0xc6, 0xa8, 0xd5, 0xed, 0x29, 0x5a, 0xa6, 0x90, 0xd7, 0x32, 0x69, 0xfa, 0x15, 0x17, 0x75, 0x13,
	0x91, 0x78, 0x25, 0xae, 0x1a, 0x54, 0xe5, 0x88, 0xcd, 0xe9, 0x0c, 0xff, 0x9e, 0xdc, 0x9f, 0xa6,
	0xd1, 0xea, 0x9c, 0xf2, 0x69, 0x61, 0x56, 0x45, 0x01, 0x2d, 0xc2, 0x70, 0x86, 0x73, 0x96, 0x84,
	0x02, 0x1a, 0x86, 0xe1, 0x8c, 0x14, 0x98, 0xe3, 0x5e, 0xa9, 0xdb, 0xb4, 0x86, 0x10, 0xdc, 0xa7,
	0x4f, 0xd8, 0xee, 0xc4, 0x09, 0xec, 0xd8, 0xf3, 0x6c, 0xca, 0xf0, 0x12, 0x3e, 0xc5, 0xc4, 0x09,
	0x2c, 0xcf, 0xeb, 0x20, 0x0c, 0xd9, 0xe5, 0x04, 0xf6, 0x9f, 0x0f, 0xfd, 0x80, 0x5b, 0xe5, 0xdb,
	0x13, 0x27, 0xf8, 0xa5, 0xd0, 0x0f, 0xf4, 0xdf, 0x2a, 0x89, 0xbb, 0xc5, 0xc1, 0xd0, 0xe8, 0x7f,
	0x29, 0xd4, 0x40, 0x35, 0x2c, 0xbc, 0x20, 0x73, 0x80, 0x00, 0x80, 0x88, 0x7d, 0x83, 0xed, 0xf1,
	0x88, 0x39, 0xdf, 0x0d, 0x9f, 0xf2, 0xed, 0xd0, 0x20, 0xf0, 0x4b, 0xdc, 0x14, 0x9f, 0x6a, 0x4f,
	0x59, 0x53, 0x6d, 0x17, 0x2c, 0xe7, 0x9f, 0x8a, 0xeb, 0xc2, 0xb4, 0x61, 0x7f, 0x39, 0xff, 0x74,
	0x75, 0xc4, 0x03, 0x2e, 0x0a, 0x32, 0x23, 0x1e, 0xac, 0x19, 0xf1, 0x80, 0x5f, 0x70, 0x65, 0x47,
	0x3c, 0x58, 0x1d, 0xf1, 0x39, 0x0f, 0xf0, 0x64, 0x46, 0x7c, 0xbe, 0x66, 0xc4, 0xe7, 0xfc, 0x32,
	0x23, 0x3b, 0xe2, 0xf3, 0x35, 0xec, 0xa8, 0xdd, 0xc0, 0x0e, 0x96, 0x65, 0xc7, 0x6f, 0xc8, 0xad,
	0xd2, 0xee, 0x0d, 0x2c, 0xe3, 0x4b, 0xf1, 0x63, 0xb3, 0x77, 0x90, 0x8a, 0xa6, 0xd2, 0xf5, 0x09,
	0xb9, 0x65, 0xf5, 0x94, 0xeb, 0x47, 0xec, 0x6b, 0x3c, 0x8f, 0x28, 0xcd, 0x7b, 0x32, 0x9d, 0xe0,
	0x62, 0x53, 0x20, 0x42, 0x63, 0xe5, 0xc8, 0x09, 0x2e, 0x38, 0x02, 0xf8, 0x5b, 0x3f, 0x15, 0x67,
	0x8e, 0x87, 0x34, 0xd2, 0x45, 0xd9, 0x66, 0xab, 0xff, 0x52, 0xfb, 0x21, 0x63, 0x88, 0x00, 0x34,
	0x16, 0x57, 0xd9, 0x0f, 0xd4, 0x34, 0xa6, 0xec, 0xf4, 0x26, 0xe6, 0x3c, 0xc1, 0xaf, 0x58, 0xff,
	0x77, 0x85, 0xeb, 0xc7, 0x1e, 0xb5, 0xac, 0x97, 0x80, 0xaa, 0xdc, 0x80, 0x5c, 0x46, 0x5c, 0xf0,
	0xad, 0xf7, 0x90, 0xd5, 0xd2, 0x3d, 0xc7, 0xf7, 0xef, 0x85, 0xd8, 0x6d, 0x69, 0xbf, 0x03, 0xa1,
	0xb0, 0x2e, 0xf8, 0x06, 0x53, 0xfa, 0x1d, 0x88, 0x74, 0xe4, 0x0b, 0xb1, 0xa7, 0xd2, 0x7e, 0xcf,
	0x45, 0x14, 0xfb, 0x82, 0x6f, 0x23, 0xa5, 0xdf, 0x73, 0xbe, 0x23, 0x45, 0xbf, 0xe7, 0xfa, 0x77,
	0x69, 0x1d, 0x6d, 0x7b, 0xdc, 0xef, 0x0d, 0xda, 0x2f, 0x45, 0x18, 0xeb, 0x64, 0xdc, 0x1b, 0x75,
	0x87, 0x3d, 0x23, 0x4d, 0x73, 0x2e, 0x28, 0x69, 0xce, 0xfa, 0xaf, 0xc3, 0xce, 0x9c, 0x8e, 0x29,
	0x15, 0x9a, 0xa8, 0x94, 0xb7, 0x69, 0x0b, 0x42, 0x17, 0x4b, 0x9b, 0xf6, 0xeb, 0x22, 0xcb, 0xcd,
	0x8e, 0x97, 0x67, 0x52, 0x9e, 0x35, 0x44, 0x2e, 0x9b, 0x45, 0xc0, 0xb5, 0x36, 0x7f, 0xd6, 0x60,
	0xd2, 0x63, 0x76, 0x47, 0x10, 0xbf, 0x67, 0xbc, 0x32, 0x7a, 0x9c, 0xfa, 0xeb, 0x91, 0xd5, 0x0c,
	0x76, 0x7b, 0xb9, 0xc0, 0x9f, 0xc2, 0xc2, 0x02, 0x75, 0x8b, 0xe1, 0xc3, 0xfa, 0xc1, 0xd7, 0x24,
	0xbf, 0xd5, 0xc5, 0x98, 0xb7, 0x78, 0x0f, 0x2a, 0xf6, 0xfc, 0x38, 0xd1, 0xff, 0x6a, 0x51, 0xb2,
	0x7c, 0x3d, 0xa9, 0xd6, 0x78, 0x12, 0x8d, 0xbc, 0x0f, 0x48, 0xe8, 0x15, 0x55, 0xf4, 0x3e, 0x62,
	0x3b, 0x93, 0x30, 0x88, 0x97, 0x73, 0x2f, 0x75, 0x02, 0x1b, 0x66, 0x9d, 0xc3, 0x90, 0x72, 0x8f,
	0x59, 0x43, 0x34, 0x51, 0xdd, 0x40, 0xd1, 0x8f, 0x2c, 0xc3, 0x1b, 0x7d, 0x8a, 0x55, 0xfa, 0x93,
	0x25, 0x7e, 0x03, 0xfd, 0xb7, 0x57, 0xe9, 0x7f, 0x26, 0x84, 0x45, 0x0b, 0x23, 0xb7, 0x48, 0x06,
	0x64, 0xc4, 0xa6, 0x13, 0x0a, 0xc7, 0xdd, 0x8b, 0x33, 0xf9, 0xf7, 0x5e, 0xcc, 0x83, 0xa1, 0x44,
	0x96, 0x92, 0xba, 0xc5, 0xfe, 0x82, 0xb0, 0x5b, 0x30, 0x10, 0x39, 0x1e, 0x7e, 0x55, 0x13, 0x54,
	0xd4, 0x54, 0xfd, 0x65, 0x14, 0x61, 0x40, 0x9c, 0x5b, 0x54, 0x50, 0x36, 0x2e, 0x17, 0xfa, 0x95,
	0xf0, 0xac, 0x70, 0xee, 0x56, 0xa7, 0x63, 0x1b, 0x5f, 0x0c, 0x6f, 0x88, 0xe7, 0xa6, 0x9c, 0x95,
	0x33, 0x28, 0x11, 0x77, 0xd2, 0xcd, 0x4a, 0xc4, 0xfd, 0xba, 0xa9, 0xbf, 0x60, 0x1f, 0x65, 0xe4,
	0xca, 0x71, 0xeb, 0xc4, 0xb0, 0xfb, 0xc6, 0xe7, 0xc7, 0xe3, 0x6e, 0x87, 0xf2, 0xfc, 0xc6, 0x96,
	0xf6, 0x9c, 0xdd, 0xf5, 0xd0, 0x33, 0xb2, 0x03, 0xef, 0xed, 0x74, 0xe9, 0xbb, 0x9e, 0x7a, 0xdf,
	0xdb, 0x30, 0x6f, 0x7b, 0xe0, 0x26, 0xf5, 0x79, 0x1d, 0xdd, 0xfb, 0xea, 0x7f, 0x5a, 0x78, 0x3e,
	0x38, 0x24, 0x06, 0x16, 0x41, 0x13, 0x91, 0xc3, 0x97, 0xe6, 0x4a, 0xd0, 0x08, 0x0d, 0xf4, 0xf8,
	0x64, 0x62, 0x51, 0x53, 0x86, 0xf2, 0xa0, 0xaf, 0xd1, 0xef, 0xe8, 0xbf, 0xca, 0x1a, 0x52, 0x48,
	0xa2, 0xa1, 0xb2, 0x39, 0x6a, 0x8f, 0x72, 0x16, 0xb5, 0x40, 0x91, 0xb4, 0x00, 0x00, 0x50, 0x0b,
	0x08, 0xc1, 0x5d, 0x4a, 0x05, 0x77, 0xfa, 0x1e, 0x42, 0xa4, 0x03, 0xa2, 0x9b, 0xf8, 0x63, 0x11,
	0x09, 0x42, 0x24, 0x4c, 0xc3, 0x1a, 0xf7, 0x46, 0xda, 0x8f, 0x58, 0x93, 0x64, 0x38, 0x9d, 0x3c,
	0x3c, 0xd9, 0x24, 0xc9, 0xb5, 0xac, 0x24, 0x87, 0x6a, 0x73, 0x77, 0x29, 0x7f, 0xe3, 0x99, 0x1e,
	0x08, 0x87, 0x89, 0x86, 0x04, 0xa5, 0xf0, 0x27, 0x1b, 0xd0, 0x10, 0x6e, 0x13, 0x3f, 0x15, 0xad,
	0xfe, 0x71, 0x6f, 0x63, 0x00, 0x7d, 0xfd, 0xdd, 0x82, 0x21, 0x36, 0xe0, 0x9f, 0x6c, 0x98, 0x7b,
	0x64, 0x63, 0xb5, 0x79, 0xee, 0xee, 0x61, 0xab, 0xfd, 0xd2, 0x1a, 0xb5, 0x8e, 0x0d, 0x11, 0xc0,
	0x6d, 0x23, 0x08, 0x17, 0xaf, 0xdb, 0xc2, 0x1e, 0x3b, 0xc1, 0x1b, 0x8c, 0xf1, 0x90, 0xcf, 0x8d,
	0x59, 0x98, 0x14, 0xc4, 0x93, 0x89, 0xdb, 0x3c, 0x4a, 0x48, 0x60, 0x99, 0xb5, 0x9d, 0x8d, 0xf6,
	0x71, 0x8f, 0x32, 0x8d, 0xf6, 0xc9, 0x39, 0x29, 0xa6, 0x6d, 0x1c, 0x1f, 0xeb, 0x7f, 0x2a, 0x8d,
	0x23, 0x73, 0xd0, 0x75, 0x76, 0xb0, 0xae, 0xc9, 0x18, 0x01, 0x36, 0x1d, 0x99, 0x86, 0xa1, 0x7f,
	0x33, 0x1b, 0x25, 0xc7, 0x98, 0xd3, 0x75, 0xfd, 0xff, 0xb6, 0xf4, 0x83, 0x46, 0xa6, 0xd1, 0xb2,
	0xc6, 0x26, 0x4f, 0x66, 0x7d, 0xc2, 0x76, 0xd3, 0xec, 0x6f, 0x79, 0x00, 0x2a, 0xe6, 0x8e, 0xcc,
	0x00, 0xe7, 0xf9, 0x42, 0xd4, 0x0a, 0x1d, 0x49, 0x7e, 0xcd, 0x81, 0x10, 0x74, 0x25, 0xf3, 0x37,
	0x4f, 0x95, 0xf4, 0x06, 0xed, 0x11, 0xab, 0x53, 0x4f, 0xb0, 0x56, 0x63, 0xee, 0xfd, 0xd3, 0x60,
	0x60, 0xaf, 0xc6, 0xfa, 0x5d, 0xd2, 0x65, 0xed, 0x14, 0x2f, 0x5c, 0x8d, 0xfe, 0x9f, 0x65, 0xfe,
	0xad, 0xac, 0x30, 0x8d, 0x71, 0xcf, 0x1a, 0x69, 0xc7, 0x52, 0xcf, 0x48, 0x45, 0xbb, 0x7b, 0xf0,
	0x0d, 0xdc, 0x9c, 0x6b, 0x3b, 0x3c, 0xa3, 0x3f, 0xf6, 0xe8, 0x74, 0x68, 0x08, 0x7d, 0x94, 0x06,
	0x99, 0x70, 0x20, 0x35, 0x34, 0xc9, 0x07, 0x17, 0x4e, 0x50, 0x5d, 0xe9, 0xad, 0x35, 0x58, 0xcd,
	0x1c, 0xd9, 0xd6, 0xb8, 0x6d, 0x58, 0x56, 0xb3, 0xa0, 0xdd, 0x65, 0x9a, 0x39, 0xb2, 0xfb, 0x83,
	0x91, 0x6d, 0xf4, 0x07, 0xe3, 0x63, 0xba, 0xf7, 0x6a, 0x16, 0x57, 0xe1, 0xc7, 0x83, 0x5e, 0xa7,
	0x59, 0xd2, 0x4f, 0x44, 0xf8, 0x9b, 0x18, 0xb6, 0x3e, 0x29, 0xa6, 0x92, 0x49, 0x3a, 0x51, 0xb2,
	0x97, 0x8a, 0xf9, 0xec, 0xa5, 0xdf, 0x94, 0x51, 0xed, 0x77, 0x1c, 0x6f, 0x83, 0xa5, 0x9a, 0x4f,
	0x9c, 0x29, 0xad, 0x26, 0xce, 0x64, 0xb1, 0x29, 0xe7, 0xb1, 0xf9, 0x44, 0x39, 0xfa, 0x6d, 0xa3,
	0x77, 0x23, 0x36, 0x22, 0xd9, 0xc8, 0x7a, 0xd7, 0x0e, 0x1b, 0xd0, 0xe7, 0x19, 0x19, 0x23, 0x27,
	0xc6, 0x94, 0x03, 0xd5, 0x19, 0x2e, 0x64, 0x9c, 0x61, 0x61, 0x26, 0x2a, 0x19, 0x19, 0xdc, 0x14,
	0xd4, 0xff, 0x6d, 0x81, 0x3d, 0x54, 0xa9, 0x79, 0x72, 0x6a, 0x8d, 0x0c, 0xb3, 0x3b, 0x18, 0x5b,
	0x64, 0xd1, 0x66, 0xdc, 0xae, 0x42, 0xce, 0xed, 0xca, 0x5d, 0x69, 0x15, 0x57, 0x1e, 0x4f, 0xe1,
	0xc3, 0x0c, 0xf4, 0x65, 0x30, 0x69, 0xb8, 0x94, 0xcd, 0x3a, 0x10, 0x88, 0x9b, 0x8c, 0x1a, 0xe1,
	0x22, 0xbe, 0x07, 0x56, 0xcf, 0x7c, 0x31, 0xf3, 0x12, 0xca, 0x1a, 0xc6, 0xe4, 0x98, 0x75, 0x9d,
	0x76, 0x44, 0x33, 0xcc, 0x3e, 0x76, 0xc4, 0x32, 0xc8, 0x93, 0xc9, 0x2f, 0x83, 0x12, 0x37, 0x45,
	0x0f, 0x97, 0x3f, 0xec, 0xa9, 0xfb, 0x71, 0x5b, 0x80, 0x6e, 0x5c, 0x8c, 0x3e, 0xce, 0x19, 0xff,
	0xf9, 0x39, 0x56, 0x30, 0x2f, 0xbd, 0x13, 0xe6, 0x3f, 0x2d, 0x0a, 0xbb, 0xb6, 0x65, 0x1a, 0xfd,
	0x96, 0x54, 0xb6, 0x79, 0x84, 0x0a, 0x2b, 0xd4, 0xc5, 0x40, 0x00, 0x8a, 0x5e, 0xc7, 0x75, 0xa5,
	0xe8, 0x45, 0x48, 0xcb, 0x45, 0xcb, 0xe8, 0x8d, 0xbf, 0xc0, 0x3a, 0xda, 0xd7, 0x5b, 0x6f, 0xfc,
	0x05, 0x54, 0x3c, 0x65, 0xcd, 0x99, 0x13, 0x27, 0xb6, 0x3a, 0x3a, 0x89, 0xa8, 0x5d, 0x80, 0xb7,
	0xd2, 0x19, 0xc0, 0x67, 0x0d, 0x5d, 0xe7, 0xca, 0x9e, 0x3b, 0x97, 0x76, 0xfa, 0x94, 0xa8, 0x62,
	0x36, 0x10, 0x7c, 0xe2, 0x5c, 0xca, 0x76, 0xd0, 0x42, 0x1d, 0x90, 0x5b, 0x99, 0x73, 0xe7, 0x52,
	0x19, 0x4f, 0xa8, 0xfd, 0x6d, 0x45, 0xed, 0xc3, 0xd6, 0xf7, 0x13, 0x0f, 0xf1, 0xac, 0xf2, 0xad,
	0xef, 0x27, 0x9e, 0xc8, 0x04, 0xc1, 0x97, 0x7f, 0x50, 0x57, 0x13, 0x61, 0x90, 0x65, 0x90, 0x40,
	0x25, 0x78, 0xbf, 0xa2, 0xd2, 0x0e, 0xbc, 0xcb, 0x84, 0xbf, 0x0b, 0xda, 0x11, 0x2d, 0xfa, 0xde,
	0x65, 0xa2, 0xdf, 0x16, 0xc2, 0x82, 0x88, 0x8b, 0xbb, 0x43, 0x7f, 0xcd, 0x3e, 0xc8, 0xdc, 0x8b,
	0xb5, 0xda, 0x2f, 0xba, 0xc6, 0x2b, 0xe3, 0xc4, 0xe8, 0x8f, 0xec, 0x51, 0x77, 0xb4, 0x59, 0xe9,
	0x7e, 0x8b, 0xdd, 0x5a, 0x79, 0xf8, 0xc7, 0x4f, 0x55, 0x33, 0xff, 0xea, 0x4f, 0xff, 0xed, 0xa2,
	0xb8, 0xa7, 0xa1, 0xf9, 0x5b, 0xed, 0x51, 0xf7, 0x55, 0x77, 0x74, 0xfa, 0x6e, 0x0c, 0xce, 0xac,
	0xbf, 0x98, 0x5b, 0xff, 0x3a, 0x2e, 0x96, 0xd6, 0x72, 0xf1, 0x21, 0xab, 0xa5, 0xfc, 0x2b, 0xf3,
	0x48, 0xb5, 0x60, 0x9d, 0x60, 0x49, 0x45, 0x61, 0xc9, 0x13, 0xb6, 0x8b, 0xef, 0x67, 0xd2, 0xc9,
	0x89, 0x9b, 0x3b, 0x00, 0x6d, 0x0b, 0x04, 0x94, 0xfd, 0xb5, 0x9d, 0xd9, 0x5f, 0xf7, 0x59, 0x15,
	0x0e, 0xdb, 0x2c, 0x8c, 0x45, 0x06, 0xf4, 0xb6, 0x1f, 0xb7, 0xa1, 0xa8, 0xff, 0x82, 0xb0, 0x4d,
	0x0e, 0xc7, 0xa7, 0x3c, 0x53, 0x1d, 0x24, 0x60, 0x5f, 0xfb, 0x80, 0xd5, 0xcf, 0x96, 0x57, 0xf2,
	0x65, 0x64, 0x41, 0xe4, 0xee, 0x5e, 0xd1, 0xb3, 0x48, 0xfd, 0x85, 0xd0, 0x8b, 0xf9, 0x8e, 0xd7,
	0x85, 0xd0, 0xee, 0xb1, 0x6d, 0x31, 0x18, 0xf7, 0x0b, 0x62, 0x1a, 0xe9, 0x39, 0x71, 0x44, 0xde,
	0xc6, 0xaa, 0x83, 0x29, 0x9d, 0x0a, 0x99, 0x4e, 0x07, 0x82, 0x8d, 0x6b, 0x3a, 0x5d, 0x67, 0x7c,
	0x84, 0xec, 0x43, 0x8e, 0x32, 0xcf, 0x83, 0x5f, 0x3f, 0xe1, 0xbb, 0xc5, 0x3c, 0x1b, 0x19, 0x8f,
	0x47, 0x20, 0x59, 0xca, 0x20, 0xf9, 0x1d, 0x19, 0x41, 0x39, 0x4c, 0x5f, 0x94, 0x06, 0xe7, 0xe1,
	0xf5, 0xcb, 0xfa, 0x15, 0xe9, 0x52, 0x67, 0x3a, 0x69, 0x1d, 0xd6, 0xcc, 0x3c, 0x55, 0xa5, 0x07,
	0x5f, 0x2b, 0x91, 0x92, 0xec, 0x34, 0xe2, 0x02, 0x59, 0x94, 0xf5, 0x47, 0x22, 0xff, 0xc6, 0x34,
	0xac, 0xee, 0x71, 0x7f, 0x3c, 0xcc, 0x1d, 0x02, 0xfd, 0x33, 0x91, 0x4c, 0x73, 0x4d, 0x83, 0x1b,
	0xaf, 0xe9, 0xf4, 0x9f, 0x08, 0x5b, 0xb2, 0x63, 0x0e, 0xc0, 0x76, 0x35, 0x3b, 0x6a, 0x5e, 0x25,
	0xe7, 0x07, 0xe5, 0x55, 0xde, 0x90, 0x02, 0x3b, 0x01, 0xdf, 0x57, 0xdc, 0xa2, 0x43, 0x95, 0x13,
	0xa1, 0x82, 0xfc, 0xef, 0xe9, 0x25, 0x7a, 0xcb, 0xec, 0x88, 0x98, 0xc3, 0xb5, 0x17, 0x2c, 0x77,
	0x58, 0x05, 0x7a, 0xc6, 0x18, 0x68, 0xa8, 0x98, 0x54, 0xc0, 0xa0, 0x73, 0x78, 0xe1, 0x45, 0xea,
	0x85, 0x6f, 0x0d, 0x21, 0x22, 0x35, 0x44, 0x75, 0xe2, 0xcb, 0x2b, 0x4e, 0xfc, 0x43, 0x56, 0xe3,
	0x0d, 0x78, 0x0a, 0x6b, 0xc5, 0xac, 0x12, 0x80, 0xec, 0x25, 0x5e, 0x29, 0xde, 0x2c, 0xe0, 0xad,
	0xe3, 0x5b, 0x5a, 0x40, 0xfa, 0xa0, 0x78, 0x1b, 0x73, 0xdc, 0xd6, 0x3d, 0x28, 0xd6, 0xff, 0x92,
	0xc8, 0x81, 0xb5, 0xad, 0xde, 0x60, 0x64, 0x0f, 0x7b, 0xad, 0x53, 0xc3, 0xb4, 0x87, 0xe6, 0xe0,
	0xd8, 0x34, 0x2c, 0xeb, 0x06, 0x17, 0x44, 0xd5, 0x97, 0xfc, 0x11, 0xfb, 0x43, 0x46, 0x59, 0xc2,
	0xa0, 0x37, 0xc4, 0xdd, 0x18, 0x02, 0x4e, 0x9c, 0xcb, 0x6c, 0xe2, 0xab, 0xc2, 0x20, 0xfd, 0x7f,
	0xa5, 0x37, 0x2b, 0x80, 0x05, 0x77, 0xf8, 0x36, 0xd3, 0x1b, 0x9f, 0x95, 0x4c, 0x05, 0x65, 0xb9,
	0x0e, 0x44, 0x48, 0xee, 0x46, 0x95, 0x8c, 0xdd, 0x4c, 0x58, 0x89, 0x5e, 0x5c, 0x65, 0x68, 0x5b,
	0x46, 0xae, 0xa5, 0xb4, 0xbd, 0x31, 0xbc, 0x72, 0x03, 0xf1, 0x1f, 0xb1, 0xfa, 0x22, 0x7c, 0x8b,
	0x6f, 0x26, 0x61, 0x7a, 0x92, 0x93, 0x0c, 0x41, 0x64, 0x6a, 0xff, 0x9a, 0x20, 0xbc, 0x08, 0x28,
	0x89, 0x6b, 0x82, 0xc1, 0xd0, 0xe8, 0x67, 0x71, 0x2b, 0xe4, 0xf8, 0x9e, 0xe2, 0x16, 0x89, 0x07,
	0x78, 0x12, 0x37, 0xd3, 0x49, 0x32, 0xdb, 0x2a, 0x7d, 0x6c, 0x2d, 0x90, 0xf7, 0xe7, 0x9e, 0xfe,
	0xd7, 0x45, 0xa6, 0x31, 0x5e, 0xc2, 0xe5, 0x30, 0xb8, 0x9e, 0xe6, 0x1b, 0x3d, 0xfb, 0x1b, 0x93,
	0x1b, 0xb2, 0x14, 0x2b, 0xe7, 0x28, 0xa6, 0xff, 0x57, 0x69, 0x0e, 0x59, 0xa7, 0xfd, 0xb6, 0x3d,
	0xa2, 0xe4, 0x86, 0x56, 0xfb, 0x86, 0x7c, 0x7c, 0x79, 0x7c, 0x8b, 0x99, 0xe3, 0x9b, 0xee, 0xcf,
	0xd2, 0xb5, 0xfb, 0xb3, 0x9c, 0xdb, 0x9f, 0x50, 0x39, 0x73, 0xe6, 0x14, 0xf8, 0xae, 0xf0, 0x2c,
	0xe9, 0x99, 0x33, 0xc7, 0xb0, 0x77, 0xaa, 0xb3, 0xf1, 0xa1, 0xdc, 0x96, 0xaa, 0xb3, 0xf1, 0xa1,
	0xdc, 0xc7, 0x6c, 0x8f, 0x1a, 0xa0, 0xf2, 0x74, 0xc3, 0xb7, 0x81, 0x78, 0x14, 0x86, 0xe0, 0xb6,
	0x80, 0x82, 0x92, 0x45, 0xfd, 0x9d, 0x92, 0xb2, 0x8a, 0xa4, 0xdc, 0x01, 0xe8, 0x58, 0x90, 0x53,
	0x68, 0x79, 0xc4, 0x88, 0xa8, 0xc4, 0xd3, 0x85, 0xb1, 0xb7, 0x35, 0x73, 0xe6, 0x3c, 0x12, 0xfb,
	0x3e, 0x23, 0x34, 0x08, 0x6f, 0xfe, 0x4a, 0x0c, 0x21, 0x80, 0xb8, 0xfe, 0x37, 0x0a, 0xec, 0x1e,
	0x66, 0x89, 0xc6, 0x7e, 0x10, 0x9a, 0x4e, 0x70, 0x31, 0xc4, 0x47, 0xf7, 0x42, 0x3f, 0xac, 0xe7,
	0xf4, 0x9a, 0xf8, 0xfa, 0xf5, 0x14, 0x4d, 0x17, 0x52, 0xce, 0xed, 0x09, 0xe5, 0xfb, 0x11, 0x3c,
	0x45, 0x80, 0xbe, 0x1f, 0xa1, 0x7f, 0x21, 0xd2, 0x0f, 0xdb, 0x2d, 0xab, 0xdb, 0x1f, 0x70, 0xf1,
	0x8f, 0x11, 0x99, 0x3f, 0xcb, 0xea, 0xfc, 0x93, 0x01, 0x4a, 0x30, 0xe6, 0xbd, 0x34, 0xd9, 0x75,
	0x75, 0x19, 0x26, 0xa3, 0x0e, 0x18, 0x92, 0xf9, 0x87, 0x05, 0x76, 0x2b, 0x71, 0xa6, 0xd0, 0x82,
	0xee, 0x41, 0xbe, 0xaa, 0x85, 0x6a, 0xac, 0x8c, 0xe1, 0x00, 0xda, 0x35, 0xf8, 0x3b, 0xbb, 0xf8,
	0x4a, 0x6e, 0xf1, 0x99, 0xef, 0x89, 0xd0, 0x7e, 0x91, 0xdf, 0x13, 0xd1, 0xff, 0x75, 0x51, 0x50,
	0x20, 0x5d, 0xba, 0xb8, 0x1c, 0x7c, 0xc6, 0xb6, 0x16, 0x33, 0x67, 0xe2, 0x7d, 0xca, 0xdf, 0x5a,
	0xdf, 0x95, 0xef, 0xc2, 0x33, 0x8b, 0x32, 0x79, 0x2b, 0xd9, 0xfe, 0x00, 0x57, 0x71, 0x53, 0xfb,
	0x03, 0xd9, 0xfe, 0x39, 0xcf, 0x7e, 0xde, 0xdc, 0xfe, 0xb9, 0x6c, 0xff, 0x5d, 0x5c, 0xfb, 0x4d,
	0xed, 0xbf, 0x2b, 0xdb, 0x7f, 0x0f, 0x49, 0x72, 0x53, 0xfb, 0xef, 0x69, 0x9f, 0xb0, 0xed, 0xf9,
	0x15, 0x5e, 0xcb, 0x20, 0x99, 0x36, 0x74, 0x98, 0x5f, 0x01, 0x44, 0xff, 0x8b, 0x32, 0x90, 0xd4,
	0x6b, 0x9d, 0xe0, 0xbd, 0x6a, 0xf6, 0xec, 0x16, 0x72, 0x67, 0x77, 0xf5, 0xc4, 0x15, 0xdf, 0xf1,
	0xc4, 0x95, 0xd6, 0x9d, 0x38, 0x3d, 0x4e, 0x5d, 0xf9, 0x74, 0xf7, 0xe6, 0x25, 0x44, 0x61, 0x45,
	0x42, 0xa0, 0xdb, 0x06, 0x86, 0x35, 0x0a, 0x07, 0x7e, 0xc9, 0x8a, 0x90, 0x0e, 0xc8, 0x85, 0xec,
	0x39, 0x2e, 0xe5, 0xcf, 0xf1, 0xab, 0x54, 0x47, 0xf2, 0x45, 0x73, 0x75, 0x9d, 0xdd, 0x85, 0x85,
	0x55, 0xb1, 0xac, 0x2e, 0x88, 0xe7, 0x4c, 0xc4, 0xe9, 0x62, 0x7e, 0x4f, 0x86, 0xca, 0x30, 0xdd,
	0xd1, 0x1c, 0x8c, 0x7b, 0xc6, 0x68, 0x64, 0x6c, 0xcc, 0x2c, 0xca, 0xdc, 0x18, 0x90, 0xc1, 0x93,
	0x49, 0x71, 0x79, 0xc4, 0xea, 0x98, 0x90, 0x23, 0xef, 0x74, 0xa0, 0x05, 0x43, 0x10, 0x35, 0xf8,
	0x3a, 0xdb, 0x8d, 0xc2, 0xe5, 0xcc, 0xc3, 0x2f, 0x2d, 0xa0, 0x92, 0x2a, 0xf3, 0xcb, 0x09, 0x01,
	0x45, 0x3d, 0xf5, 0x90, 0xd4, 0x94, 0x88, 0x20, 0x65, 0x10, 0xd4, 0x7f, 0x59, 0xe8, 0xb0, 0x35,
	0x95, 0xd7, 0x7a, 0x07, 0xab, 0x13, 0x17, 0xd7, 0x4d, 0xfc, 0x7d, 0x3a, 0x9d, 0xed, 0xec, 0xa8,
	0x22, 0x55, 0x29, 0x4d, 0x38, 0x2a, 0xe4, 0x12, 0x8e, 0xfe, 0x4e, 0x41, 0x1c, 0xeb, 0xd5, 0x8e,
	0x1b, 0xf2, 0x8e, 0x56, 0x49, 0xba, 0x92, 0x35, 0x94, 0x46, 0xef, 0xd4, 0x54, 0x27, 0x6e, 0x25,
	0x53, 0xa6, 0xd6, 0x43, 0x56, 0x83, 0x15, 0x51, 0xb2, 0x10, 0x4f, 0x8b, 0x05, 0x00, 0x26, 0x0b,
	0xfd, 0x50, 0xf8, 0x51, 0x66, 0xab, 0xdf, 0x19, 0x9c, 0xa4, 0xf7, 0x58, 0xe2, 0xb9, 0x3e, 0x06,
	0x8a, 0xba, 0x1d, 0xb1, 0x6f, 0xc5, 0x8b, 0x9b, 0x6e, 0x27, 0xe5, 0x42, 0xae, 0x2b, 0xac, 0x4a,
	0xff, 0x03, 0x79, 0x35, 0xba, 0x5a, 0x8b, 0x21, 0x7b, 0x40, 0xdc, 0x09, 0xdc, 0x70, 0xce, 0xd7,
	0xc6, 0xdf, 0xa8, 0x11, 0x6c, 0xfd, 0xda, 0x8a, 0xab, 0x6b, 0x93, 0x46, 0x40, 0xb7, 0x23, 0x0d,
	0x75, 0xfe, 0x8a, 0x3f, 0xbf, 0x80, 0xf2, 0xca, 0x02, 0x7e, 0x8d, 0x3d, 0x11, 0x31, 0xa2, 0x96,
	0x65, 0x75, 0xdb, 0xf6, 0xd0, 0xec, 0xfe, 0xb2, 0x41, 0x67, 0x88, 0xc7, 0x74, 0x60, 0x0f, 0xc9,
	0xa7, 0x82, 0x89, 0x13, 0x09, 0x0e, 0x39, 0xae, 0x6b, 0x25, 0x4e, 0x84, 0xe6, 0x26, 0x3d, 0x92,
	0x82, 0x4a, 0xf1, 0xe9, 0x08, 0x7c, 0x23, 0x05, 0xd5, 0x6a, 0x8e, 0x48, 0x29, 0x93, 0x23, 0xa2,
	0xff, 0x66, 0x81, 0x82, 0x0e, 0xed, 0x75, 0xb3, 0x63, 0x2e, 0x9f, 0xf6, 0x8b, 0xac, 0xac, 0xc4,
	0x76, 0xbf, 0x25, 0x63, 0xbb, 0xd7, 0x77, 0x79, 0x76, 0xe8, 0x61, 0x50, 0xd7, 0xc4, 0x8e, 0xfa,
	0x53, 0xb6, 0xcd, 0x01, 0x5a, 0x8d, 0x55, 0xac, 0xb9, 0x33, 0x9b, 0x35, 0x7f, 0x4e, 0xdb, 0x66,
	0xa5, 0x43, 0x7f, 0xda, 0x2c, 0x00, 0xac, 0xb7, 0x9c, 0x5c, 0x5c, 0x35, 0x8b, 0xfa, 0xff, 0x29,
	0xc8, 0x10, 0xc8, 0x75, 0xd8, 0xb4, 0x33, 0x47, 0xe7, 0x4b, 0xe2, 0x23, 0xce, 0xd9, 0x1d, 0x56,
	0x71, 0x7d, 0x50, 0x61, 0xfc, 0xf2, 0x13, 0x0b, 0x02, 0x2a, 0xee, 0xba, 0xa9, 0xb0, 0x92, 0xcf,
	0x5f, 0x5e, 0xcd, 0xe7, 0xa7, 0x0c, 0x7c, 0x5b, 0xfd, 0xa8, 0x4d, 0x75, 0xb2, 0x8c, 0x44, 0x10,
	0x6a, 0xf7, 0x6c, 0xb0, 0xf0, 0x82, 0xd1, 0x32, 0x0a, 0x16, 0x33, 0x61, 0x9d, 0x55, 0xcd, 0x1c,
	0x54, 0x7f, 0xc2, 0xf4, 0xcd, 0xab, 0x00, 0x6b, 0x58, 0xff, 0xe3, 0x02, 0x35, 0xb3, 0x36, 0x36,
	0xd3, 0x8e, 0x72, 0x54, 0x7a, 0xa6, 0x44, 0xe4, 0x37, 0x75, 0x7c, 0xc6, 0xaf, 0x92, 0x04, 0xa1,
	0x50, 0x50, 0x29, 0xa2, 0x99, 0x97, 0x30, 0x01, 0xde, 0x0f, 0x32, 0x5f, 0x0b, 0xaa, 0xbe, 0xf5,
	0x03, 0xca, 0xd3, 0x7f, 0xc2, 0xb6, 0xf8, 0x3d, 0xdc, 0x2e, 0x63, 0xd6, 0x72, 0x32, 0xf1, 0xe2,
	0xf8, 0x7c, 0x09, 0x3c, 0x67, 0x6c, 0xeb, 0xc8, 0xf1, 0x67, 0x9e, 0xdb, 0x2c, 0xe8, 0x8f, 0xe9,
	0x72, 0x71, 0xfd, 0x7a, 0x8d, 0x11, 0xee, 0x79, 0xfd, 0xbf, 0x15, 0xc5, 0x15, 0xe4, 0x86, 0x56,
	0x60, 0xfc, 0xc8, 0x53, 0xd1, 0x30, 0xf1, 0x37, 0x30, 0x93, 0x3e, 0xb3, 0xc4, 0x59, 0x8c, 0x05,
	0x38, 0x09, 0xfc, 0x53, 0x4f, 0x11, 0xca, 0xfd, 0x86, 0xb9, 0x3d, 0xc7, 0xef, 0x3b, 0x45, 0x22,
	0x1c, 0x45, 0x9d, 0xe8, 0xe9, 0x63, 0x75, 0xee, 0x5c, 0xe2, 0x47, 0x89, 0x30, 0x22, 0x9f, 0x38,
	0x91, 0xbd, 0x5c, 0xcc, 0xfc, 0xb9, 0x2f, 0x9e, 0x7d, 0xd4, 0x01, 0x36, 0x26, 0x10, 0x26, 0x43,
	0x8a, 0x94, 0x56, 0x91, 0xd9, 0x20, 0xf2, 0x59, 0xd3, 0x7c, 0x57, 0x4e, 0x4d, 0xb2, 0xbd, 0x29,
	0xdf, 0x95, 0x1b, 0xca, 0xdf, 0x60, 0x7b, 0xd4, 0x04, 0xb0, 0x20, 0xc2, 0x52, 0x7e, 0x4d, 0x03,
	0xc1, 0x27, 0xce, 0x25, 0x3d, 0x12, 0x78, 0xc2, 0x76, 0x79, 0x3b, 0xb1, 0x10, 0x32, 0xbc, 0x69,
	0x82, 0x13, 0xbe, 0x1a, 0x9d, 0x35, 0x92, 0x65, 0x14, 0xa4, 0x8d, 0xc8, 0xf2, 0xae, 0x03, 0x90,
	0xb7, 0xd1, 0x7f, 0x20, 0x12, 0x28, 0x0f, 0xc7, 0xa7, 0xf6, 0xc9, 0xa0, 0x6f, 0xe1, 0x37, 0x75,
	0xde, 0x25, 0xec, 0xd5, 0x15, 0xda, 0x7e, 0xa5, 0xe7, 0x97, 0x8e, 0x7b, 0x7d, 0x57, 0x88, 0x6f,
	0x1e, 0x86, 0xca, 0x8c, 0x76, 0x6d, 0x84, 0xa8, 0x27, 0xb4, 0xeb, 0xba, 0x5e, 0x5f, 0x1a, 0x87,
	0x85, 0xd8, 0x64, 0xb9, 0x90, 0x58, 0x1e, 0x97, 0xaf, 0x2e, 0x26, 0xd6, 0x67, 0x77, 0x79, 0xb0,
	0xea, 0x84, 0xbe, 0xa1, 0x70, 0x63, 0x50, 0x8c, 0x52, 0x35, 0xcf, 0x15, 0xb3, 0xa0, 0x6c, 0x56,
	0x01, 0x80, 0x16, 0xc1, 0x4f, 0x84, 0xfe, 0xcc, 0x0d, 0xa9, 0x1d, 0xb3, 0x5b, 0xe2, 0xd3, 0x0d,
	0xf9, 0x98, 0xd9, 0x43, 0x35, 0x66, 0x96, 0x43, 0xc3, 0xdc, 0x9b, 0x67, 0x01, 0x7a, 0x92, 0x7b,
	0x92, 0x65, 0xb5, 0x5e, 0x75, 0xfb, 0xc7, 0xf6, 0x70, 0x30, 0xca, 0x8a, 0xbf, 0x42, 0x4e, 0xfc,
	0x89, 0x4a, 0xe5, 0x6b, 0x3c, 0x58, 0x99, 0xf0, 0x50, 0x00, 0x1e, 0x9e, 0xcc, 0x83, 0x59, 0x86,
	0x20, 0xba, 0xdc, 0xf8, 0xbb, 0x05, 0x11, 0xe1, 0x1c, 0x1a, 0xa6, 0x35, 0xe8, 0xb7, 0x7a, 0x74,
	0xf4, 0xf1, 0xba, 0x54, 0x67, 0x3b, 0x0b, 0x2f, 0x8a, 0xc3, 0xc0, 0x99, 0x49, 0xc3, 0xba, 0x6c,
	0x66, 0x60, 0xda, 0x3e, 0xdb, 0xbe, 0xf0, 0x67, 0xb3, 0xcc, 0x15, 0x13, 0x16, 0xb5, 0x0f, 0x18,
	0x83, 0x9f, 0x73, 0xe7, 0x32, 0x7d, 0xa4, 0xa2, 0x40, 0xa0, 0x1e, 0x0c, 0x6b, 0x7e, 0x60, 0xcb,
	0x38, 0xb6, 0x02, 0x49, 0xc3, 0x88, 0x02, 0x33, 0xca, 0xe5, 0xa2, 0x30, 0x09, 0xd8, 0x1e, 0x9f,
	0x89, 0x18, 0x4a, 0x16, 0x75, 0xa2, 0xdf, 0x5a, 0xe4, 0x1b, 0x59, 0xe4, 0xf5, 0xdf, 0x29, 0xae,
	0x1f, 0x82, 0x47, 0x42, 0xb2, 0xfb, 0xbc, 0xa1, 0x6a, 0xb7, 0x34, 0xf8, 0x55, 0x56, 0x3c, 0x44,
	0x69, 0xba, 0x97, 0x4d, 0xfc, 0xad, 0x3d, 0x60, 0xd5, 0x33, 0x27, 0xf6, 0x30, 0x50, 0xc3, 0x93,
	0xb8, 0x44, 0x19, 0x28, 0x17, 0x7b, 0x13, 0xac, 0xe2, 0x39, 0x5c, 0xbc, 0x88, 0xf3, 0xd2, 0xf7,
	0xed, 0xf8, 0x17, 0x30, 0xf9, 0xd7, 0xed, 0xd0, 0x45, 0x88, 0x6c, 0x5e, 0xb7, 0x8d, 0x22, 0xb4,
	0xe6, 0x44, 0x91, 0x49, 0xd5, 0x1f, 0xb0, 0x3a, 0x88, 0xb6, 0xe5, 0x82, 0x02, 0x43, 0x24, 0xdc,
	0x40, 0xe6, 0x8e, 0x17, 0x18, 0x17, 0xd2, 0x59, 0x03, 0x33, 0xf6, 0x9d, 0xd8, 0xa3, 0x16, 0x24,
	0xd7, 0xa0, 0xd3, 0xa1, 0x13, 0x7b, 0xf8, 0xce, 0xb6, 0x43, 0xde, 0xc0, 0xb1, 0x29, 0x02, 0x31,
	0xf4, 0x28, 0x50, 0xae, 0xb8, 0xa0, 0xae, 0xf8, 0xba, 0x8f, 0x6c, 0xea, 0x17, 0x2b, 0xb7, 0xd9,
	0xfc, 0xd9, 0xe2, 0x53, 0xd6, 0x84, 0xcd, 0x9a, 0x79, 0x9f, 0x28, 0xf2, 0x0b, 0x96, 0x91, 0x91,
	0x3e, 0x51, 0x84, 0x96, 0x80, 0xec, 0x9a, 0x97, 0x8c, 0xbb, 0x73, 0xe7, 0x52, 0x69, 0xa9, 0xff,
	0x8b, 0x75, 0x77, 0xe7, 0xc8, 0xbf, 0x35, 0x49, 0x6a, 0xd9, 0x98, 0xd4, 0x63, 0xc6, 0xd3, 0xa1,
	0xc4, 0xeb, 0x55, 0x9e, 0xf0, 0x4f, 0x40, 0x7a, 0xbb, 0xfa, 0x2e, 0xb1, 0xc4, 0x4c, 0x0a, 0x8b,
	0xfc, 0xa4, 0xa7, 0x2a, 0xb7, 0x2a, 0xd9, 0x1b, 0xdc, 0x6f, 0xcb, 0x4f, 0x25, 0xf4, 0x8c, 0x96,
	0x29, 0x5f, 0x90, 0x22, 0x16, 0x4a, 0xa0, 0x0b, 0xcb, 0x5d, 0x57, 0xff, 0x0f, 0x32, 0x60, 0xf7,
	0xf9, 0xc0, 0xec, 0x75, 0xc8, 0xbb, 0xe8, 0x0c, 0xf8, 0x25, 0xf2, 0x5d, 0xb6, 0x75, 0x16, 0xc6,
	0x71, 0x37, 0xfd, 0x50, 0x22, 0x96, 0x34, 0x23, 0xf7, 0x34, 0x6d, 0xf7, 0xe0, 0x9b, 0x8a, 0x95,
	0xb2, 0x66, 0xa4, 0x67, 0x87, 0x61, 0x1c, 0xd3, 0x57, 0x03, 0x3a, 0xe9, 0xcd, 0x75, 0x9f, 0xd5,
	0x15, 0xb8, 0xd6, 0x60, 0xb5, 0x43, 0xab, 0xdb, 0xb1, 0xdb, 0xad, 0x5e, 0xaf, 0x59, 0x90, 0x45,
	0x6b, 0x34, 0x18, 0x36, 0x8b, 0xda, 0x1e, 0xab, 0x63, 0xf1, 0x73, 0xa3, 0xf5, 0xd2, 0xe8, 0x37,
	0x4b, 0x5a, 0x93, 0xed, 0x20, 0x60, 0x68, 0x0e, 0x46, 0x46, 0x7b, 0xd4, 0x2c, 0xeb, 0xbf, 0x42,
	0xdf, 0x79, 0x82, 0xe1, 0x38, 0x85, 0xef, 0xb0, 0x0a, 0x12, 0x46, 0x64, 0xf2, 0x61, 0x01, 0x96,
	0xa5, 0x70, 0xa5, 0x61, 0xf2, 0x92, 0xf6, 0x1e, 0xab, 0xd1, 0x2f, 0xff, 0x8d, 0x78, 0xdc, 0x98,
	0x02, 0xf4, 0xbf, 0x9f, 0x7e, 0x1a, 0x0e, 0x9f, 0x1a, 0x1b, 0x47, 0x47, 0x46, 0x7b, 0x74, 0x2d,
	0x8d, 0x3e, 0x63, 0x15, 0x5c, 0xe7, 0xcf, 0x40, 0x20, 0xea, 0xa8, 0x7d, 0x9b, 0x11, 0x9b, 0x92,
	0x98, 0x5f, 0xfc, 0xa6, 0xaf, 0xc9, 0xd3, 0x25, 0x9a, 0xa2, 0x8d, 0xfe, 0x9f, 0x64, 0xc8, 0x7d,
	0x68, 0x19, 0xdd, 0xce, 0xa0, 0x6f, 0x5b, 0x2f, 0xba, 0x46, 0xaf, 0x63, 0xbf, 0x6a, 0xf5, 0xc6,
	0xc6, 0xb5, 0x78, 0xde, 0x61, 0x95, 0xf4, 0x0c, 0x34, 0x4c, 0x2a, 0x68, 0x1d, 0x10, 0x50, 0x4e,
	0x1c, 0x06, 0x48, 0x87, 0xdd, 0x83, 0x9f, 0x57, 0xd0, 0x5f, 0x37, 0xfc, 0xb3, 0x31, 0xbe, 0x4b,
	0x35, 0xb1, 0x8f, 0xc9, 0xfb, 0xea, 0x3f, 0x62, 0x3b, 0x2a, 0x1c, 0x58, 0x3a, 0x36, 0xed, 0xb6,
	0x69, 0xb4, 0x46, 0x06, 0x71, 0x78, 0x6c, 0xf2, 0x8f, 0xac, 0x35, 0x8b, 0x60, 0x72, 0x8e, 0x4d,
	0xbb, 0x63, 0x58, 0x23, 0x73, 0x70, 0xda, 0x2c, 0xe9, 0x43, 0x61, 0xaa, 0x88, 0x09, 0x81, 0xf5,
	0x7d, 0xf0, 0x24, 0xae, 0x5b, 0xcb, 0x07, 0x4c, 0x7e, 0x87, 0xc3, 0x8b, 0xf9, 0xc3, 0x6e, 0x05,
	0x92, 0x26, 0x1c, 0x8a, 0x91, 0x6c, 0xe3, 0x8b, 0x61, 0x6f, 0xd0, 0xb9, 0x9e, 0x3a, 0x0f, 0x58,
	0x55, 0xf4, 0x17, 0x2a, 0x50, 0x94, 0xb3, 0xe1, 0x3c, 0x99, 0x5e, 0xf6, 0x7d, 0xf1, 0x16, 0x81,
	0xe7, 0x5c, 0x99, 0xc6, 0xb0, 0xd5, 0x35, 0xf1, 0xf1, 0xf1, 0xcc, 0x9f, 0x5c, 0xf0, 0x04, 0x1e,
	0x9e, 0xd5, 0x89, 0x20, 0x4a, 0xe0, 0xf1, 0x45, 0xb4, 0x24, 0xdb, 0x6f, 0xfd, 0x0e, 0x46, 0xf9,
	0xb3, 0x00, 0x09, 0xa0, 0x64, 0xaf, 0x33, 0x02, 0xc9, 0x97, 0xac, 0x81, 0xfa, 0xcc, 0xb5, 0x61,
	0x56, 0x01, 0x80, 0x26, 0xc7, 0x27, 0x42, 0xac, 0x01, 0x19, 0x78, 0x32, 0x20, 0xde, 0x1f, 0x5f,
	0x43, 0x05, 0xfd, 0x27, 0xf2, 0xc3, 0x78, 0x74, 0x8f, 0x93, 0x39, 0x00, 0x77, 0xc4, 0x46, 0xe7,
	0x18, 0xae, 0x6c, 0xde, 0xe2, 0x3b, 0x6c, 0xde, 0xff, 0x59, 0x48, 0xcf, 0x2e, 0xcf, 0x93, 0xf9,
	0x85, 0x8c, 0xf3, 0xfa, 0x38, 0xd3, 0x9d, 0x9a, 0x3c, 0x53, 0x86, 0x4a, 0x9d, 0x56, 0xfc, 0x2e,
	0xdf, 0x32, 0x8a, 0x3c, 0xf9, 0x29, 0x46, 0x51, 0x84, 0x9a, 0xb9, 0x73, 0xe9, 0xcf, 0xa5, 0xd5,
	0x20, 0x8a, 0xfa, 0x82, 0xed, 0xe5, 0x06, 0xd3, 0x76, 0x58, 0xd5, 0x32, 0x46, 0x76, 0x7f, 0xdc,
	0xeb, 0x35, 0x7f, 0x4e, 0x94, 0x50, 0x18, 0x15, 0xd0, 0x3b, 0x32, 0x46, 0x42, 0x16, 0xa1, 0x70,
	0x82, 0xb2, 0x10, 0x45, 0x25, 0x01, 0x38, 0xe9, 0x5a, 0x56, 0xb7, 0x67, 0x34, 0xcb, 0x02, 0x30,
	0x32, 0xbb, 0x1d, 0xa3, 0x3f, 0x6a, 0x56, 0xf4, 0x53, 0x76, 0x27, 0x71, 0xa6, 0x14, 0x6c, 0x56,
	0x97, 0xbd, 0x9e, 0xe1, 0xdf, 0x62, 0x5b, 0x3c, 0xa3, 0x68, 0x1d, 0x35, 0xa9, 0xab, 0xc9, 0x9b,
	0xe8, 0xfd, 0xb5, 0xec, 0xe2, 0x49, 0x9f, 0x9f, 0xca, 0x91, 0xc8, 0x96, 0xbc, 0x2f, 0x46, 0x5a,
	0x41, 0x45, 0x8e, 0x17, 0x8a, 0x3b, 0x76, 0xd4, 0xdb, 0xf4, 0xa2, 0x1f, 0xbf, 0x14, 0xf9, 0x90,
	0xd5, 0xe2, 0xcc, 0x27, 0x22, 0x1b, 0x66, 0x35, 0x56, 0x3f, 0x0e, 0x89, 0x5f, 0x6a, 0x54, 0x9e,
	0xbc, 0x91, 0xe3, 0x05, 0xf2, 0x20, 0xe7, 0xa3, 0x52, 0x52, 0x3f, 0x2f, 0xe9, 0xff, 0xa8, 0x28,
	0x76, 0x68, 0x7e, 0xc6, 0x1f, 0x64, 0x36, 0xc5, 0x13, 0x45, 0x2a, 0xe5, 0x5a, 0x3e, 0x93, 0x5f,
	0xa9, 0xe4, 0xbb, 0x42, 0xd2, 0xb5, 0xa8, 0xd2, 0x35, 0x8f, 0x64, 0x69, 0x15, 0xc9, 0xdc, 0xed,
	0xa2, 0xfc, 0xac, 0x8e, 0x82, 0x7d, 0x25, 0x83, 0xbd, 0xcf, 0x6a, 0xe9, 0x27, 0x32, 0x61, 0xa7,
	0xe0, 0x04, 0x23, 0xd3, 0x30, 0x9a, 0x3f, 0x07, 0x32, 0x8f, 0xca, 0xc6, 0x74, 0xda, 0x2c, 0x68,
	0x1a, 0xdb, 0xa5, 0xa2, 0x88, 0x6e, 0x35, 0x8b, 0xda, 0x2d, 0xd6, 0x20, 0x18, 0x77, 0x9c, 0x9b,
	0x25, 0xed, 0x2e, 0xd3, 0x08, 0xa4, 0x5a, 0xac, 0xcd, 0xb2, 0x3e, 0x17, 0x02, 0x6d, 0x44, 0x6f,
	0x76, 0x71, 0xfd, 0xa3, 0xee, 0xd0, 0xda, 0x40, 0xa8, 0x7c, 0xd3, 0x67, 0x23, 0x7f, 0x11, 0x2b,
	0x31, 0x9f, 0xfb, 0xac, 0x2a, 0x20, 0x80, 0x2d, 0xfc, 0xb6, 0x7b, 0x83, 0xf6, 0xcb, 0x66, 0x41,
	0xff, 0x91, 0x8c, 0x38, 0x71, 0x2f, 0xab, 0xc5, 0xdd, 0x2c, 0x19, 0xf4, 0x7b, 0xc0, 0xaa, 0x99,
	0xf4, 0x4e, 0xf0, 0xc4, 0x79, 0x59, 0xff, 0xc3, 0x42, 0x2e, 0x4b, 0x66, 0xb5, 0xfb, 0x61, 0x2e,
	0xf8, 0xa1, 0x6a, 0xcd, 0xeb, 0x3a, 0xe5, 0x03, 0x1f, 0x2a, 0x0a, 0xc5, 0x2c, 0x0a, 0xe9, 0x26,
	0x28, 0x29, 0x9b, 0xe0, 0x1d, 0xa3, 0x1e, 0x32, 0x0b, 0x96, 0x7f, 0x4c, 0xa1, 0xf3, 0xca, 0xe8,
	0x8f, 0xc6, 0xa6, 0xa1, 0xff, 0x91, 0x7c, 0x0c, 0xfa, 0xf9, 0x0b, 0xc3, 0xe0, 0x1e, 0x0e, 0x77,
	0x9e, 0xde, 0xbe, 0xf6, 0xe4, 0x3b, 0x02, 0x70, 0x9e, 0x3e, 0x87, 0xb2, 0x08, 0x58, 0x50, 0xa5,
	0xc0, 0xd1, 0xb9, 0xa4, 0xca, 0x6c, 0x34, 0xbf, 0x94, 0x8f, 0xe6, 0x53, 0xd2, 0xb7, 0xc8, 0x64,
	0x13, 0xe2, 0x4d, 0x7c, 0xfb, 0x08, 0x86, 0xc5, 0xaa, 0x8a, 0x94, 0x6f, 0x58, 0xf5, 0x1e, 0xab,
	0x9d, 0x75, 0x63, 0x6b, 0x39, 0x9f, 0x73, 0xdb, 0xbf, 0x6a, 0xa6, 0x00, 0xfd, 0xa5, 0x58, 0xda,
	0xd0, 0x34, 0x3a, 0xdd, 0xf6, 0xa8, 0x3b, 0xe8, 0xdb, 0xed, 0x17, 0xdd, 0x61, 0x3e, 0xf5, 0xa1,
	0xa1, 0xa6, 0x3e, 0x38, 0xae, 0x6b, 0x4f, 0x5e, 0xfb, 0x0b, 0x21, 0x64, 0x1d, 0xd7, 0x6d, 0xbf,
	0xf6, 0x17, 0xfa, 0x5f, 0x96, 0x87, 0x57, 0x19, 0x0d, 0x69, 0x72, 0xed, 0x68, 0x1a, 0x2b, 0x2b,
	0x23, 0xe1, 0x6f, 0x11, 0xa7, 0x52, 0x2f, 0xcc, 0xaa, 0x6f, 0xfd, 0x80, 0x5c, 0xd3, 0x1f, 0xca,
	0x7d, 0x52, 0xc6, 0x7d, 0xf2, 0x91, 0x6a, 0x9e, 0x64, 0x67, 0xcd, 0x6f, 0x0f, 0x15, 0xf3, 0x4a,
	0x16, 0xf3, 0x9e, 0xdc, 0x07, 0x75, 0xb6, 0xcd, 0xf7, 0x41, 0x76, 0x13, 0xc0, 0x81, 0xe8, 0x87,
	0x89, 0x11, 0x84, 0xcb, 0xe9, 0x6b, 0x6e, 0xb2, 0x2c, 0x16, 0x5e, 0xd4, 0x03, 0xbf, 0xb7, 0x59,
	0xc2, 0xa6, 0x61, 0x74, 0xe6, 0xbb, 0xcd, 0xb2, 0xfe, 0xbf, 0x8b, 0x99, 0xcf, 0x3d, 0x74, 0x5a,
	0xa3, 0x16, 0xff, 0xce, 0x09, 0xf7, 0x3d, 0x44, 0x70, 0x46, 0xfa, 0x27, 0x50, 0x9d, 0xba, 0x26,
	0x22, 0x18, 0x2c, 0x9d, 0x12, 0xc1, 0xfa, 0x28, 0xfd, 0xb0, 0x2c, 0xb0, 0xde, 0x74, 0xa6, 0x9e,
	0x60, 0x3d, 0x56, 0x95, 0x25, 0xeb, 0xb1, 0x4a, 0x5e, 0x4d, 0x9f, 0x85, 0x97, 0xf2, 0xf6, 0x19,
	0x00, 0x87, 0xe1, 0x25, 0xff, 0x32, 0xcf, 0xf9, 0x32, 0xba, 0x12, 0x1e, 0xa1, 0x1f, 0x1f, 0x2d,
	0xa3, 0x2b, 0xfe, 0x29, 0x8c, 0x98, 0x3e, 0x1a, 0xc9, 0xbf, 0x1b, 0xe4, 0xc7, 0x16, 0x96, 0xb3,
	0x5f, 0xd2, 0xaa, 0xe6, 0xbe, 0xa4, 0xa5, 0x86, 0xac, 0x6b, 0xd9, 0x67, 0x8d, 0x5f, 0x67, 0xbb,
	0xe2, 0x01, 0x0a, 0x5f, 0x23, 0xc5, 0xb6, 0xc4, 0xb3, 0x94, 0x74, 0x9d, 0xf4, 0xad, 0xf5, 0xa9,
	0xf8, 0x52, 0xd5, 0x36, 0x7e, 0x6a, 0x7d, 0x8a, 0x9e, 0x26, 0x46, 0xd2, 0xe5, 0x82, 0xe8, 0xb3,
	0x41, 0x75, 0xc7, 0x75, 0x2d, 0xbe, 0x26, 0xfd, 0x3f, 0x4a, 0xb7, 0x4d, 0x1a, 0xd5, 0x5c, 0xb7,
	0x1e, 0xb2, 0x2d, 0x2b, 0x7d, 0xe0, 0x90, 0x15, 0x2f, 0xb9, 0xb6, 0xcf, 0x72, 0x65, 0x93, 0xf7,
	0x04, 0xa9, 0x0f, 0x55, 0xfc, 0xa3, 0xbf, 0x15, 0x93, 0x97, 0xf4, 0x2f, 0xd8, 0x5e, 0x7e, 0xba,
	0x3b, 0xac, 0xa9, 0x14, 0xed, 0xae, 0xeb, 0x81, 0x4c, 0xb9, 0xc7, 0x6e, 0xab, 0xd0, 0x61, 0x14,
	0xe2, 0x3e, 0xc3, 0x34, 0xe8, 0x4c, 0x85, 0x13, 0xc7, 0x87, 0x57, 0xcd, 0xa2, 0x6e, 0xb0, 0xbd,
	0xc4, 0x99, 0x1e, 0x3b, 0x73, 0xaf, 0x9b, 0x78, 0x73, 0x11, 0x6a, 0xfa, 0xd2, 0x9f, 0x4a, 0xfb,
	0x5b, 0xe9, 0x9b, 0x75, 0x6f, 0xe6, 0x4d, 0x92, 0xb6, 0x13, 0xb9, 0xda, 0x13, 0xd6, 0x68, 0x87,
	0x20, 0x03, 0xda, 0x94, 0xde, 0x20, 0xde, 0x6d, 0x64, 0x80, 0x9a, 0xce, 0x76, 0xac, 0xe5, 0xc2,
	0x8b, 0x44, 0x23, 0x1a, 0x39, 0x03, 0xd3, 0xbe, 0xcf, 0xea, 0x6d, 0xe2, 0x22, 0x60, 0xc9, 0x6f,
	0x80, 0xef, 0x08, 0xe3, 0x42, 0xc5, 0xde, 0x54, 0x1b, 0xea, 0xff, 0x5c, 0x7e, 0xdc, 0x4f, 0x41,
	0xeb, 0x33, 0x56, 0x6d, 0x73, 0x57, 0x7a, 0x45, 0x83, 0xa9, 0x0d, 0x9f, 0xa5, 0x3f, 0x51, 0x83,
	0xc9, 0x5e, 0xda, 0x53, 0xb6, 0xd7, 0x8d, 0x8d, 0xc0, 0x4d, 0x1b, 0xf0, 0xc4, 0xef, 0x3c, 0x58,
	0xff, 0x84, 0xed, 0x66, 0x47, 0x81, 0x53, 0x9d, 0xae, 0x9f, 0x0e, 0xbd, 0x5c, 0x6a, 0xb3, 0xa8,
	0xff, 0xae, 0xdc, 0x5f, 0x69, 0xbf, 0xd6, 0xdb, 0xaf, 0x96, 0x9a, 0x07, 0xac, 0x86, 0x43, 0xde,
	0x48, 0xcb, 0xb4, 0x99, 0xfe, 0x3f, 0xd2, 0x37, 0xda, 0x12, 0x2f, 0x23, 0xf8, 0x2a, 0xb1, 0x3a,
	0x62, 0xb7, 0xa9, 0x93, 0x9c, 0xb4, 0xe7, 0xc7, 0x09, 0xf7, 0x4e, 0xd7, 0xe3, 0xb7, 0xae, 0x83,
	0xd6, 0x61, 0x1a, 0x8e, 0x9b, 0x1d, 0xa6, 0xbc, 0x61, 0x98, 0x35, 0xed, 0xf5, 0x3d, 0xf1, 0xc9,
	0x0e, 0x23, 0x70, 0xa1, 0xb1, 0x7e, 0x2c, 0x5d, 0xa8, 0x59, 0x18, 0xb7, 0x82, 0x16, 0xfd, 0x43,
	0x0f, 0xed, 0x3b, 0xac, 0x2a, 0xe7, 0x28, 0x6c, 0x98, 0x43, 0xb6, 0xd2, 0x9f, 0x0b, 0x06, 0x43,
	0xbd, 0x11, 0xb8, 0x3d, 0xcf, 0xa1, 0xff, 0xb5, 0xf0, 0x80, 0x55, 0xc5, 0x6f, 0x1e, 0xb0, 0x92,
	0x65, 0xbd, 0x2b, 0x66, 0xef, 0xf8, 0xce, 0x8c, 0x30, 0x85, 0xa3, 0x2a, 0x39, 0x19, 0x9c, 0x87,
	0x3c, 0x8f, 0x62, 0x23, 0x27, 0x83, 0xf3, 0x30, 0xbd, 0x18, 0x85, 0xa1, 0xda, 0x4e, 0x94, 0x84,
	0x61, 0x20, 0xf2, 0xca, 0x0f, 0x8b, 0x2f, 0x4a, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x23, 0xe8,
	0x11, 0x44, 0x59, 0x67, 0x00, 0x00,
}
