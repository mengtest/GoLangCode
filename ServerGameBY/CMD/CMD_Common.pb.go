// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CMD_Common.proto

/*
Package CMD is a generated protocol buffer package.

Namespace: MESSAGE

It is generated from these files:
	CMD_Common.proto

It has these top-level messages:
	TagMBInsureRecordData
	CMD_MB_C2S_ADD_REWARD
	CMD_MB_S2C_ADD_REWARD
	CMD_MB_C2S_PURCHASE_TRADE_VIEW_STATUS
	CMD_MB_S2C_PURCHASE_TRADE_VIEW_STATUS
	TagUserSkill
	CMD_GR_C_INVITE_MATCH
	CMD_GR_S_INVITE_MATCH
	CMD_Speaker_S_UserChat
	CMD_Speaker_C_UserChat
	CMD_Speaker_S_UserChat_Fail
	CMD_C_QueryPurchaseUndealedTrade
	TagRewardItem
	CMD_MB_C_LOAD_MISSION
	TagEveryDayMission
	TagEveryDayExtMission
	TagWeekDayExtReward
	TagWeekDayExtMission
	CMD_MB_S_LOAD_MISSION
	CMD_MB_C_GET_MISSION_REWARD
	CMD_MB_S_GET_MISSION_REWARD
	CMD_MB_C_GET_LIVENESS_REWARD
	CMD_MB_S_GET_LIVENESS_REWARD
	CMD_MB_C_RESET_MISSION
	CMD_MB_S_RESET_MISSION
	CMD_MB_C_GET_WEEK_REWARD
	CMD_MB_S_GET_WEEK_REWARD
	CMD_MB_C2S_ACHIEVEMENT_TITLE
	CMD_MB_S2C_ACHIEVEMENT_TITLE
	CMD_MB_C2S_PUT_ON_ACHIEVEMENT_TITLE
	CMD_MB_S2C_PUT_ON_ACHIEVEMENT_TITLE
	CMD_MB_C_SDK_BIND
	CMD_MB_S_SDK_BIND
	TagRankReward
	TagArenaRank
	CMD_GM_CMD
	CMD_GM_CMD_RESP
	CMD_C_CHAT_SERVER_INFO
	CMD_S_CHAT_SERVER_INFO
	CMD_C_LUCKY_NUMBER_INFO
	CMD_S_LUCKY_NUMBER_INFO
	CMD_C_GET_LUCKY_NUMBER_TASK_PROGRESS
	LuckyNumberTask
	CMD_S_GET_LUCKY_NUMBER_TASK_PROGRESS
	CMD_C_GET_LUCKY_NUMBER_TASK_REWARD
	CMD_S_GET_LUCKY_NUMBER_TASK_REWARD
	CMD_C_LOOKUP_LUCKY_NUMBER
	CMD_S_LOOKUP_LUCKY_NUMBER
	CMD_C_GET_LUCKY_NUMBER_REWARD
	CMD_S_GET_LUCKY_NUMBER_REWARD
	CMD_C_RECHARGE_IN_LUCKY_NUMBER
	CMD_C_NEWPLAYER_INFO
	CMD_S_NEWPLAYER_INFO
	CMD_C_USER_LOGINDAY_REWARD
	CMD_S_USER_LOGINDAY_REWARD
	CMD_C_CARNIVAL_WELFARE_INFO
	CMD_S_CARNIVAL_WELFARE_INFO
	CMD_C_CARNIVAL_WELFARE_DRAW
	CMD_S_CARNIVAL_WELFARE_DRAW
	CMD_C_CARNIVAL_WELFARE_REWARD
	CMD_S_CARNIVAL_WELFARE_REWARD
	CMD_C_SEAGOD_GIFT_GET
	CMD_S_SEAGOD_GIFT_GET
	CMD_S_ANTIADDICTION
	CMD_S_SMT_POP_UP
	CMD_C_GuestRegisterAccount
	CMD_S_GuestRegisterAccount_Result
*/
package CMD

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LuckyNumberTask_Status int32

const (
	LuckyNumberTask_Undone    LuckyNumberTask_Status = 0
	LuckyNumberTask_Done      LuckyNumberTask_Status = 1
	LuckyNumberTask_GetReward LuckyNumberTask_Status = 2
)

var LuckyNumberTask_Status_name = map[int32]string{
	0: "Undone",
	1: "Done",
	2: "GetReward",
}
var LuckyNumberTask_Status_value = map[string]int32{
	"Undone":    0,
	"Done":      1,
	"GetReward": 2,
}

func (x LuckyNumberTask_Status) Enum() *LuckyNumberTask_Status {
	p := new(LuckyNumberTask_Status)
	*p = x
	return p
}
func (x LuckyNumberTask_Status) String() string {
	return proto.EnumName(LuckyNumberTask_Status_name, int32(x))
}
func (x *LuckyNumberTask_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LuckyNumberTask_Status_value, data, "LuckyNumberTask_Status")
	if err != nil {
		return err
	}
	*x = LuckyNumberTask_Status(value)
	return nil
}
func (LuckyNumberTask_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{42, 0} }

type CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result int32

const (
	CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Success CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result = 0
	CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Failed  CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result = 1
)

var CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result_name = map[int32]string{
	0: "Success",
	1: "Failed",
}
var CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result_value = map[string]int32{
	"Success": 0,
	"Failed":  1,
}

func (x CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result) Enum() *CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result {
	p := new(CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result)
	*p = x
	return p
}
func (x CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result) String() string {
	return proto.EnumName(CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result_name, int32(x))
}
func (x *CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result_value, data, "CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result")
	if err != nil {
		return err
	}
	*x = CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result(value)
	return nil
}
func (CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{45, 0}
}

type CMD_S_GET_LUCKY_NUMBER_REWARD_Result int32

const (
	CMD_S_GET_LUCKY_NUMBER_REWARD_Success  CMD_S_GET_LUCKY_NUMBER_REWARD_Result = 0
	CMD_S_GET_LUCKY_NUMBER_REWARD_Failed   CMD_S_GET_LUCKY_NUMBER_REWARD_Result = 1
	CMD_S_GET_LUCKY_NUMBER_REWARD_Not7Day  CMD_S_GET_LUCKY_NUMBER_REWARD_Result = 2
	CMD_S_GET_LUCKY_NUMBER_REWARD_NoReward CMD_S_GET_LUCKY_NUMBER_REWARD_Result = 3
	CMD_S_GET_LUCKY_NUMBER_REWARD_Got      CMD_S_GET_LUCKY_NUMBER_REWARD_Result = 4
)

var CMD_S_GET_LUCKY_NUMBER_REWARD_Result_name = map[int32]string{
	0: "Success",
	1: "Failed",
	2: "Not7Day",
	3: "NoReward",
	4: "Got",
}
var CMD_S_GET_LUCKY_NUMBER_REWARD_Result_value = map[string]int32{
	"Success":  0,
	"Failed":   1,
	"Not7Day":  2,
	"NoReward": 3,
	"Got":      4,
}

func (x CMD_S_GET_LUCKY_NUMBER_REWARD_Result) Enum() *CMD_S_GET_LUCKY_NUMBER_REWARD_Result {
	p := new(CMD_S_GET_LUCKY_NUMBER_REWARD_Result)
	*p = x
	return p
}
func (x CMD_S_GET_LUCKY_NUMBER_REWARD_Result) String() string {
	return proto.EnumName(CMD_S_GET_LUCKY_NUMBER_REWARD_Result_name, int32(x))
}
func (x *CMD_S_GET_LUCKY_NUMBER_REWARD_Result) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_S_GET_LUCKY_NUMBER_REWARD_Result_value, data, "CMD_S_GET_LUCKY_NUMBER_REWARD_Result")
	if err != nil {
		return err
	}
	*x = CMD_S_GET_LUCKY_NUMBER_REWARD_Result(value)
	return nil
}
func (CMD_S_GET_LUCKY_NUMBER_REWARD_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{49, 0}
}

// 银行记录结构体
type TagMBInsureRecordData struct {
	RecordId     *int32  `protobuf:"varint,1,opt,name=record_id,json=recordId" json:"record_id,omitempty"`
	KindId       *int32  `protobuf:"varint,2,opt,name=kind_id,json=kindId" json:"kind_id,omitempty"`
	GameId       *int32  `protobuf:"varint,3,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	SourceUserId *uint32 `protobuf:"varint,4,opt,name=source_user_id,json=sourceUserId" json:"source_user_id,omitempty"`
	TargetUserId *uint32 `protobuf:"varint,5,opt,name=target_user_id,json=targetUserId" json:"target_user_id,omitempty"`
	SwapScore    *int64  `protobuf:"varint,6,opt,name=swap_score,json=swapScore" json:"swap_score,omitempty"`
	SourceBank   *int64  `protobuf:"varint,7,opt,name=source_bank,json=sourceBank" json:"source_bank,omitempty"`
	TargetBank   *int64  `protobuf:"varint,8,opt,name=target_bank,json=targetBank" json:"target_bank,omitempty"`
	Revenue      *int64  `protobuf:"varint,9,opt,name=revenue" json:"revenue,omitempty"`
	IsGamePlaza  *int32  `protobuf:"varint,10,opt,name=is_game_plaza,json=isGamePlaza" json:"is_game_plaza,omitempty"`
	TradeType    *int32  `protobuf:"varint,11,opt,name=trade_type,json=tradeType" json:"trade_type,omitempty"`
	// optional SYSTEMTIME			time = 12;							//操作时间
	SourceNickName   []byte  `protobuf:"bytes,13,opt,name=source_nick_name,json=sourceNickName" json:"source_nick_name,omitempty"`
	TargetNickName   []byte  `protobuf:"bytes,14,opt,name=target_nick_name,json=targetNickName" json:"target_nick_name,omitempty"`
	SourceGameId     *uint32 `protobuf:"varint,15,opt,name=source_game_id,json=sourceGameId" json:"source_game_id,omitempty"`
	TargetGameId     *uint32 `protobuf:"varint,16,opt,name=target_game_id,json=targetGameId" json:"target_game_id,omitempty"`
	CollectNote      []byte  `protobuf:"bytes,17,opt,name=collect_note,json=collectNote" json:"collect_note,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagMBInsureRecordData) Reset()                    { *m = TagMBInsureRecordData{} }
func (m *TagMBInsureRecordData) String() string            { return proto.CompactTextString(m) }
func (*TagMBInsureRecordData) ProtoMessage()               {}
func (*TagMBInsureRecordData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TagMBInsureRecordData) GetRecordId() int32 {
	if m != nil && m.RecordId != nil {
		return *m.RecordId
	}
	return 0
}

func (m *TagMBInsureRecordData) GetKindId() int32 {
	if m != nil && m.KindId != nil {
		return *m.KindId
	}
	return 0
}

func (m *TagMBInsureRecordData) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *TagMBInsureRecordData) GetSourceUserId() uint32 {
	if m != nil && m.SourceUserId != nil {
		return *m.SourceUserId
	}
	return 0
}

func (m *TagMBInsureRecordData) GetTargetUserId() uint32 {
	if m != nil && m.TargetUserId != nil {
		return *m.TargetUserId
	}
	return 0
}

func (m *TagMBInsureRecordData) GetSwapScore() int64 {
	if m != nil && m.SwapScore != nil {
		return *m.SwapScore
	}
	return 0
}

func (m *TagMBInsureRecordData) GetSourceBank() int64 {
	if m != nil && m.SourceBank != nil {
		return *m.SourceBank
	}
	return 0
}

func (m *TagMBInsureRecordData) GetTargetBank() int64 {
	if m != nil && m.TargetBank != nil {
		return *m.TargetBank
	}
	return 0
}

func (m *TagMBInsureRecordData) GetRevenue() int64 {
	if m != nil && m.Revenue != nil {
		return *m.Revenue
	}
	return 0
}

func (m *TagMBInsureRecordData) GetIsGamePlaza() int32 {
	if m != nil && m.IsGamePlaza != nil {
		return *m.IsGamePlaza
	}
	return 0
}

func (m *TagMBInsureRecordData) GetTradeType() int32 {
	if m != nil && m.TradeType != nil {
		return *m.TradeType
	}
	return 0
}

func (m *TagMBInsureRecordData) GetSourceNickName() []byte {
	if m != nil {
		return m.SourceNickName
	}
	return nil
}

func (m *TagMBInsureRecordData) GetTargetNickName() []byte {
	if m != nil {
		return m.TargetNickName
	}
	return nil
}

func (m *TagMBInsureRecordData) GetSourceGameId() uint32 {
	if m != nil && m.SourceGameId != nil {
		return *m.SourceGameId
	}
	return 0
}

func (m *TagMBInsureRecordData) GetTargetGameId() uint32 {
	if m != nil && m.TargetGameId != nil {
		return *m.TargetGameId
	}
	return 0
}

func (m *TagMBInsureRecordData) GetCollectNote() []byte {
	if m != nil {
		return m.CollectNote
	}
	return nil
}

// 增加奖励的通用消息
type CMD_MB_C2S_ADD_REWARD struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ClientType       *uint32 `protobuf:"varint,2,opt,name=client_type,json=clientType" json:"client_type,omitempty"`
	ChannelId        *uint32 `protobuf:"varint,3,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	GameId           *uint32 `protobuf:"varint,4,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	ReasonType       *uint32 `protobuf:"varint,5,opt,name=reason_type,json=reasonType" json:"reason_type,omitempty"`
	ExtendInfos      []int32 `protobuf:"varint,100,rep,name=extend_infos,json=extendInfos" json:"extend_infos,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_MB_C2S_ADD_REWARD) Reset()                    { *m = CMD_MB_C2S_ADD_REWARD{} }
func (m *CMD_MB_C2S_ADD_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_C2S_ADD_REWARD) ProtoMessage()               {}
func (*CMD_MB_C2S_ADD_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CMD_MB_C2S_ADD_REWARD) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_MB_C2S_ADD_REWARD) GetClientType() uint32 {
	if m != nil && m.ClientType != nil {
		return *m.ClientType
	}
	return 0
}

func (m *CMD_MB_C2S_ADD_REWARD) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *CMD_MB_C2S_ADD_REWARD) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *CMD_MB_C2S_ADD_REWARD) GetReasonType() uint32 {
	if m != nil && m.ReasonType != nil {
		return *m.ReasonType
	}
	return 0
}

func (m *CMD_MB_C2S_ADD_REWARD) GetExtendInfos() []int32 {
	if m != nil {
		return m.ExtendInfos
	}
	return nil
}

type CMD_MB_S2C_ADD_REWARD struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ReasonType       *uint32 `protobuf:"varint,2,opt,name=reason_type,json=reasonType" json:"reason_type,omitempty"`
	Status           *uint32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	Msg              []byte  `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
	ExtendInfos      []int32 `protobuf:"varint,100,rep,name=extend_infos,json=extendInfos" json:"extend_infos,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_MB_S2C_ADD_REWARD) Reset()                    { *m = CMD_MB_S2C_ADD_REWARD{} }
func (m *CMD_MB_S2C_ADD_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_S2C_ADD_REWARD) ProtoMessage()               {}
func (*CMD_MB_S2C_ADD_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CMD_MB_S2C_ADD_REWARD) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_MB_S2C_ADD_REWARD) GetReasonType() uint32 {
	if m != nil && m.ReasonType != nil {
		return *m.ReasonType
	}
	return 0
}

func (m *CMD_MB_S2C_ADD_REWARD) GetStatus() uint32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *CMD_MB_S2C_ADD_REWARD) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *CMD_MB_S2C_ADD_REWARD) GetExtendInfos() []int32 {
	if m != nil {
		return m.ExtendInfos
	}
	return nil
}

type CMD_MB_C2S_PURCHASE_TRADE_VIEW_STATUS struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	LocalLanguage    []byte  `protobuf:"bytes,2,opt,name=local_language,json=localLanguage" json:"local_language,omitempty"`
	RechargeType     *uint32 `protobuf:"varint,3,opt,name=recharge_type,json=rechargeType" json:"recharge_type,omitempty"`
	RechargeValue    *uint32 `protobuf:"varint,4,opt,name=recharge_value,json=rechargeValue" json:"recharge_value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_MB_C2S_PURCHASE_TRADE_VIEW_STATUS) Reset()         { *m = CMD_MB_C2S_PURCHASE_TRADE_VIEW_STATUS{} }
func (m *CMD_MB_C2S_PURCHASE_TRADE_VIEW_STATUS) String() string { return proto.CompactTextString(m) }
func (*CMD_MB_C2S_PURCHASE_TRADE_VIEW_STATUS) ProtoMessage()    {}
func (*CMD_MB_C2S_PURCHASE_TRADE_VIEW_STATUS) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3}
}

func (m *CMD_MB_C2S_PURCHASE_TRADE_VIEW_STATUS) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_MB_C2S_PURCHASE_TRADE_VIEW_STATUS) GetLocalLanguage() []byte {
	if m != nil {
		return m.LocalLanguage
	}
	return nil
}

func (m *CMD_MB_C2S_PURCHASE_TRADE_VIEW_STATUS) GetRechargeType() uint32 {
	if m != nil && m.RechargeType != nil {
		return *m.RechargeType
	}
	return 0
}

func (m *CMD_MB_C2S_PURCHASE_TRADE_VIEW_STATUS) GetRechargeValue() uint32 {
	if m != nil && m.RechargeValue != nil {
		return *m.RechargeValue
	}
	return 0
}

type CMD_MB_S2C_PURCHASE_TRADE_VIEW_STATUS struct {
	Visibility       *uint32 `protobuf:"varint,1,opt,name=visibility" json:"visibility,omitempty"`
	Payability       *uint32 `protobuf:"varint,2,opt,name=payability" json:"payability,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_MB_S2C_PURCHASE_TRADE_VIEW_STATUS) Reset()         { *m = CMD_MB_S2C_PURCHASE_TRADE_VIEW_STATUS{} }
func (m *CMD_MB_S2C_PURCHASE_TRADE_VIEW_STATUS) String() string { return proto.CompactTextString(m) }
func (*CMD_MB_S2C_PURCHASE_TRADE_VIEW_STATUS) ProtoMessage()    {}
func (*CMD_MB_S2C_PURCHASE_TRADE_VIEW_STATUS) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4}
}

func (m *CMD_MB_S2C_PURCHASE_TRADE_VIEW_STATUS) GetVisibility() uint32 {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return 0
}

func (m *CMD_MB_S2C_PURCHASE_TRADE_VIEW_STATUS) GetPayability() uint32 {
	if m != nil && m.Payability != nil {
		return *m.Payability
	}
	return 0
}

// 用户技能
type TagUserSkill struct {
	ItemId           *uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	SkillId          *uint32 `protobuf:"varint,2,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	Used             *int32  `protobuf:"varint,3,opt,name=used" json:"used,omitempty"`
	Total            *int32  `protobuf:"varint,4,opt,name=total" json:"total,omitempty"`
	UsedTime         *int64  `protobuf:"varint,5,opt,name=used_time,json=usedTime" json:"used_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagUserSkill) Reset()                    { *m = TagUserSkill{} }
func (m *TagUserSkill) String() string            { return proto.CompactTextString(m) }
func (*TagUserSkill) ProtoMessage()               {}
func (*TagUserSkill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TagUserSkill) GetItemId() uint32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *TagUserSkill) GetSkillId() uint32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *TagUserSkill) GetUsed() int32 {
	if m != nil && m.Used != nil {
		return *m.Used
	}
	return 0
}

func (m *TagUserSkill) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *TagUserSkill) GetUsedTime() int64 {
	if m != nil && m.UsedTime != nil {
		return *m.UsedTime
	}
	return 0
}

// 快速赛，锦标赛邀请挑战
type CMD_GR_C_INVITE_MATCH struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	IsInviteGuild    *bool   `protobuf:"varint,2,opt,name=is_invite_guild,json=isInviteGuild" json:"is_invite_guild,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_GR_C_INVITE_MATCH) Reset()                    { *m = CMD_GR_C_INVITE_MATCH{} }
func (m *CMD_GR_C_INVITE_MATCH) String() string            { return proto.CompactTextString(m) }
func (*CMD_GR_C_INVITE_MATCH) ProtoMessage()               {}
func (*CMD_GR_C_INVITE_MATCH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CMD_GR_C_INVITE_MATCH) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_GR_C_INVITE_MATCH) GetIsInviteGuild() bool {
	if m != nil && m.IsInviteGuild != nil {
		return *m.IsInviteGuild
	}
	return false
}

// 快速赛，锦标赛邀请挑战
type CMD_GR_S_INVITE_MATCH struct {
	InviterUserId         *uint32 `protobuf:"varint,1,opt,name=inviter_user_id,json=inviterUserId" json:"inviter_user_id,omitempty"`
	InviterName           []byte  `protobuf:"bytes,2,opt,name=inviter_name,json=inviterName" json:"inviter_name,omitempty"`
	InviterVipLevel       *uint32 `protobuf:"varint,3,opt,name=inviter_vip_level,json=inviterVipLevel" json:"inviter_vip_level,omitempty"`
	InviterMatchKindId    *uint32 `protobuf:"varint,4,opt,name=inviter_match_kind_id,json=inviterMatchKindId" json:"inviter_match_kind_id,omitempty"`
	InviterMatchCellScore *uint32 `protobuf:"varint,5,opt,name=inviter_match_cell_score,json=inviterMatchCellScore" json:"inviter_match_cell_score,omitempty"`
	IsInviteGuild         *bool   `protobuf:"varint,6,opt,name=is_invite_guild,json=isInviteGuild" json:"is_invite_guild,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *CMD_GR_S_INVITE_MATCH) Reset()                    { *m = CMD_GR_S_INVITE_MATCH{} }
func (m *CMD_GR_S_INVITE_MATCH) String() string            { return proto.CompactTextString(m) }
func (*CMD_GR_S_INVITE_MATCH) ProtoMessage()               {}
func (*CMD_GR_S_INVITE_MATCH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CMD_GR_S_INVITE_MATCH) GetInviterUserId() uint32 {
	if m != nil && m.InviterUserId != nil {
		return *m.InviterUserId
	}
	return 0
}

func (m *CMD_GR_S_INVITE_MATCH) GetInviterName() []byte {
	if m != nil {
		return m.InviterName
	}
	return nil
}

func (m *CMD_GR_S_INVITE_MATCH) GetInviterVipLevel() uint32 {
	if m != nil && m.InviterVipLevel != nil {
		return *m.InviterVipLevel
	}
	return 0
}

func (m *CMD_GR_S_INVITE_MATCH) GetInviterMatchKindId() uint32 {
	if m != nil && m.InviterMatchKindId != nil {
		return *m.InviterMatchKindId
	}
	return 0
}

func (m *CMD_GR_S_INVITE_MATCH) GetInviterMatchCellScore() uint32 {
	if m != nil && m.InviterMatchCellScore != nil {
		return *m.InviterMatchCellScore
	}
	return 0
}

func (m *CMD_GR_S_INVITE_MATCH) GetIsInviteGuild() bool {
	if m != nil && m.IsInviteGuild != nil {
		return *m.IsInviteGuild
	}
	return false
}

// 小喇叭
type CMD_Speaker_S_UserChat struct {
	ChatColor        *uint32 `protobuf:"varint,1,opt,name=chat_color,json=chatColor" json:"chat_color,omitempty"`
	SendUserGameId   *uint32 `protobuf:"varint,2,opt,name=send_user_game_id,json=sendUserGameId" json:"send_user_game_id,omitempty"`
	TargetUserId     *uint32 `protobuf:"varint,3,opt,name=target_user_id,json=targetUserId" json:"target_user_id,omitempty"`
	SourceNickName   []byte  `protobuf:"bytes,4,opt,name=source_nick_name,json=sourceNickName" json:"source_nick_name,omitempty"`
	Chat             []byte  `protobuf:"bytes,5,opt,name=chat" json:"chat,omitempty"`
	Times            *int32  `protobuf:"varint,6,opt,name=times" json:"times,omitempty"`
	CostValue        *int64  `protobuf:"varint,7,opt,name=cost_value,json=costValue" json:"cost_value,omitempty"`
	CostType         *int32  `protobuf:"varint,8,opt,name=cost_type,json=costType" json:"cost_type,omitempty"`
	SendUserVipLv    *int32  `protobuf:"varint,9,opt,name=send_user_vip_lv,json=sendUserVipLv" json:"send_user_vip_lv,omitempty"`
	SendUserFaceId   *uint32 `protobuf:"varint,10,opt,name=send_user_face_id,json=sendUserFaceId" json:"send_user_face_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_Speaker_S_UserChat) Reset()                    { *m = CMD_Speaker_S_UserChat{} }
func (m *CMD_Speaker_S_UserChat) String() string            { return proto.CompactTextString(m) }
func (*CMD_Speaker_S_UserChat) ProtoMessage()               {}
func (*CMD_Speaker_S_UserChat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CMD_Speaker_S_UserChat) GetChatColor() uint32 {
	if m != nil && m.ChatColor != nil {
		return *m.ChatColor
	}
	return 0
}

func (m *CMD_Speaker_S_UserChat) GetSendUserGameId() uint32 {
	if m != nil && m.SendUserGameId != nil {
		return *m.SendUserGameId
	}
	return 0
}

func (m *CMD_Speaker_S_UserChat) GetTargetUserId() uint32 {
	if m != nil && m.TargetUserId != nil {
		return *m.TargetUserId
	}
	return 0
}

func (m *CMD_Speaker_S_UserChat) GetSourceNickName() []byte {
	if m != nil {
		return m.SourceNickName
	}
	return nil
}

func (m *CMD_Speaker_S_UserChat) GetChat() []byte {
	if m != nil {
		return m.Chat
	}
	return nil
}

func (m *CMD_Speaker_S_UserChat) GetTimes() int32 {
	if m != nil && m.Times != nil {
		return *m.Times
	}
	return 0
}

func (m *CMD_Speaker_S_UserChat) GetCostValue() int64 {
	if m != nil && m.CostValue != nil {
		return *m.CostValue
	}
	return 0
}

func (m *CMD_Speaker_S_UserChat) GetCostType() int32 {
	if m != nil && m.CostType != nil {
		return *m.CostType
	}
	return 0
}

func (m *CMD_Speaker_S_UserChat) GetSendUserVipLv() int32 {
	if m != nil && m.SendUserVipLv != nil {
		return *m.SendUserVipLv
	}
	return 0
}

func (m *CMD_Speaker_S_UserChat) GetSendUserFaceId() uint32 {
	if m != nil && m.SendUserFaceId != nil {
		return *m.SendUserFaceId
	}
	return 0
}

// 小喇叭
type CMD_Speaker_C_UserChat struct {
	ChatColor        *uint32 `protobuf:"varint,1,opt,name=chat_color,json=chatColor" json:"chat_color,omitempty"`
	TargetUserId     *uint32 `protobuf:"varint,2,opt,name=target_user_id,json=targetUserId" json:"target_user_id,omitempty"`
	Chat             []byte  `protobuf:"bytes,3,opt,name=chat" json:"chat,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_Speaker_C_UserChat) Reset()                    { *m = CMD_Speaker_C_UserChat{} }
func (m *CMD_Speaker_C_UserChat) String() string            { return proto.CompactTextString(m) }
func (*CMD_Speaker_C_UserChat) ProtoMessage()               {}
func (*CMD_Speaker_C_UserChat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CMD_Speaker_C_UserChat) GetChatColor() uint32 {
	if m != nil && m.ChatColor != nil {
		return *m.ChatColor
	}
	return 0
}

func (m *CMD_Speaker_C_UserChat) GetTargetUserId() uint32 {
	if m != nil && m.TargetUserId != nil {
		return *m.TargetUserId
	}
	return 0
}

func (m *CMD_Speaker_C_UserChat) GetChat() []byte {
	if m != nil {
		return m.Chat
	}
	return nil
}

// 小喇叭
type CMD_Speaker_S_UserChat_Fail struct {
	ResultCode       *uint32 `protobuf:"varint,1,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
	FrobidTime       *uint32 `protobuf:"varint,2,opt,name=frobid_time,json=frobidTime" json:"frobid_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_Speaker_S_UserChat_Fail) Reset()                    { *m = CMD_Speaker_S_UserChat_Fail{} }
func (m *CMD_Speaker_S_UserChat_Fail) String() string            { return proto.CompactTextString(m) }
func (*CMD_Speaker_S_UserChat_Fail) ProtoMessage()               {}
func (*CMD_Speaker_S_UserChat_Fail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CMD_Speaker_S_UserChat_Fail) GetResultCode() uint32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

func (m *CMD_Speaker_S_UserChat_Fail) GetFrobidTime() uint32 {
	if m != nil && m.FrobidTime != nil {
		return *m.FrobidTime
	}
	return 0
}

type CMD_C_QueryPurchaseUndealedTrade struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_QueryPurchaseUndealedTrade) Reset()         { *m = CMD_C_QueryPurchaseUndealedTrade{} }
func (m *CMD_C_QueryPurchaseUndealedTrade) String() string { return proto.CompactTextString(m) }
func (*CMD_C_QueryPurchaseUndealedTrade) ProtoMessage()    {}
func (*CMD_C_QueryPurchaseUndealedTrade) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11}
}

// 奖励道具
type TagRewardItem struct {
	ItemId           *uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemNum          *int32  `protobuf:"varint,2,opt,name=item_num,json=itemNum" json:"item_num,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagRewardItem) Reset()                    { *m = TagRewardItem{} }
func (m *TagRewardItem) String() string            { return proto.CompactTextString(m) }
func (*TagRewardItem) ProtoMessage()               {}
func (*TagRewardItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TagRewardItem) GetItemId() uint32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *TagRewardItem) GetItemNum() int32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

// 加载任务
type CMD_MB_C_LOAD_MISSION struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_MB_C_LOAD_MISSION) Reset()                    { *m = CMD_MB_C_LOAD_MISSION{} }
func (m *CMD_MB_C_LOAD_MISSION) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_C_LOAD_MISSION) ProtoMessage()               {}
func (*CMD_MB_C_LOAD_MISSION) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// 每日任务
type TagEveryDayMission struct {
	MissionId        *int32 `protobuf:"varint,1,opt,name=mission_id,json=missionId" json:"mission_id,omitempty"`
	Progress         *int32 `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	Status           *int32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TagEveryDayMission) Reset()                    { *m = TagEveryDayMission{} }
func (m *TagEveryDayMission) String() string            { return proto.CompactTextString(m) }
func (*TagEveryDayMission) ProtoMessage()               {}
func (*TagEveryDayMission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TagEveryDayMission) GetMissionId() int32 {
	if m != nil && m.MissionId != nil {
		return *m.MissionId
	}
	return 0
}

func (m *TagEveryDayMission) GetProgress() int32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

func (m *TagEveryDayMission) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

// 每日任务
type TagEveryDayExtMission struct {
	EverymissionFinishnum   *int32 `protobuf:"varint,1,opt,name=everymission_finishnum,json=everymissionFinishnum" json:"everymission_finishnum,omitempty"`
	EverymissionMaxnum      *int32 `protobuf:"varint,2,opt,name=everymission_maxnum,json=everymissionMaxnum" json:"everymission_maxnum,omitempty"`
	EverymissionBasediamond *int32 `protobuf:"varint,3,opt,name=everymission_basediamond,json=everymissionBasediamond" json:"everymission_basediamond,omitempty"`
	EverymissionStarnum     *int32 `protobuf:"varint,4,opt,name=everymission_starnum,json=everymissionStarnum" json:"everymission_starnum,omitempty"`
	XXX_unrecognized        []byte `json:"-"`
}

func (m *TagEveryDayExtMission) Reset()                    { *m = TagEveryDayExtMission{} }
func (m *TagEveryDayExtMission) String() string            { return proto.CompactTextString(m) }
func (*TagEveryDayExtMission) ProtoMessage()               {}
func (*TagEveryDayExtMission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *TagEveryDayExtMission) GetEverymissionFinishnum() int32 {
	if m != nil && m.EverymissionFinishnum != nil {
		return *m.EverymissionFinishnum
	}
	return 0
}

func (m *TagEveryDayExtMission) GetEverymissionMaxnum() int32 {
	if m != nil && m.EverymissionMaxnum != nil {
		return *m.EverymissionMaxnum
	}
	return 0
}

func (m *TagEveryDayExtMission) GetEverymissionBasediamond() int32 {
	if m != nil && m.EverymissionBasediamond != nil {
		return *m.EverymissionBasediamond
	}
	return 0
}

func (m *TagEveryDayExtMission) GetEverymissionStarnum() int32 {
	if m != nil && m.EverymissionStarnum != nil {
		return *m.EverymissionStarnum
	}
	return 0
}

// 每周任务(藏宝阁图纸奖励)
type TagWeekDayExtReward struct {
	PuzzlesId        *int32 `protobuf:"varint,1,opt,name=puzzles_id,json=puzzlesId" json:"puzzles_id,omitempty"`
	PuzzlesReward    []byte `protobuf:"bytes,2,opt,name=puzzles_reward,json=puzzlesReward" json:"puzzles_reward,omitempty"`
	PuzzlesState     *int32 `protobuf:"varint,3,opt,name=puzzles_state,json=puzzlesState" json:"puzzles_state,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TagWeekDayExtReward) Reset()                    { *m = TagWeekDayExtReward{} }
func (m *TagWeekDayExtReward) String() string            { return proto.CompactTextString(m) }
func (*TagWeekDayExtReward) ProtoMessage()               {}
func (*TagWeekDayExtReward) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *TagWeekDayExtReward) GetPuzzlesId() int32 {
	if m != nil && m.PuzzlesId != nil {
		return *m.PuzzlesId
	}
	return 0
}

func (m *TagWeekDayExtReward) GetPuzzlesReward() []byte {
	if m != nil {
		return m.PuzzlesReward
	}
	return nil
}

func (m *TagWeekDayExtReward) GetPuzzlesState() int32 {
	if m != nil && m.PuzzlesState != nil {
		return *m.PuzzlesState
	}
	return 0
}

// 每周任务(藏宝阁)
type TagWeekDayExtMission struct {
	WeekmissionHaspuzzles    []byte `protobuf:"bytes,1,opt,name=weekmission_haspuzzles,json=weekmissionHaspuzzles" json:"weekmission_haspuzzles,omitempty"`
	WeekmissionResetnum      *int32 `protobuf:"varint,2,opt,name=weekmission_resetnum,json=weekmissionResetnum" json:"weekmission_resetnum,omitempty"`
	WeekmissionBasediamond   *int32 `protobuf:"varint,3,opt,name=weekmission_basediamond,json=weekmissionBasediamond" json:"weekmission_basediamond,omitempty"`
	WeekmissionPuzzlesnumber *int32 `protobuf:"varint,4,opt,name=weekmission_puzzlesnumber,json=weekmissionPuzzlesnumber" json:"weekmission_puzzlesnumber,omitempty"`
	WeekmissionPuzzleschip   *int32 `protobuf:"varint,5,opt,name=weekmission_puzzleschip,json=weekmissionPuzzleschip" json:"weekmission_puzzleschip,omitempty"`
	XXX_unrecognized         []byte `json:"-"`
}

func (m *TagWeekDayExtMission) Reset()                    { *m = TagWeekDayExtMission{} }
func (m *TagWeekDayExtMission) String() string            { return proto.CompactTextString(m) }
func (*TagWeekDayExtMission) ProtoMessage()               {}
func (*TagWeekDayExtMission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *TagWeekDayExtMission) GetWeekmissionHaspuzzles() []byte {
	if m != nil {
		return m.WeekmissionHaspuzzles
	}
	return nil
}

func (m *TagWeekDayExtMission) GetWeekmissionResetnum() int32 {
	if m != nil && m.WeekmissionResetnum != nil {
		return *m.WeekmissionResetnum
	}
	return 0
}

func (m *TagWeekDayExtMission) GetWeekmissionBasediamond() int32 {
	if m != nil && m.WeekmissionBasediamond != nil {
		return *m.WeekmissionBasediamond
	}
	return 0
}

func (m *TagWeekDayExtMission) GetWeekmissionPuzzlesnumber() int32 {
	if m != nil && m.WeekmissionPuzzlesnumber != nil {
		return *m.WeekmissionPuzzlesnumber
	}
	return 0
}

func (m *TagWeekDayExtMission) GetWeekmissionPuzzleschip() int32 {
	if m != nil && m.WeekmissionPuzzleschip != nil {
		return *m.WeekmissionPuzzleschip
	}
	return 0
}

// 加载任务
type CMD_MB_S_LOAD_MISSION struct {
	EverydayMissions    []*TagEveryDayMission  `protobuf:"bytes,1,rep,name=everyday_missions,json=everydayMissions" json:"everyday_missions,omitempty"`
	WeekMissions        []*TagEveryDayMission  `protobuf:"bytes,2,rep,name=week_missions,json=weekMissions" json:"week_missions,omitempty"`
	LivenessReward      []uint32               `protobuf:"varint,3,rep,name=liveness_reward,json=livenessReward" json:"liveness_reward,omitempty"`
	GropupMissions      []*TagEveryDayMission  `protobuf:"bytes,4,rep,name=gropup_missions,json=gropupMissions" json:"gropup_missions,omitempty"`
	EverydayExtMissions *TagEveryDayExtMission `protobuf:"bytes,5,opt,name=everyday_ext_missions,json=everydayExtMissions" json:"everyday_ext_missions,omitempty"`
	WeekdayExtMissions  *TagWeekDayExtMission  `protobuf:"bytes,6,opt,name=weekday_ext_missions,json=weekdayExtMissions" json:"weekday_ext_missions,omitempty"`
	WeekExtRewards      []*TagWeekDayExtReward `protobuf:"bytes,7,rep,name=week_ext_rewards,json=weekExtRewards" json:"week_ext_rewards,omitempty"`
	XXX_unrecognized    []byte                 `json:"-"`
}

func (m *CMD_MB_S_LOAD_MISSION) Reset()                    { *m = CMD_MB_S_LOAD_MISSION{} }
func (m *CMD_MB_S_LOAD_MISSION) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_S_LOAD_MISSION) ProtoMessage()               {}
func (*CMD_MB_S_LOAD_MISSION) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CMD_MB_S_LOAD_MISSION) GetEverydayMissions() []*TagEveryDayMission {
	if m != nil {
		return m.EverydayMissions
	}
	return nil
}

func (m *CMD_MB_S_LOAD_MISSION) GetWeekMissions() []*TagEveryDayMission {
	if m != nil {
		return m.WeekMissions
	}
	return nil
}

func (m *CMD_MB_S_LOAD_MISSION) GetLivenessReward() []uint32 {
	if m != nil {
		return m.LivenessReward
	}
	return nil
}

func (m *CMD_MB_S_LOAD_MISSION) GetGropupMissions() []*TagEveryDayMission {
	if m != nil {
		return m.GropupMissions
	}
	return nil
}

func (m *CMD_MB_S_LOAD_MISSION) GetEverydayExtMissions() *TagEveryDayExtMission {
	if m != nil {
		return m.EverydayExtMissions
	}
	return nil
}

func (m *CMD_MB_S_LOAD_MISSION) GetWeekdayExtMissions() *TagWeekDayExtMission {
	if m != nil {
		return m.WeekdayExtMissions
	}
	return nil
}

func (m *CMD_MB_S_LOAD_MISSION) GetWeekExtRewards() []*TagWeekDayExtReward {
	if m != nil {
		return m.WeekExtRewards
	}
	return nil
}

// 领取任务奖励
type CMD_MB_C_GET_MISSION_REWARD struct {
	MissionType      *uint32 `protobuf:"varint,1,opt,name=mission_type,json=missionType" json:"mission_type,omitempty"`
	MissionId        *int32  `protobuf:"varint,2,opt,name=mission_id,json=missionId" json:"mission_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_MB_C_GET_MISSION_REWARD) Reset()                    { *m = CMD_MB_C_GET_MISSION_REWARD{} }
func (m *CMD_MB_C_GET_MISSION_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_C_GET_MISSION_REWARD) ProtoMessage()               {}
func (*CMD_MB_C_GET_MISSION_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CMD_MB_C_GET_MISSION_REWARD) GetMissionType() uint32 {
	if m != nil && m.MissionType != nil {
		return *m.MissionType
	}
	return 0
}

func (m *CMD_MB_C_GET_MISSION_REWARD) GetMissionId() int32 {
	if m != nil && m.MissionId != nil {
		return *m.MissionId
	}
	return 0
}

// 领取任务奖励
type CMD_MB_S_GET_MISSION_REWARD struct {
	MissionType      *uint32          `protobuf:"varint,1,opt,name=mission_type,json=missionType" json:"mission_type,omitempty"`
	MissionId        *int32           `protobuf:"varint,2,opt,name=mission_id,json=missionId" json:"mission_id,omitempty"`
	ReturnValue      *int32           `protobuf:"varint,3,opt,name=return_value,json=returnValue" json:"return_value,omitempty"`
	RewardList       []*TagRewardItem `protobuf:"bytes,4,rep,name=reward_list,json=rewardList" json:"reward_list,omitempty"`
	PuzzleschipId    *int32           `protobuf:"varint,5,opt,name=puzzleschip_id,json=puzzleschipId" json:"puzzleschip_id,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_MB_S_GET_MISSION_REWARD) Reset()                    { *m = CMD_MB_S_GET_MISSION_REWARD{} }
func (m *CMD_MB_S_GET_MISSION_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_S_GET_MISSION_REWARD) ProtoMessage()               {}
func (*CMD_MB_S_GET_MISSION_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CMD_MB_S_GET_MISSION_REWARD) GetMissionType() uint32 {
	if m != nil && m.MissionType != nil {
		return *m.MissionType
	}
	return 0
}

func (m *CMD_MB_S_GET_MISSION_REWARD) GetMissionId() int32 {
	if m != nil && m.MissionId != nil {
		return *m.MissionId
	}
	return 0
}

func (m *CMD_MB_S_GET_MISSION_REWARD) GetReturnValue() int32 {
	if m != nil && m.ReturnValue != nil {
		return *m.ReturnValue
	}
	return 0
}

func (m *CMD_MB_S_GET_MISSION_REWARD) GetRewardList() []*TagRewardItem {
	if m != nil {
		return m.RewardList
	}
	return nil
}

func (m *CMD_MB_S_GET_MISSION_REWARD) GetPuzzleschipId() int32 {
	if m != nil && m.PuzzleschipId != nil {
		return *m.PuzzleschipId
	}
	return 0
}

// 领取活跃度奖励
type CMD_MB_C_GET_LIVENESS_REWARD struct {
	RewardId         *int32 `protobuf:"varint,1,opt,name=reward_id,json=rewardId" json:"reward_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_MB_C_GET_LIVENESS_REWARD) Reset()                    { *m = CMD_MB_C_GET_LIVENESS_REWARD{} }
func (m *CMD_MB_C_GET_LIVENESS_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_C_GET_LIVENESS_REWARD) ProtoMessage()               {}
func (*CMD_MB_C_GET_LIVENESS_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CMD_MB_C_GET_LIVENESS_REWARD) GetRewardId() int32 {
	if m != nil && m.RewardId != nil {
		return *m.RewardId
	}
	return 0
}

// 领取活跃度奖励
type CMD_MB_S_GET_LIVENESS_REWARD struct {
	Result           *int32           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	RewardList       []*TagRewardItem `protobuf:"bytes,2,rep,name=reward_list,json=rewardList" json:"reward_list,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CMD_MB_S_GET_LIVENESS_REWARD) Reset()                    { *m = CMD_MB_S_GET_LIVENESS_REWARD{} }
func (m *CMD_MB_S_GET_LIVENESS_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_S_GET_LIVENESS_REWARD) ProtoMessage()               {}
func (*CMD_MB_S_GET_LIVENESS_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CMD_MB_S_GET_LIVENESS_REWARD) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_MB_S_GET_LIVENESS_REWARD) GetRewardList() []*TagRewardItem {
	if m != nil {
		return m.RewardList
	}
	return nil
}

// 重置任务
type CMD_MB_C_RESET_MISSION struct {
	MissionType      *uint32 `protobuf:"varint,1,opt,name=mission_type,json=missionType" json:"mission_type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_MB_C_RESET_MISSION) Reset()                    { *m = CMD_MB_C_RESET_MISSION{} }
func (m *CMD_MB_C_RESET_MISSION) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_C_RESET_MISSION) ProtoMessage()               {}
func (*CMD_MB_C_RESET_MISSION) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CMD_MB_C_RESET_MISSION) GetMissionType() uint32 {
	if m != nil && m.MissionType != nil {
		return *m.MissionType
	}
	return 0
}

// 重置任务
type CMD_MB_S_RESET_MISSION struct {
	MissionType      *uint32               `protobuf:"varint,1,opt,name=mission_type,json=missionType" json:"mission_type,omitempty"`
	Result           *int32                `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	EverydayMissions []*TagEveryDayMission `protobuf:"bytes,3,rep,name=everyday_missions,json=everydayMissions" json:"everyday_missions,omitempty"`
	WeekMissions     []*TagEveryDayMission `protobuf:"bytes,4,rep,name=week_missions,json=weekMissions" json:"week_missions,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CMD_MB_S_RESET_MISSION) Reset()                    { *m = CMD_MB_S_RESET_MISSION{} }
func (m *CMD_MB_S_RESET_MISSION) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_S_RESET_MISSION) ProtoMessage()               {}
func (*CMD_MB_S_RESET_MISSION) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CMD_MB_S_RESET_MISSION) GetMissionType() uint32 {
	if m != nil && m.MissionType != nil {
		return *m.MissionType
	}
	return 0
}

func (m *CMD_MB_S_RESET_MISSION) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_MB_S_RESET_MISSION) GetEverydayMissions() []*TagEveryDayMission {
	if m != nil {
		return m.EverydayMissions
	}
	return nil
}

func (m *CMD_MB_S_RESET_MISSION) GetWeekMissions() []*TagEveryDayMission {
	if m != nil {
		return m.WeekMissions
	}
	return nil
}

// 领取周常藏宝阁奖励
type CMD_MB_C_GET_WEEK_REWARD struct {
	PuzzlesId        *int32 `protobuf:"varint,1,opt,name=puzzles_id,json=puzzlesId" json:"puzzles_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_MB_C_GET_WEEK_REWARD) Reset()                    { *m = CMD_MB_C_GET_WEEK_REWARD{} }
func (m *CMD_MB_C_GET_WEEK_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_C_GET_WEEK_REWARD) ProtoMessage()               {}
func (*CMD_MB_C_GET_WEEK_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CMD_MB_C_GET_WEEK_REWARD) GetPuzzlesId() int32 {
	if m != nil && m.PuzzlesId != nil {
		return *m.PuzzlesId
	}
	return 0
}

// 领取周常藏宝阁奖励
type CMD_MB_S_GET_WEEK_REWARD struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	PuzzlesId        *int32 `protobuf:"varint,2,opt,name=puzzles_id,json=puzzlesId" json:"puzzles_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_MB_S_GET_WEEK_REWARD) Reset()                    { *m = CMD_MB_S_GET_WEEK_REWARD{} }
func (m *CMD_MB_S_GET_WEEK_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_S_GET_WEEK_REWARD) ProtoMessage()               {}
func (*CMD_MB_S_GET_WEEK_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CMD_MB_S_GET_WEEK_REWARD) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_MB_S_GET_WEEK_REWARD) GetPuzzlesId() int32 {
	if m != nil && m.PuzzlesId != nil {
		return *m.PuzzlesId
	}
	return 0
}

// 请求玩家称号
type CMD_MB_C2S_ACHIEVEMENT_TITLE struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_MB_C2S_ACHIEVEMENT_TITLE) Reset()                    { *m = CMD_MB_C2S_ACHIEVEMENT_TITLE{} }
func (m *CMD_MB_C2S_ACHIEVEMENT_TITLE) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_C2S_ACHIEVEMENT_TITLE) ProtoMessage()               {}
func (*CMD_MB_C2S_ACHIEVEMENT_TITLE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

// 玩家称号
type CMD_MB_S2C_ACHIEVEMENT_TITLE struct {
	TitleId             *uint32  `protobuf:"varint,1,opt,name=title_id,json=titleId" json:"title_id,omitempty"`
	ArrAchievementTitle []uint32 `protobuf:"varint,2,rep,name=arr_achievement_title,json=arrAchievementTitle" json:"arr_achievement_title,omitempty"`
	XXX_unrecognized    []byte   `json:"-"`
}

func (m *CMD_MB_S2C_ACHIEVEMENT_TITLE) Reset()                    { *m = CMD_MB_S2C_ACHIEVEMENT_TITLE{} }
func (m *CMD_MB_S2C_ACHIEVEMENT_TITLE) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_S2C_ACHIEVEMENT_TITLE) ProtoMessage()               {}
func (*CMD_MB_S2C_ACHIEVEMENT_TITLE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CMD_MB_S2C_ACHIEVEMENT_TITLE) GetTitleId() uint32 {
	if m != nil && m.TitleId != nil {
		return *m.TitleId
	}
	return 0
}

func (m *CMD_MB_S2C_ACHIEVEMENT_TITLE) GetArrAchievementTitle() []uint32 {
	if m != nil {
		return m.ArrAchievementTitle
	}
	return nil
}

// 玩家佩戴称号
type CMD_MB_C2S_PUT_ON_ACHIEVEMENT_TITLE struct {
	AchievementTitle *uint32 `protobuf:"varint,1,opt,name=achievement_title,json=achievementTitle" json:"achievement_title,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_MB_C2S_PUT_ON_ACHIEVEMENT_TITLE) Reset()         { *m = CMD_MB_C2S_PUT_ON_ACHIEVEMENT_TITLE{} }
func (m *CMD_MB_C2S_PUT_ON_ACHIEVEMENT_TITLE) String() string { return proto.CompactTextString(m) }
func (*CMD_MB_C2S_PUT_ON_ACHIEVEMENT_TITLE) ProtoMessage()    {}
func (*CMD_MB_C2S_PUT_ON_ACHIEVEMENT_TITLE) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29}
}

func (m *CMD_MB_C2S_PUT_ON_ACHIEVEMENT_TITLE) GetAchievementTitle() uint32 {
	if m != nil && m.AchievementTitle != nil {
		return *m.AchievementTitle
	}
	return 0
}

// 玩家佩戴称号
type CMD_MB_S2C_PUT_ON_ACHIEVEMENT_TITLE struct {
	ResultCode       *uint32 `protobuf:"varint,1,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
	AchievementTitle *uint32 `protobuf:"varint,2,opt,name=achievement_title,json=achievementTitle" json:"achievement_title,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_MB_S2C_PUT_ON_ACHIEVEMENT_TITLE) Reset()         { *m = CMD_MB_S2C_PUT_ON_ACHIEVEMENT_TITLE{} }
func (m *CMD_MB_S2C_PUT_ON_ACHIEVEMENT_TITLE) String() string { return proto.CompactTextString(m) }
func (*CMD_MB_S2C_PUT_ON_ACHIEVEMENT_TITLE) ProtoMessage()    {}
func (*CMD_MB_S2C_PUT_ON_ACHIEVEMENT_TITLE) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{30}
}

func (m *CMD_MB_S2C_PUT_ON_ACHIEVEMENT_TITLE) GetResultCode() uint32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

func (m *CMD_MB_S2C_PUT_ON_ACHIEVEMENT_TITLE) GetAchievementTitle() uint32 {
	if m != nil && m.AchievementTitle != nil {
		return *m.AchievementTitle
	}
	return 0
}

type CMD_MB_C_SDK_BIND struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SdkId            []byte  `protobuf:"bytes,2,opt,name=sdk_id,json=sdkId" json:"sdk_id,omitempty"`
	LoginType        *uint32 `protobuf:"varint,3,opt,name=login_type,json=loginType" json:"login_type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_MB_C_SDK_BIND) Reset()                    { *m = CMD_MB_C_SDK_BIND{} }
func (m *CMD_MB_C_SDK_BIND) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_C_SDK_BIND) ProtoMessage()               {}
func (*CMD_MB_C_SDK_BIND) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *CMD_MB_C_SDK_BIND) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_MB_C_SDK_BIND) GetSdkId() []byte {
	if m != nil {
		return m.SdkId
	}
	return nil
}

func (m *CMD_MB_C_SDK_BIND) GetLoginType() uint32 {
	if m != nil && m.LoginType != nil {
		return *m.LoginType
	}
	return 0
}

type CMD_MB_S_SDK_BIND struct {
	ResultCode       *uint32 `protobuf:"varint,1,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_MB_S_SDK_BIND) Reset()                    { *m = CMD_MB_S_SDK_BIND{} }
func (m *CMD_MB_S_SDK_BIND) String() string            { return proto.CompactTextString(m) }
func (*CMD_MB_S_SDK_BIND) ProtoMessage()               {}
func (*CMD_MB_S_SDK_BIND) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *CMD_MB_S_SDK_BIND) GetResultCode() uint32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

// 排行奖励
type TagRankReward struct {
	Rank             *int32  `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	ItemType         *uint32 `protobuf:"varint,2,opt,name=item_type,json=itemType" json:"item_type,omitempty"`
	ItemId           *uint32 `protobuf:"varint,3,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemNum          *uint32 `protobuf:"varint,4,opt,name=item_num,json=itemNum" json:"item_num,omitempty"`
	EndRank          *int32  `protobuf:"varint,5,opt,name=end_rank,json=endRank" json:"end_rank,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagRankReward) Reset()                    { *m = TagRankReward{} }
func (m *TagRankReward) String() string            { return proto.CompactTextString(m) }
func (*TagRankReward) ProtoMessage()               {}
func (*TagRankReward) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *TagRankReward) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *TagRankReward) GetItemType() uint32 {
	if m != nil && m.ItemType != nil {
		return *m.ItemType
	}
	return 0
}

func (m *TagRankReward) GetItemId() uint32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *TagRankReward) GetItemNum() uint32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

func (m *TagRankReward) GetEndRank() int32 {
	if m != nil && m.EndRank != nil {
		return *m.EndRank
	}
	return 0
}

// 竞技场排行
type TagArenaRank struct {
	Rank             *int32 `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	NickName         []byte `protobuf:"bytes,2,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	Score            *int32 `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TagArenaRank) Reset()                    { *m = TagArenaRank{} }
func (m *TagArenaRank) String() string            { return proto.CompactTextString(m) }
func (*TagArenaRank) ProtoMessage()               {}
func (*TagArenaRank) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *TagArenaRank) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *TagArenaRank) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *TagArenaRank) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type CMD_GM_CMD struct {
	Cmd              []byte `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_GM_CMD) Reset()                    { *m = CMD_GM_CMD{} }
func (m *CMD_GM_CMD) String() string            { return proto.CompactTextString(m) }
func (*CMD_GM_CMD) ProtoMessage()               {}
func (*CMD_GM_CMD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *CMD_GM_CMD) GetCmd() []byte {
	if m != nil {
		return m.Cmd
	}
	return nil
}

type CMD_GM_CMD_RESP struct {
	Text             []byte `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_GM_CMD_RESP) Reset()                    { *m = CMD_GM_CMD_RESP{} }
func (m *CMD_GM_CMD_RESP) String() string            { return proto.CompactTextString(m) }
func (*CMD_GM_CMD_RESP) ProtoMessage()               {}
func (*CMD_GM_CMD_RESP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *CMD_GM_CMD_RESP) GetText() []byte {
	if m != nil {
		return m.Text
	}
	return nil
}

// 聊天服信息
type CMD_C_CHAT_SERVER_INFO struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_CHAT_SERVER_INFO) Reset()                    { *m = CMD_C_CHAT_SERVER_INFO{} }
func (m *CMD_C_CHAT_SERVER_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_CHAT_SERVER_INFO) ProtoMessage()               {}
func (*CMD_C_CHAT_SERVER_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

// 聊天服信息
type CMD_S_CHAT_SERVER_INFO struct {
	Port             *uint32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	Addr             *string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Token            *string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	Rand             *uint32 `protobuf:"varint,4,opt,name=rand" json:"rand,omitempty"`
	Rand2            *uint64 `protobuf:"varint,5,opt,name=rand2" json:"rand2,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_CHAT_SERVER_INFO) Reset()                    { *m = CMD_S_CHAT_SERVER_INFO{} }
func (m *CMD_S_CHAT_SERVER_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CHAT_SERVER_INFO) ProtoMessage()               {}
func (*CMD_S_CHAT_SERVER_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *CMD_S_CHAT_SERVER_INFO) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *CMD_S_CHAT_SERVER_INFO) GetAddr() string {
	if m != nil && m.Addr != nil {
		return *m.Addr
	}
	return ""
}

func (m *CMD_S_CHAT_SERVER_INFO) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *CMD_S_CHAT_SERVER_INFO) GetRand() uint32 {
	if m != nil && m.Rand != nil {
		return *m.Rand
	}
	return 0
}

func (m *CMD_S_CHAT_SERVER_INFO) GetRand2() uint64 {
	if m != nil && m.Rand2 != nil {
		return *m.Rand2
	}
	return 0
}

// 请求幸运数字活动信息
type CMD_C_LUCKY_NUMBER_INFO struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_LUCKY_NUMBER_INFO) Reset()                    { *m = CMD_C_LUCKY_NUMBER_INFO{} }
func (m *CMD_C_LUCKY_NUMBER_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_LUCKY_NUMBER_INFO) ProtoMessage()               {}
func (*CMD_C_LUCKY_NUMBER_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

// 请求幸运数字活动信息
type CMD_S_LUCKY_NUMBER_INFO struct {
	StartTime        *int64  `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	IsGot            *bool   `protobuf:"varint,2,opt,name=is_got,json=isGot" json:"is_got,omitempty"`
	CurDay           *uint32 `protobuf:"varint,3,opt,name=cur_day,json=curDay" json:"cur_day,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_LUCKY_NUMBER_INFO) Reset()                    { *m = CMD_S_LUCKY_NUMBER_INFO{} }
func (m *CMD_S_LUCKY_NUMBER_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_LUCKY_NUMBER_INFO) ProtoMessage()               {}
func (*CMD_S_LUCKY_NUMBER_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *CMD_S_LUCKY_NUMBER_INFO) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMD_S_LUCKY_NUMBER_INFO) GetIsGot() bool {
	if m != nil && m.IsGot != nil {
		return *m.IsGot
	}
	return false
}

func (m *CMD_S_LUCKY_NUMBER_INFO) GetCurDay() uint32 {
	if m != nil && m.CurDay != nil {
		return *m.CurDay
	}
	return 0
}

// 获取任务进度
type CMD_C_GET_LUCKY_NUMBER_TASK_PROGRESS struct {
	Day              *uint32 `protobuf:"varint,1,opt,name=day" json:"day,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_GET_LUCKY_NUMBER_TASK_PROGRESS) Reset()         { *m = CMD_C_GET_LUCKY_NUMBER_TASK_PROGRESS{} }
func (m *CMD_C_GET_LUCKY_NUMBER_TASK_PROGRESS) String() string { return proto.CompactTextString(m) }
func (*CMD_C_GET_LUCKY_NUMBER_TASK_PROGRESS) ProtoMessage()    {}
func (*CMD_C_GET_LUCKY_NUMBER_TASK_PROGRESS) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41}
}

func (m *CMD_C_GET_LUCKY_NUMBER_TASK_PROGRESS) GetDay() uint32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

// 任务
type LuckyNumberTask struct {
	Id               *uint32                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Progress         *uint32                 `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	Status           *LuckyNumberTask_Status `protobuf:"varint,3,opt,name=status,enum=CMD.LuckyNumberTask_Status" json:"status,omitempty"`
	LuckyNum         *uint32                 `protobuf:"varint,4,opt,name=lucky_num,json=luckyNum" json:"lucky_num,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *LuckyNumberTask) Reset()                    { *m = LuckyNumberTask{} }
func (m *LuckyNumberTask) String() string            { return proto.CompactTextString(m) }
func (*LuckyNumberTask) ProtoMessage()               {}
func (*LuckyNumberTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *LuckyNumberTask) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LuckyNumberTask) GetProgress() uint32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

func (m *LuckyNumberTask) GetStatus() LuckyNumberTask_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return LuckyNumberTask_Undone
}

func (m *LuckyNumberTask) GetLuckyNum() uint32 {
	if m != nil && m.LuckyNum != nil {
		return *m.LuckyNum
	}
	return 0
}

// 获取任务进度
type CMD_S_GET_LUCKY_NUMBER_TASK_PROGRESS struct {
	Day              *uint32            `protobuf:"varint,1,opt,name=day" json:"day,omitempty"`
	Tasks            []*LuckyNumberTask `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CMD_S_GET_LUCKY_NUMBER_TASK_PROGRESS) Reset()         { *m = CMD_S_GET_LUCKY_NUMBER_TASK_PROGRESS{} }
func (m *CMD_S_GET_LUCKY_NUMBER_TASK_PROGRESS) String() string { return proto.CompactTextString(m) }
func (*CMD_S_GET_LUCKY_NUMBER_TASK_PROGRESS) ProtoMessage()    {}
func (*CMD_S_GET_LUCKY_NUMBER_TASK_PROGRESS) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{43}
}

func (m *CMD_S_GET_LUCKY_NUMBER_TASK_PROGRESS) GetDay() uint32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *CMD_S_GET_LUCKY_NUMBER_TASK_PROGRESS) GetTasks() []*LuckyNumberTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// 领取任务奖励
type CMD_C_GET_LUCKY_NUMBER_TASK_REWARD struct {
	TaskId           *uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_GET_LUCKY_NUMBER_TASK_REWARD) Reset()         { *m = CMD_C_GET_LUCKY_NUMBER_TASK_REWARD{} }
func (m *CMD_C_GET_LUCKY_NUMBER_TASK_REWARD) String() string { return proto.CompactTextString(m) }
func (*CMD_C_GET_LUCKY_NUMBER_TASK_REWARD) ProtoMessage()    {}
func (*CMD_C_GET_LUCKY_NUMBER_TASK_REWARD) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{44}
}

func (m *CMD_C_GET_LUCKY_NUMBER_TASK_REWARD) GetTaskId() uint32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

// 领取任务奖励
type CMD_S_GET_LUCKY_NUMBER_TASK_REWARD struct {
	TaskId           *uint32                                    `protobuf:"varint,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Result           *CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result `protobuf:"varint,2,opt,name=result,enum=CMD.CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result" json:"result,omitempty"`
	ItemType         *uint32                                    `protobuf:"varint,3,opt,name=item_type,json=itemType" json:"item_type,omitempty"`
	ItemId           *uint32                                    `protobuf:"varint,4,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemNum          *uint32                                    `protobuf:"varint,5,opt,name=item_num,json=itemNum" json:"item_num,omitempty"`
	LuckyNum         *uint32                                    `protobuf:"varint,6,opt,name=lucky_num,json=luckyNum" json:"lucky_num,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMD_S_GET_LUCKY_NUMBER_TASK_REWARD) Reset()         { *m = CMD_S_GET_LUCKY_NUMBER_TASK_REWARD{} }
func (m *CMD_S_GET_LUCKY_NUMBER_TASK_REWARD) String() string { return proto.CompactTextString(m) }
func (*CMD_S_GET_LUCKY_NUMBER_TASK_REWARD) ProtoMessage()    {}
func (*CMD_S_GET_LUCKY_NUMBER_TASK_REWARD) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{45}
}

func (m *CMD_S_GET_LUCKY_NUMBER_TASK_REWARD) GetTaskId() uint32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

func (m *CMD_S_GET_LUCKY_NUMBER_TASK_REWARD) GetResult() CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Success
}

func (m *CMD_S_GET_LUCKY_NUMBER_TASK_REWARD) GetItemType() uint32 {
	if m != nil && m.ItemType != nil {
		return *m.ItemType
	}
	return 0
}

func (m *CMD_S_GET_LUCKY_NUMBER_TASK_REWARD) GetItemId() uint32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *CMD_S_GET_LUCKY_NUMBER_TASK_REWARD) GetItemNum() uint32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

func (m *CMD_S_GET_LUCKY_NUMBER_TASK_REWARD) GetLuckyNum() uint32 {
	if m != nil && m.LuckyNum != nil {
		return *m.LuckyNum
	}
	return 0
}

// 查看中奖数字
type CMD_C_LOOKUP_LUCKY_NUMBER struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_LOOKUP_LUCKY_NUMBER) Reset()                    { *m = CMD_C_LOOKUP_LUCKY_NUMBER{} }
func (m *CMD_C_LOOKUP_LUCKY_NUMBER) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_LOOKUP_LUCKY_NUMBER) ProtoMessage()               {}
func (*CMD_C_LOOKUP_LUCKY_NUMBER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

// 查看中奖数字
type CMD_S_LOOKUP_LUCKY_NUMBER struct {
	Nums             []int32 `protobuf:"varint,1,rep,name=nums" json:"nums,omitempty"`
	LuckyNum         *uint32 `protobuf:"varint,2,opt,name=lucky_num,json=luckyNum" json:"lucky_num,omitempty"`
	Count            *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_LOOKUP_LUCKY_NUMBER) Reset()                    { *m = CMD_S_LOOKUP_LUCKY_NUMBER{} }
func (m *CMD_S_LOOKUP_LUCKY_NUMBER) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_LOOKUP_LUCKY_NUMBER) ProtoMessage()               {}
func (*CMD_S_LOOKUP_LUCKY_NUMBER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *CMD_S_LOOKUP_LUCKY_NUMBER) GetNums() []int32 {
	if m != nil {
		return m.Nums
	}
	return nil
}

func (m *CMD_S_LOOKUP_LUCKY_NUMBER) GetLuckyNum() uint32 {
	if m != nil && m.LuckyNum != nil {
		return *m.LuckyNum
	}
	return 0
}

func (m *CMD_S_LOOKUP_LUCKY_NUMBER) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// 领取活动奖励
type CMD_C_GET_LUCKY_NUMBER_REWARD struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_C_GET_LUCKY_NUMBER_REWARD) Reset()                    { *m = CMD_C_GET_LUCKY_NUMBER_REWARD{} }
func (m *CMD_C_GET_LUCKY_NUMBER_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_GET_LUCKY_NUMBER_REWARD) ProtoMessage()               {}
func (*CMD_C_GET_LUCKY_NUMBER_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

// 领取活动奖励
type CMD_S_GET_LUCKY_NUMBER_REWARD struct {
	Result           *CMD_S_GET_LUCKY_NUMBER_REWARD_Result `protobuf:"varint,1,opt,name=result,enum=CMD.CMD_S_GET_LUCKY_NUMBER_REWARD_Result" json:"result,omitempty"`
	ItemId           *uint32                               `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemNum          *uint32                               `protobuf:"varint,3,opt,name=item_num,json=itemNum" json:"item_num,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *CMD_S_GET_LUCKY_NUMBER_REWARD) Reset()                    { *m = CMD_S_GET_LUCKY_NUMBER_REWARD{} }
func (m *CMD_S_GET_LUCKY_NUMBER_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_GET_LUCKY_NUMBER_REWARD) ProtoMessage()               {}
func (*CMD_S_GET_LUCKY_NUMBER_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *CMD_S_GET_LUCKY_NUMBER_REWARD) GetResult() CMD_S_GET_LUCKY_NUMBER_REWARD_Result {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return CMD_S_GET_LUCKY_NUMBER_REWARD_Success
}

func (m *CMD_S_GET_LUCKY_NUMBER_REWARD) GetItemId() uint32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *CMD_S_GET_LUCKY_NUMBER_REWARD) GetItemNum() uint32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

// 通过幸运数字任务充值
type CMD_C_RECHARGE_IN_LUCKY_NUMBER struct {
	TaskId           *uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Recharge         *uint32 `protobuf:"varint,2,opt,name=recharge" json:"recharge,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_RECHARGE_IN_LUCKY_NUMBER) Reset()                    { *m = CMD_C_RECHARGE_IN_LUCKY_NUMBER{} }
func (m *CMD_C_RECHARGE_IN_LUCKY_NUMBER) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_RECHARGE_IN_LUCKY_NUMBER) ProtoMessage()               {}
func (*CMD_C_RECHARGE_IN_LUCKY_NUMBER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *CMD_C_RECHARGE_IN_LUCKY_NUMBER) GetTaskId() uint32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

func (m *CMD_C_RECHARGE_IN_LUCKY_NUMBER) GetRecharge() uint32 {
	if m != nil && m.Recharge != nil {
		return *m.Recharge
	}
	return 0
}

type CMD_C_NEWPLAYER_INFO struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_NEWPLAYER_INFO) Reset()                    { *m = CMD_C_NEWPLAYER_INFO{} }
func (m *CMD_C_NEWPLAYER_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_NEWPLAYER_INFO) ProtoMessage()               {}
func (*CMD_C_NEWPLAYER_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *CMD_C_NEWPLAYER_INFO) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type CMD_S_NEWPLAYER_INFO struct {
	LoginDays            *int32 `protobuf:"varint,1,opt,name=login_days,json=loginDays" json:"login_days,omitempty"`
	IsGiveLoginReward    *bool  `protobuf:"varint,2,opt,name=is_give_login_reward,json=isGiveLoginReward" json:"is_give_login_reward,omitempty"`
	LeftLoginDays        *int32 `protobuf:"varint,3,opt,name=left_login_days,json=leftLoginDays" json:"left_login_days,omitempty"`
	BonusMissionId       *int32 `protobuf:"varint,4,opt,name=bonus_mission_id,json=bonusMissionId" json:"bonus_mission_id,omitempty"`
	BonusMissionProgress *int32 `protobuf:"varint,5,opt,name=bonus_mission_progress,json=bonusMissionProgress" json:"bonus_mission_progress,omitempty"`
	IsGiveBonus          *bool  `protobuf:"varint,6,opt,name=is_give_bonus,json=isGiveBonus" json:"is_give_bonus,omitempty"`
	LeftMissionDays      *int32 `protobuf:"varint,7,opt,name=left_mission_days,json=leftMissionDays" json:"left_mission_days,omitempty"`
	XXX_unrecognized     []byte `json:"-"`
}

func (m *CMD_S_NEWPLAYER_INFO) Reset()                    { *m = CMD_S_NEWPLAYER_INFO{} }
func (m *CMD_S_NEWPLAYER_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_NEWPLAYER_INFO) ProtoMessage()               {}
func (*CMD_S_NEWPLAYER_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *CMD_S_NEWPLAYER_INFO) GetLoginDays() int32 {
	if m != nil && m.LoginDays != nil {
		return *m.LoginDays
	}
	return 0
}

func (m *CMD_S_NEWPLAYER_INFO) GetIsGiveLoginReward() bool {
	if m != nil && m.IsGiveLoginReward != nil {
		return *m.IsGiveLoginReward
	}
	return false
}

func (m *CMD_S_NEWPLAYER_INFO) GetLeftLoginDays() int32 {
	if m != nil && m.LeftLoginDays != nil {
		return *m.LeftLoginDays
	}
	return 0
}

func (m *CMD_S_NEWPLAYER_INFO) GetBonusMissionId() int32 {
	if m != nil && m.BonusMissionId != nil {
		return *m.BonusMissionId
	}
	return 0
}

func (m *CMD_S_NEWPLAYER_INFO) GetBonusMissionProgress() int32 {
	if m != nil && m.BonusMissionProgress != nil {
		return *m.BonusMissionProgress
	}
	return 0
}

func (m *CMD_S_NEWPLAYER_INFO) GetIsGiveBonus() bool {
	if m != nil && m.IsGiveBonus != nil {
		return *m.IsGiveBonus
	}
	return false
}

func (m *CMD_S_NEWPLAYER_INFO) GetLeftMissionDays() int32 {
	if m != nil && m.LeftMissionDays != nil {
		return *m.LeftMissionDays
	}
	return 0
}

type CMD_C_USER_LOGINDAY_REWARD struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_USER_LOGINDAY_REWARD) Reset()                    { *m = CMD_C_USER_LOGINDAY_REWARD{} }
func (m *CMD_C_USER_LOGINDAY_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_USER_LOGINDAY_REWARD) ProtoMessage()               {}
func (*CMD_C_USER_LOGINDAY_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *CMD_C_USER_LOGINDAY_REWARD) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type CMD_S_USER_LOGINDAY_REWARD struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	VipLevel         *int32 `protobuf:"varint,2,opt,name=vip_level,json=vipLevel" json:"vip_level,omitempty"`
	RewardType       *int32 `protobuf:"varint,3,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	RewardSubtype    *int32 `protobuf:"varint,4,opt,name=reward_subtype,json=rewardSubtype" json:"reward_subtype,omitempty"`
	RewardValue      *int32 `protobuf:"varint,5,opt,name=reward_value,json=rewardValue" json:"reward_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_USER_LOGINDAY_REWARD) Reset()                    { *m = CMD_S_USER_LOGINDAY_REWARD{} }
func (m *CMD_S_USER_LOGINDAY_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_USER_LOGINDAY_REWARD) ProtoMessage()               {}
func (*CMD_S_USER_LOGINDAY_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *CMD_S_USER_LOGINDAY_REWARD) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_S_USER_LOGINDAY_REWARD) GetVipLevel() int32 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

func (m *CMD_S_USER_LOGINDAY_REWARD) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *CMD_S_USER_LOGINDAY_REWARD) GetRewardSubtype() int32 {
	if m != nil && m.RewardSubtype != nil {
		return *m.RewardSubtype
	}
	return 0
}

func (m *CMD_S_USER_LOGINDAY_REWARD) GetRewardValue() int32 {
	if m != nil && m.RewardValue != nil {
		return *m.RewardValue
	}
	return 0
}

type CMD_C_CARNIVAL_WELFARE_INFO struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_CARNIVAL_WELFARE_INFO) Reset()                    { *m = CMD_C_CARNIVAL_WELFARE_INFO{} }
func (m *CMD_C_CARNIVAL_WELFARE_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_CARNIVAL_WELFARE_INFO) ProtoMessage()               {}
func (*CMD_C_CARNIVAL_WELFARE_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *CMD_C_CARNIVAL_WELFARE_INFO) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type CMD_S_CARNIVAL_WELFARE_INFO struct {
	RegTime          *int64 `protobuf:"varint,1,opt,name=reg_time,json=regTime" json:"reg_time,omitempty"`
	ResetMum         *int32 `protobuf:"varint,2,opt,name=reset_mum,json=resetMum" json:"reset_mum,omitempty"`
	CurDays          *int32 `protobuf:"varint,3,opt,name=cur_days,json=curDays" json:"cur_days,omitempty"`
	IsGiveReward     *bool  `protobuf:"varint,4,opt,name=is_give_reward,json=isGiveReward" json:"is_give_reward,omitempty"`
	RewardType       *int32 `protobuf:"varint,5,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	Nums             *int32 `protobuf:"varint,6,opt,name=nums" json:"nums,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_CARNIVAL_WELFARE_INFO) Reset()                    { *m = CMD_S_CARNIVAL_WELFARE_INFO{} }
func (m *CMD_S_CARNIVAL_WELFARE_INFO) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CARNIVAL_WELFARE_INFO) ProtoMessage()               {}
func (*CMD_S_CARNIVAL_WELFARE_INFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *CMD_S_CARNIVAL_WELFARE_INFO) GetRegTime() int64 {
	if m != nil && m.RegTime != nil {
		return *m.RegTime
	}
	return 0
}

func (m *CMD_S_CARNIVAL_WELFARE_INFO) GetResetMum() int32 {
	if m != nil && m.ResetMum != nil {
		return *m.ResetMum
	}
	return 0
}

func (m *CMD_S_CARNIVAL_WELFARE_INFO) GetCurDays() int32 {
	if m != nil && m.CurDays != nil {
		return *m.CurDays
	}
	return 0
}

func (m *CMD_S_CARNIVAL_WELFARE_INFO) GetIsGiveReward() bool {
	if m != nil && m.IsGiveReward != nil {
		return *m.IsGiveReward
	}
	return false
}

func (m *CMD_S_CARNIVAL_WELFARE_INFO) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *CMD_S_CARNIVAL_WELFARE_INFO) GetNums() int32 {
	if m != nil && m.Nums != nil {
		return *m.Nums
	}
	return 0
}

type CMD_C_CARNIVAL_WELFARE_DRAW struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_CARNIVAL_WELFARE_DRAW) Reset()                    { *m = CMD_C_CARNIVAL_WELFARE_DRAW{} }
func (m *CMD_C_CARNIVAL_WELFARE_DRAW) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_CARNIVAL_WELFARE_DRAW) ProtoMessage()               {}
func (*CMD_C_CARNIVAL_WELFARE_DRAW) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *CMD_C_CARNIVAL_WELFARE_DRAW) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type CMD_S_CARNIVAL_WELFARE_DRAW struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ResetMum         *int32 `protobuf:"varint,2,opt,name=reset_mum,json=resetMum" json:"reset_mum,omitempty"`
	NewNum           *int32 `protobuf:"varint,3,opt,name=new_num,json=newNum" json:"new_num,omitempty"`
	CurDays          *int32 `protobuf:"varint,4,opt,name=cur_days,json=curDays" json:"cur_days,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_CARNIVAL_WELFARE_DRAW) Reset()                    { *m = CMD_S_CARNIVAL_WELFARE_DRAW{} }
func (m *CMD_S_CARNIVAL_WELFARE_DRAW) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CARNIVAL_WELFARE_DRAW) ProtoMessage()               {}
func (*CMD_S_CARNIVAL_WELFARE_DRAW) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *CMD_S_CARNIVAL_WELFARE_DRAW) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_S_CARNIVAL_WELFARE_DRAW) GetResetMum() int32 {
	if m != nil && m.ResetMum != nil {
		return *m.ResetMum
	}
	return 0
}

func (m *CMD_S_CARNIVAL_WELFARE_DRAW) GetNewNum() int32 {
	if m != nil && m.NewNum != nil {
		return *m.NewNum
	}
	return 0
}

func (m *CMD_S_CARNIVAL_WELFARE_DRAW) GetCurDays() int32 {
	if m != nil && m.CurDays != nil {
		return *m.CurDays
	}
	return 0
}

type CMD_C_CARNIVAL_WELFARE_REWARD struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_CARNIVAL_WELFARE_REWARD) Reset()                    { *m = CMD_C_CARNIVAL_WELFARE_REWARD{} }
func (m *CMD_C_CARNIVAL_WELFARE_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_CARNIVAL_WELFARE_REWARD) ProtoMessage()               {}
func (*CMD_C_CARNIVAL_WELFARE_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *CMD_C_CARNIVAL_WELFARE_REWARD) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type CMD_S_CARNIVAL_WELFARE_REWARD struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	RewardType       *int32 `protobuf:"varint,2,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	RewardValue      *int32 `protobuf:"varint,3,opt,name=reward_value,json=rewardValue" json:"reward_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_CARNIVAL_WELFARE_REWARD) Reset()                    { *m = CMD_S_CARNIVAL_WELFARE_REWARD{} }
func (m *CMD_S_CARNIVAL_WELFARE_REWARD) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_CARNIVAL_WELFARE_REWARD) ProtoMessage()               {}
func (*CMD_S_CARNIVAL_WELFARE_REWARD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *CMD_S_CARNIVAL_WELFARE_REWARD) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_S_CARNIVAL_WELFARE_REWARD) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *CMD_S_CARNIVAL_WELFARE_REWARD) GetRewardValue() int32 {
	if m != nil && m.RewardValue != nil {
		return *m.RewardValue
	}
	return 0
}

type CMD_C_SEAGOD_GIFT_GET struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GiftId           *uint32 `protobuf:"varint,2,opt,name=gift_id,json=giftId" json:"gift_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_SEAGOD_GIFT_GET) Reset()                    { *m = CMD_C_SEAGOD_GIFT_GET{} }
func (m *CMD_C_SEAGOD_GIFT_GET) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_SEAGOD_GIFT_GET) ProtoMessage()               {}
func (*CMD_C_SEAGOD_GIFT_GET) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *CMD_C_SEAGOD_GIFT_GET) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_C_SEAGOD_GIFT_GET) GetGiftId() uint32 {
	if m != nil && m.GiftId != nil {
		return *m.GiftId
	}
	return 0
}

type CMD_S_SEAGOD_GIFT_GET struct {
	Result           *int32  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	UserId           *uint32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GiftId           *uint32 `protobuf:"varint,3,opt,name=gift_id,json=giftId" json:"gift_id,omitempty"`
	AddScore         *uint32 `protobuf:"varint,4,opt,name=add_score,json=addScore" json:"add_score,omitempty"`
	AddDiamond       *uint32 `protobuf:"varint,5,opt,name=add_diamond,json=addDiamond" json:"add_diamond,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_SEAGOD_GIFT_GET) Reset()                    { *m = CMD_S_SEAGOD_GIFT_GET{} }
func (m *CMD_S_SEAGOD_GIFT_GET) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SEAGOD_GIFT_GET) ProtoMessage()               {}
func (*CMD_S_SEAGOD_GIFT_GET) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *CMD_S_SEAGOD_GIFT_GET) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CMD_S_SEAGOD_GIFT_GET) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_S_SEAGOD_GIFT_GET) GetGiftId() uint32 {
	if m != nil && m.GiftId != nil {
		return *m.GiftId
	}
	return 0
}

func (m *CMD_S_SEAGOD_GIFT_GET) GetAddScore() uint32 {
	if m != nil && m.AddScore != nil {
		return *m.AddScore
	}
	return 0
}

func (m *CMD_S_SEAGOD_GIFT_GET) GetAddDiamond() uint32 {
	if m != nil && m.AddDiamond != nil {
		return *m.AddDiamond
	}
	return 0
}

type CMD_S_ANTIADDICTION struct {
	OnlineTime       *uint32 `protobuf:"varint,1,opt,name=online_time,json=onlineTime" json:"online_time,omitempty"`
	AddictionState   *uint32 `protobuf:"varint,2,opt,name=addiction_state,json=addictionState" json:"addiction_state,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_S_ANTIADDICTION) Reset()                    { *m = CMD_S_ANTIADDICTION{} }
func (m *CMD_S_ANTIADDICTION) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_ANTIADDICTION) ProtoMessage()               {}
func (*CMD_S_ANTIADDICTION) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *CMD_S_ANTIADDICTION) GetOnlineTime() uint32 {
	if m != nil && m.OnlineTime != nil {
		return *m.OnlineTime
	}
	return 0
}

func (m *CMD_S_ANTIADDICTION) GetAddictionState() uint32 {
	if m != nil && m.AddictionState != nil {
		return *m.AddictionState
	}
	return 0
}

type CMD_S_SMT_POP_UP struct {
	Text             []byte `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_SMT_POP_UP) Reset()                    { *m = CMD_S_SMT_POP_UP{} }
func (m *CMD_S_SMT_POP_UP) String() string            { return proto.CompactTextString(m) }
func (*CMD_S_SMT_POP_UP) ProtoMessage()               {}
func (*CMD_S_SMT_POP_UP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *CMD_S_SMT_POP_UP) GetText() []byte {
	if m != nil {
		return m.Text
	}
	return nil
}

type CMD_C_GuestRegisterAccount struct {
	UserId           *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Accounts         []byte  `protobuf:"bytes,2,opt,name=accounts" json:"accounts,omitempty"`
	LogonPass        []byte  `protobuf:"bytes,3,opt,name=logon_pass,json=logonPass" json:"logon_pass,omitempty"`
	MachineId        []byte  `protobuf:"bytes,4,opt,name=machine_id,json=machineId" json:"machine_id,omitempty"`
	Passport         []byte  `protobuf:"bytes,5,opt,name=passport" json:"passport,omitempty"`
	Name             []byte  `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMD_C_GuestRegisterAccount) Reset()                    { *m = CMD_C_GuestRegisterAccount{} }
func (m *CMD_C_GuestRegisterAccount) String() string            { return proto.CompactTextString(m) }
func (*CMD_C_GuestRegisterAccount) ProtoMessage()               {}
func (*CMD_C_GuestRegisterAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *CMD_C_GuestRegisterAccount) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *CMD_C_GuestRegisterAccount) GetAccounts() []byte {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *CMD_C_GuestRegisterAccount) GetLogonPass() []byte {
	if m != nil {
		return m.LogonPass
	}
	return nil
}

func (m *CMD_C_GuestRegisterAccount) GetMachineId() []byte {
	if m != nil {
		return m.MachineId
	}
	return nil
}

func (m *CMD_C_GuestRegisterAccount) GetPassport() []byte {
	if m != nil {
		return m.Passport
	}
	return nil
}

func (m *CMD_C_GuestRegisterAccount) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

type CMD_S_GuestRegisterAccount_Result struct {
	ResultCode       *int32 `protobuf:"varint,1,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
	NickName         []byte `protobuf:"bytes,2,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	Describe         []byte `protobuf:"bytes,3,opt,name=describe" json:"describe,omitempty"`
	IsAdult          *bool  `protobuf:"varint,4,opt,name=IsAdult" json:"IsAdult,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMD_S_GuestRegisterAccount_Result) Reset()         { *m = CMD_S_GuestRegisterAccount_Result{} }
func (m *CMD_S_GuestRegisterAccount_Result) String() string { return proto.CompactTextString(m) }
func (*CMD_S_GuestRegisterAccount_Result) ProtoMessage()    {}
func (*CMD_S_GuestRegisterAccount_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{66}
}

func (m *CMD_S_GuestRegisterAccount_Result) GetResultCode() int32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

func (m *CMD_S_GuestRegisterAccount_Result) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *CMD_S_GuestRegisterAccount_Result) GetDescribe() []byte {
	if m != nil {
		return m.Describe
	}
	return nil
}

func (m *CMD_S_GuestRegisterAccount_Result) GetIsAdult() bool {
	if m != nil && m.IsAdult != nil {
		return *m.IsAdult
	}
	return false
}

func init() {
	proto.RegisterType((*TagMBInsureRecordData)(nil), "CMD.tagMBInsureRecordData")
	proto.RegisterType((*CMD_MB_C2S_ADD_REWARD)(nil), "CMD.CMD_MB_C2S_ADD_REWARD")
	proto.RegisterType((*CMD_MB_S2C_ADD_REWARD)(nil), "CMD.CMD_MB_S2C_ADD_REWARD")
	proto.RegisterType((*CMD_MB_C2S_PURCHASE_TRADE_VIEW_STATUS)(nil), "CMD.CMD_MB_C2S_PURCHASE_TRADE_VIEW_STATUS")
	proto.RegisterType((*CMD_MB_S2C_PURCHASE_TRADE_VIEW_STATUS)(nil), "CMD.CMD_MB_S2C_PURCHASE_TRADE_VIEW_STATUS")
	proto.RegisterType((*TagUserSkill)(nil), "CMD.tagUserSkill")
	proto.RegisterType((*CMD_GR_C_INVITE_MATCH)(nil), "CMD.CMD_GR_C_INVITE_MATCH")
	proto.RegisterType((*CMD_GR_S_INVITE_MATCH)(nil), "CMD.CMD_GR_S_INVITE_MATCH")
	proto.RegisterType((*CMD_Speaker_S_UserChat)(nil), "CMD.CMD_Speaker_S_UserChat")
	proto.RegisterType((*CMD_Speaker_C_UserChat)(nil), "CMD.CMD_Speaker_C_UserChat")
	proto.RegisterType((*CMD_Speaker_S_UserChat_Fail)(nil), "CMD.CMD_Speaker_S_UserChat_Fail")
	proto.RegisterType((*CMD_C_QueryPurchaseUndealedTrade)(nil), "CMD.CMD_C_QueryPurchaseUndealedTrade")
	proto.RegisterType((*TagRewardItem)(nil), "CMD.tagRewardItem")
	proto.RegisterType((*CMD_MB_C_LOAD_MISSION)(nil), "CMD.CMD_MB_C_LOAD_MISSION")
	proto.RegisterType((*TagEveryDayMission)(nil), "CMD.tagEveryDayMission")
	proto.RegisterType((*TagEveryDayExtMission)(nil), "CMD.tagEveryDayExtMission")
	proto.RegisterType((*TagWeekDayExtReward)(nil), "CMD.tagWeekDayExtReward")
	proto.RegisterType((*TagWeekDayExtMission)(nil), "CMD.tagWeekDayExtMission")
	proto.RegisterType((*CMD_MB_S_LOAD_MISSION)(nil), "CMD.CMD_MB_S_LOAD_MISSION")
	proto.RegisterType((*CMD_MB_C_GET_MISSION_REWARD)(nil), "CMD.CMD_MB_C_GET_MISSION_REWARD")
	proto.RegisterType((*CMD_MB_S_GET_MISSION_REWARD)(nil), "CMD.CMD_MB_S_GET_MISSION_REWARD")
	proto.RegisterType((*CMD_MB_C_GET_LIVENESS_REWARD)(nil), "CMD.CMD_MB_C_GET_LIVENESS_REWARD")
	proto.RegisterType((*CMD_MB_S_GET_LIVENESS_REWARD)(nil), "CMD.CMD_MB_S_GET_LIVENESS_REWARD")
	proto.RegisterType((*CMD_MB_C_RESET_MISSION)(nil), "CMD.CMD_MB_C_RESET_MISSION")
	proto.RegisterType((*CMD_MB_S_RESET_MISSION)(nil), "CMD.CMD_MB_S_RESET_MISSION")
	proto.RegisterType((*CMD_MB_C_GET_WEEK_REWARD)(nil), "CMD.CMD_MB_C_GET_WEEK_REWARD")
	proto.RegisterType((*CMD_MB_S_GET_WEEK_REWARD)(nil), "CMD.CMD_MB_S_GET_WEEK_REWARD")
	proto.RegisterType((*CMD_MB_C2S_ACHIEVEMENT_TITLE)(nil), "CMD.CMD_MB_C2S_ACHIEVEMENT_TITLE")
	proto.RegisterType((*CMD_MB_S2C_ACHIEVEMENT_TITLE)(nil), "CMD.CMD_MB_S2C_ACHIEVEMENT_TITLE")
	proto.RegisterType((*CMD_MB_C2S_PUT_ON_ACHIEVEMENT_TITLE)(nil), "CMD.CMD_MB_C2S_PUT_ON_ACHIEVEMENT_TITLE")
	proto.RegisterType((*CMD_MB_S2C_PUT_ON_ACHIEVEMENT_TITLE)(nil), "CMD.CMD_MB_S2C_PUT_ON_ACHIEVEMENT_TITLE")
	proto.RegisterType((*CMD_MB_C_SDK_BIND)(nil), "CMD.CMD_MB_C_SDK_BIND")
	proto.RegisterType((*CMD_MB_S_SDK_BIND)(nil), "CMD.CMD_MB_S_SDK_BIND")
	proto.RegisterType((*TagRankReward)(nil), "CMD.tagRankReward")
	proto.RegisterType((*TagArenaRank)(nil), "CMD.tagArenaRank")
	proto.RegisterType((*CMD_GM_CMD)(nil), "CMD.CMD_GM_CMD")
	proto.RegisterType((*CMD_GM_CMD_RESP)(nil), "CMD.CMD_GM_CMD_RESP")
	proto.RegisterType((*CMD_C_CHAT_SERVER_INFO)(nil), "CMD.CMD_C_CHAT_SERVER_INFO")
	proto.RegisterType((*CMD_S_CHAT_SERVER_INFO)(nil), "CMD.CMD_S_CHAT_SERVER_INFO")
	proto.RegisterType((*CMD_C_LUCKY_NUMBER_INFO)(nil), "CMD.CMD_C_LUCKY_NUMBER_INFO")
	proto.RegisterType((*CMD_S_LUCKY_NUMBER_INFO)(nil), "CMD.CMD_S_LUCKY_NUMBER_INFO")
	proto.RegisterType((*CMD_C_GET_LUCKY_NUMBER_TASK_PROGRESS)(nil), "CMD.CMD_C_GET_LUCKY_NUMBER_TASK_PROGRESS")
	proto.RegisterType((*LuckyNumberTask)(nil), "CMD.LuckyNumberTask")
	proto.RegisterType((*CMD_S_GET_LUCKY_NUMBER_TASK_PROGRESS)(nil), "CMD.CMD_S_GET_LUCKY_NUMBER_TASK_PROGRESS")
	proto.RegisterType((*CMD_C_GET_LUCKY_NUMBER_TASK_REWARD)(nil), "CMD.CMD_C_GET_LUCKY_NUMBER_TASK_REWARD")
	proto.RegisterType((*CMD_S_GET_LUCKY_NUMBER_TASK_REWARD)(nil), "CMD.CMD_S_GET_LUCKY_NUMBER_TASK_REWARD")
	proto.RegisterType((*CMD_C_LOOKUP_LUCKY_NUMBER)(nil), "CMD.CMD_C_LOOKUP_LUCKY_NUMBER")
	proto.RegisterType((*CMD_S_LOOKUP_LUCKY_NUMBER)(nil), "CMD.CMD_S_LOOKUP_LUCKY_NUMBER")
	proto.RegisterType((*CMD_C_GET_LUCKY_NUMBER_REWARD)(nil), "CMD.CMD_C_GET_LUCKY_NUMBER_REWARD")
	proto.RegisterType((*CMD_S_GET_LUCKY_NUMBER_REWARD)(nil), "CMD.CMD_S_GET_LUCKY_NUMBER_REWARD")
	proto.RegisterType((*CMD_C_RECHARGE_IN_LUCKY_NUMBER)(nil), "CMD.CMD_C_RECHARGE_IN_LUCKY_NUMBER")
	proto.RegisterType((*CMD_C_NEWPLAYER_INFO)(nil), "CMD.CMD_C_NEWPLAYER_INFO")
	proto.RegisterType((*CMD_S_NEWPLAYER_INFO)(nil), "CMD.CMD_S_NEWPLAYER_INFO")
	proto.RegisterType((*CMD_C_USER_LOGINDAY_REWARD)(nil), "CMD.CMD_C_USER_LOGINDAY_REWARD")
	proto.RegisterType((*CMD_S_USER_LOGINDAY_REWARD)(nil), "CMD.CMD_S_USER_LOGINDAY_REWARD")
	proto.RegisterType((*CMD_C_CARNIVAL_WELFARE_INFO)(nil), "CMD.CMD_C_CARNIVAL_WELFARE_INFO")
	proto.RegisterType((*CMD_S_CARNIVAL_WELFARE_INFO)(nil), "CMD.CMD_S_CARNIVAL_WELFARE_INFO")
	proto.RegisterType((*CMD_C_CARNIVAL_WELFARE_DRAW)(nil), "CMD.CMD_C_CARNIVAL_WELFARE_DRAW")
	proto.RegisterType((*CMD_S_CARNIVAL_WELFARE_DRAW)(nil), "CMD.CMD_S_CARNIVAL_WELFARE_DRAW")
	proto.RegisterType((*CMD_C_CARNIVAL_WELFARE_REWARD)(nil), "CMD.CMD_C_CARNIVAL_WELFARE_REWARD")
	proto.RegisterType((*CMD_S_CARNIVAL_WELFARE_REWARD)(nil), "CMD.CMD_S_CARNIVAL_WELFARE_REWARD")
	proto.RegisterType((*CMD_C_SEAGOD_GIFT_GET)(nil), "CMD.CMD_C_SEAGOD_GIFT_GET")
	proto.RegisterType((*CMD_S_SEAGOD_GIFT_GET)(nil), "CMD.CMD_S_SEAGOD_GIFT_GET")
	proto.RegisterType((*CMD_S_ANTIADDICTION)(nil), "CMD.CMD_S_ANTIADDICTION")
	proto.RegisterType((*CMD_S_SMT_POP_UP)(nil), "CMD.CMD_S_SMT_POP_UP")
	proto.RegisterType((*CMD_C_GuestRegisterAccount)(nil), "CMD.CMD_C_GuestRegisterAccount")
	proto.RegisterType((*CMD_S_GuestRegisterAccount_Result)(nil), "CMD.CMD_S_GuestRegisterAccount_Result")
	proto.RegisterEnum("CMD.LuckyNumberTask_Status", LuckyNumberTask_Status_name, LuckyNumberTask_Status_value)
	proto.RegisterEnum("CMD.CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result", CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result_name, CMD_S_GET_LUCKY_NUMBER_TASK_REWARD_Result_value)
	proto.RegisterEnum("CMD.CMD_S_GET_LUCKY_NUMBER_REWARD_Result", CMD_S_GET_LUCKY_NUMBER_REWARD_Result_name, CMD_S_GET_LUCKY_NUMBER_REWARD_Result_value)
}

func init() { proto.RegisterFile("CMD_Common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x1a, 0x4d, 0x73, 0x23, 0x47,
	0x35, 0x92, 0x2c, 0x4b, 0x6a, 0x4b, 0xb6, 0x3c, 0x6b, 0xaf, 0xb5, 0xbb, 0x64, 0x3f, 0x26, 0xd9,
	0x64, 0x13, 0x8a, 0x4d, 0xc5, 0x49, 0x48, 0x52, 0x81, 0x2a, 0x64, 0x49, 0xd6, 0x4e, 0xad, 0x25,
	0x3b, 0x33, 0xb2, 0x97, 0x9c, 0xba, 0xda, 0x9a, 0x5e, 0x79, 0x4a, 0xa3, 0x19, 0x31, 0xdd, 0xf2,
	0xae, 0xc3, 0x85, 0x13, 0x55, 0x9c, 0xb8, 0xc1, 0x0d, 0xaa, 0xf8, 0x03, 0x1c, 0x72, 0xa5, 0xc2,
	0x0f, 0xa0, 0x38, 0x73, 0x82, 0x2b, 0x17, 0xf8, 0x0f, 0xd4, 0xeb, 0x8f, 0xf9, 0xd0, 0x87, 0x77,
	0x03, 0xc5, 0xc9, 0xd3, 0xef, 0xfb, 0xbd, 0x7e, 0xfd, 0x5e, 0xbf, 0x96, 0x51, 0xbd, 0xd5, 0x6b,
	0xe3, 0x56, 0x38, 0x99, 0x84, 0xc1, 0xe3, 0x69, 0x14, 0xf2, 0xd0, 0x28, 0xb4, 0x7a, 0x6d, 0xf3,
	0x9b, 0x35, 0xb4, 0xcb, 0xc9, 0xa8, 0x77, 0x60, 0x05, 0x6c, 0x16, 0x51, 0x9b, 0x0e, 0xc3, 0xc8,
	0x6d, 0x13, 0x4e, 0x8c, 0x3b, 0xa8, 0x12, 0x89, 0x15, 0xf6, 0xdc, 0x46, 0xee, 0x7e, 0xee, 0x51,
	0xd1, 0x2e, 0x4b, 0x80, 0xe5, 0x1a, 0x7b, 0xa8, 0x34, 0xf6, 0x02, 0x81, 0xca, 0x0b, 0xd4, 0x3a,
	0x2c, 0x25, 0x62, 0x44, 0x26, 0x14, 0x10, 0x05, 0x89, 0x80, 0xa5, 0xe5, 0x1a, 0x6f, 0xa3, 0x4d,
	0x16, 0xce, 0xa2, 0x21, 0xc5, 0x33, 0x46, 0x23, 0xc0, 0xaf, 0xdd, 0xcf, 0x3d, 0xaa, 0xd9, 0x55,
	0x09, 0x3d, 0x65, 0x34, 0x92, 0x54, 0x9c, 0x44, 0x23, 0xca, 0x63, 0xaa, 0xa2, 0xa4, 0x92, 0x50,
	0x45, 0xf5, 0x26, 0x42, 0xec, 0x05, 0x99, 0x62, 0x36, 0x0c, 0x23, 0xda, 0x58, 0xbf, 0x9f, 0x7b,
	0x54, 0xb0, 0x2b, 0x00, 0x71, 0x00, 0x60, 0xdc, 0x43, 0x1b, 0x4a, 0xd5, 0x39, 0x09, 0xc6, 0x8d,
	0x92, 0xc0, 0x23, 0x09, 0x3a, 0x20, 0xc1, 0x18, 0x08, 0x94, 0x16, 0x41, 0x50, 0x96, 0x04, 0x12,
	0x24, 0x08, 0x1a, 0xa8, 0x14, 0xd1, 0x4b, 0x1a, 0xcc, 0x68, 0xa3, 0x22, 0x90, 0x7a, 0x69, 0x98,
	0xa8, 0xe6, 0x31, 0x2c, 0x5c, 0x9c, 0xfa, 0xe4, 0x6b, 0xd2, 0x40, 0xc2, 0xcb, 0x0d, 0x8f, 0x75,
	0xc9, 0x84, 0x9e, 0x00, 0x08, 0xcc, 0xe3, 0x11, 0x71, 0x29, 0xe6, 0x57, 0x53, 0xda, 0xd8, 0x10,
	0x04, 0x15, 0x01, 0x19, 0x5c, 0x4d, 0xa9, 0xf1, 0x08, 0xd5, 0x95, 0x79, 0x81, 0x37, 0x1c, 0xe3,
	0x80, 0x4c, 0x68, 0xa3, 0x76, 0x3f, 0xf7, 0xa8, 0x6a, 0xab, 0x08, 0xf5, 0xbd, 0xe1, 0xb8, 0x4f,
	0x26, 0x82, 0x52, 0xd9, 0x99, 0x50, 0x6e, 0x4a, 0x4a, 0x09, 0x8f, 0x29, 0x93, 0xe8, 0xea, 0xe8,
	0x6f, 0xa5, 0xa3, 0xdb, 0x8d, 0xf7, 0x40, 0xc9, 0xd3, 0x54, 0xf5, 0x74, 0x74, 0x15, 0xd5, 0x03,
	0x54, 0x1d, 0x86, 0xbe, 0x4f, 0x87, 0x1c, 0x07, 0x21, 0xa7, 0x8d, 0x6d, 0xa1, 0x71, 0x43, 0xc1,
	0xfa, 0x21, 0xa7, 0xe6, 0x5f, 0x73, 0x68, 0x17, 0xf2, 0xa9, 0x77, 0x80, 0x5b, 0xfb, 0x0e, 0x6e,
	0xb6, 0xdb, 0xd8, 0xee, 0x3c, 0x6b, 0xda, 0x6d, 0xd8, 0x7f, 0xbd, 0x73, 0x39, 0x21, 0x7b, 0x7d,
	0x26, 0xf7, 0xec, 0x1e, 0xda, 0x18, 0xfa, 0x1e, 0x0d, 0xb8, 0x8c, 0x4a, 0x5e, 0x20, 0x91, 0x04,
	0x89, 0xb0, 0xbc, 0x89, 0xd0, 0xf0, 0x82, 0x04, 0x01, 0xf5, 0x75, 0xf2, 0xd4, 0xec, 0x8a, 0x82,
	0x64, 0x13, 0x4b, 0x26, 0x8e, 0x4e, 0xac, 0x7b, 0x68, 0x23, 0xa2, 0x84, 0x85, 0x81, 0x14, 0x2c,
	0xf3, 0x05, 0x49, 0x90, 0x10, 0xfc, 0x00, 0x55, 0xe9, 0x4b, 0x4e, 0x21, 0x5b, 0x83, 0xe7, 0x21,
	0x6b, 0xb8, 0xf7, 0x0b, 0xb0, 0x63, 0x12, 0x66, 0x01, 0xc8, 0xfc, 0x5d, 0xe2, 0x8f, 0xb3, 0xdf,
	0x7a, 0x5d, 0x7f, 0xd2, 0x6a, 0xf3, 0x0b, 0x6a, 0x6f, 0xa2, 0x75, 0xc6, 0x09, 0x9f, 0x31, 0xe5,
	0x8b, 0x5a, 0x19, 0x75, 0x54, 0x98, 0xb0, 0x91, 0x70, 0xa2, 0x6a, 0xc3, 0xe7, 0xeb, 0x18, 0xf8,
	0x4d, 0x0e, 0x3d, 0x4c, 0x05, 0xfc, 0xe4, 0xd4, 0x6e, 0x3d, 0x69, 0x3a, 0x1d, 0x3c, 0xb0, 0x9b,
	0xed, 0x0e, 0x3e, 0xb3, 0x3a, 0xcf, 0xb0, 0x33, 0x68, 0x0e, 0x4e, 0x9d, 0xd5, 0x06, 0x3f, 0x44,
	0x9b, 0x7e, 0x38, 0x24, 0x3e, 0xf6, 0x49, 0x30, 0x9a, 0x91, 0x91, 0xb4, 0xb9, 0x6a, 0xd7, 0x04,
	0xf4, 0x48, 0x01, 0x8d, 0xb7, 0x50, 0x2d, 0xa2, 0xc3, 0x0b, 0x48, 0x08, 0xe9, 0x99, 0xb4, 0xbe,
	0xaa, 0x81, 0xc2, 0xb7, 0x87, 0x68, 0x33, 0x26, 0xba, 0x24, 0xfe, 0x8c, 0xaa, 0x3d, 0x89, 0x59,
	0xcf, 0x00, 0x68, 0x8e, 0x62, 0xa3, 0x21, 0xaa, 0xd7, 0x18, 0x7d, 0x17, 0xa1, 0x4b, 0x8f, 0x79,
	0xe7, 0x9e, 0xef, 0xf1, 0x2b, 0x65, 0x77, 0x0a, 0x02, 0xf8, 0x29, 0xb9, 0x22, 0x0a, 0xaf, 0x62,
	0x9d, 0x40, 0xcc, 0x5f, 0xe5, 0x50, 0x95, 0x93, 0x11, 0x94, 0x07, 0x67, 0xec, 0xf9, 0x3e, 0x44,
	0xc1, 0xe3, 0x74, 0x92, 0x8a, 0x02, 0x2c, 0x2d, 0xd7, 0xb8, 0x85, 0xca, 0x0c, 0x28, 0x74, 0xe5,
	0xaa, 0xd9, 0x25, 0xb1, 0xb6, 0x5c, 0xc3, 0x40, 0x6b, 0x33, 0x46, 0x75, 0xdd, 0x12, 0xdf, 0xc6,
	0x0e, 0x2a, 0xf2, 0x90, 0x13, 0x5f, 0xf8, 0x57, 0xb4, 0xe5, 0x02, 0x4a, 0x23, 0x60, 0x31, 0xf7,
	0x26, 0x32, 0xe1, 0x0a, 0x76, 0x19, 0x00, 0x03, 0x6f, 0x42, 0xcd, 0x9f, 0xca, 0x54, 0xea, 0xda,
	0xb8, 0x85, 0xad, 0xfe, 0x99, 0x35, 0xe8, 0xe0, 0x5e, 0x73, 0xd0, 0x7a, 0xb2, 0x7a, 0x67, 0xde,
	0x41, 0x5b, 0x1e, 0xc3, 0x5e, 0x70, 0xe9, 0x71, 0x8a, 0x47, 0x33, 0xcf, 0x97, 0xa6, 0x95, 0xed,
	0x9a, 0xc7, 0x2c, 0x01, 0xed, 0x02, 0xd0, 0xfc, 0x43, 0x3e, 0x16, 0xed, 0x64, 0x45, 0x83, 0x04,
	0x41, 0x18, 0xe1, 0xac, 0x8a, 0x9a, 0x02, 0xab, 0xc2, 0xf9, 0x00, 0x55, 0x35, 0x9d, 0x28, 0x26,
	0x32, 0x03, 0x36, 0x14, 0x4c, 0x54, 0x92, 0xf7, 0xd1, 0xb6, 0x26, 0xb9, 0xf4, 0xa6, 0xd8, 0xa7,
	0x97, 0xd4, 0x57, 0x39, 0xa0, 0x75, 0x9c, 0x79, 0xd3, 0x23, 0x00, 0x1b, 0x1f, 0xa2, 0x5d, 0x4d,
	0x3b, 0x21, 0x7c, 0x78, 0x81, 0x75, 0x4f, 0x90, 0xd9, 0x60, 0x28, 0x64, 0x0f, 0x70, 0x4f, 0x65,
	0x7f, 0xf8, 0x14, 0x35, 0xb2, 0x2c, 0x43, 0xea, 0xfb, 0xaa, 0x90, 0xcb, 0xa3, 0xbb, 0x9b, 0xe6,
	0x6a, 0x51, 0xdf, 0x97, 0x45, 0x7d, 0x49, 0x90, 0xd6, 0x97, 0x05, 0xe9, 0x5f, 0x79, 0x74, 0x13,
	0x82, 0xe4, 0x4c, 0x29, 0x19, 0xd3, 0x08, 0x3b, 0x18, 0x7c, 0x6f, 0x5d, 0x10, 0xae, 0x2a, 0x0c,
	0xc7, 0xc3, 0xd0, 0x0f, 0x23, 0x15, 0x20, 0xa8, 0x30, 0xbc, 0x05, 0x00, 0xe3, 0x3d, 0xb4, 0xcd,
	0xe0, 0x10, 0x8a, 0x08, 0xea, 0x5a, 0x23, 0x73, 0x64, 0x13, 0x10, 0x20, 0x67, 0xa1, 0x90, 0xea,
	0x70, 0x17, 0x96, 0xb4, 0xa9, 0x65, 0x85, 0x7e, 0x6d, 0x69, 0xa1, 0x37, 0xd0, 0x1a, 0xd8, 0x21,
	0x22, 0x50, 0xb5, 0xc5, 0xb7, 0x48, 0x3d, 0x6f, 0x42, 0x99, 0x70, 0x13, 0x52, 0x0f, 0x16, 0xc2,
	0x87, 0x90, 0x71, 0x75, 0xea, 0x64, 0x6b, 0xab, 0x00, 0x44, 0x9c, 0x38, 0xc8, 0x4c, 0x81, 0x16,
	0x27, 0xb7, 0x2c, 0x9b, 0x36, 0x00, 0xc4, 0xa9, 0x7d, 0x17, 0xd5, 0x13, 0x07, 0xc5, 0xe6, 0x5e,
	0x8a, 0xf6, 0x56, 0xb4, 0x6b, 0xda, 0x3f, 0xd8, 0xda, 0xcb, 0x6c, 0x24, 0x9e, 0x93, 0xa1, 0x88,
	0x04, 0xca, 0x46, 0xe2, 0x90, 0x0c, 0xa9, 0xe5, 0x9a, 0x3f, 0xcb, 0x46, 0xbb, 0xf5, 0xda, 0xd1,
	0x5e, 0x0c, 0x61, 0x7e, 0x49, 0x08, 0x75, 0x60, 0x0a, 0x49, 0x60, 0x4c, 0x8c, 0xee, 0x2c, 0xdf,
	0x60, 0x7c, 0x48, 0x3c, 0x5f, 0x16, 0x66, 0x36, 0xf3, 0x41, 0xb3, 0x4b, 0x75, 0x31, 0x91, 0xa0,
	0x56, 0xe8, 0x8a, 0xeb, 0xc1, 0xf3, 0x28, 0x3c, 0xf7, 0xd4, 0xf9, 0x55, 0xd5, 0x44, 0x82, 0xc4,
	0x09, 0x36, 0xd1, 0x7d, 0x71, 0x59, 0xc2, 0x5f, 0xce, 0x68, 0x74, 0x75, 0x32, 0x8b, 0x86, 0x17,
	0x84, 0xd1, 0xd3, 0xc0, 0xa5, 0xc4, 0xa7, 0xee, 0x00, 0x1a, 0xb9, 0xd9, 0x42, 0x35, 0x4e, 0x46,
	0x36, 0x7d, 0x41, 0x22, 0xd7, 0xe2, 0x74, 0x72, 0x6d, 0xc5, 0x11, 0x88, 0x60, 0x36, 0x51, 0x77,
	0x25, 0x41, 0xd8, 0x9f, 0x4d, 0xcc, 0xbd, 0xa4, 0x8b, 0xe2, 0xa3, 0xe3, 0x66, 0x1b, 0xf7, 0x2c,
	0xc7, 0xb1, 0x8e, 0xfb, 0xe6, 0x08, 0x19, 0x9c, 0x8c, 0x3a, 0x97, 0x34, 0xba, 0x6a, 0x93, 0xab,
	0x9e, 0xc7, 0x98, 0x17, 0x06, 0x10, 0xd1, 0x89, 0xfc, 0x4c, 0xae, 0x64, 0x15, 0x05, 0xb1, 0x5c,
	0xe3, 0x36, 0x2a, 0x4f, 0xa3, 0x70, 0x14, 0x51, 0xc6, 0x94, 0xa2, 0x78, 0x3d, 0xd7, 0x8c, 0x8a,
	0xba, 0x19, 0x99, 0xff, 0xce, 0x89, 0xeb, 0x9f, 0xd6, 0xd4, 0x79, 0xc9, 0xb5, 0xb2, 0x4f, 0xd0,
	0x4d, 0x0a, 0x50, 0xad, 0xf1, 0xb9, 0x17, 0x78, 0xec, 0x02, 0x9c, 0x90, 0x8a, 0x77, 0xd3, 0xd8,
	0x43, 0x8d, 0x34, 0x3e, 0x40, 0x37, 0x32, 0x6c, 0x13, 0xf2, 0x32, 0x71, 0xdc, 0x48, 0xa3, 0x7a,
	0x02, 0x63, 0x7c, 0x8e, 0x1a, 0x19, 0x86, 0x73, 0xc2, 0xa8, 0xeb, 0x91, 0x49, 0x18, 0xe8, 0x4a,
	0xbc, 0x97, 0xc6, 0x1f, 0x24, 0x68, 0xe3, 0x43, 0xb4, 0x93, 0x61, 0x65, 0x9c, 0x44, 0xa0, 0x4c,
	0xd6, 0xea, 0x8c, 0x1d, 0x8e, 0x44, 0x99, 0xbf, 0xc8, 0xa1, 0x1b, 0x9c, 0x8c, 0x9e, 0x51, 0x3a,
	0x96, 0xee, 0xca, 0x1d, 0x84, 0xd0, 0x4e, 0x67, 0x5f, 0x7f, 0xed, 0x53, 0x96, 0x0a, 0xad, 0x82,
	0xc8, 0xde, 0xa9, 0xd1, 0x91, 0x60, 0xd0, 0xbd, 0x53, 0x41, 0x95, 0x94, 0xb7, 0x90, 0x06, 0x80,
	0x2d, 0x9c, 0x2a, 0x07, 0xaa, 0x0a, 0xe8, 0x00, 0xcc, 0xfc, 0x63, 0x1e, 0xed, 0x64, 0x4c, 0x48,
	0x45, 0xfc, 0x05, 0xa5, 0x63, 0xed, 0xcd, 0x05, 0x61, 0x8a, 0x4f, 0xd8, 0x53, 0xb5, 0x77, 0x53,
	0xd8, 0x27, 0x31, 0x12, 0xa2, 0x90, 0x66, 0x8b, 0x28, 0xa3, 0x3c, 0x09, 0xf9, 0x8d, 0x14, 0xce,
	0x56, 0x28, 0xe3, 0x53, 0xb4, 0x97, 0x66, 0x59, 0x0c, 0x79, 0xda, 0x90, 0x74, 0xc4, 0xbf, 0x40,
	0xb7, 0xd2, 0x8c, 0xca, 0x84, 0x60, 0x36, 0x39, 0xa7, 0x91, 0x0a, 0x7b, 0x23, 0x45, 0x70, 0x92,
	0xc6, 0xcf, 0x6b, 0x55, 0xcc, 0xc3, 0x0b, 0x6f, 0x2a, 0xea, 0x5e, 0x56, 0xeb, 0x49, 0x82, 0x35,
	0xff, 0x59, 0x48, 0x6e, 0x67, 0x99, 0x73, 0x62, 0xb4, 0xd1, 0xb6, 0xd8, 0x65, 0x97, 0x5c, 0x61,
	0xc5, 0x08, 0xd1, 0x2a, 0x3c, 0xda, 0xd8, 0xdf, 0x7b, 0xdc, 0xea, 0xb5, 0x1f, 0x2f, 0x9e, 0x22,
	0xbb, 0xae, 0x39, 0x14, 0x80, 0x19, 0x3f, 0x42, 0x35, 0xd0, 0x9c, 0x48, 0xc8, 0x5f, 0x2f, 0xa1,
	0x0a, 0xd4, 0x31, 0xf7, 0xbb, 0x68, 0xcb, 0xf7, 0x2e, 0x69, 0x40, 0x59, 0x9c, 0x1c, 0x85, 0xfb,
	0x05, 0x28, 0x95, 0x1a, 0xac, 0xb2, 0xe3, 0x27, 0x68, 0x6b, 0x14, 0x85, 0xd3, 0xd9, 0x34, 0x51,
	0xb4, 0x76, 0xbd, 0xa2, 0x4d, 0x49, 0x1f, 0xab, 0xea, 0xa3, 0xdd, 0xd8, 0x5d, 0xfa, 0x92, 0x27,
	0x72, 0x20, 0x7e, 0x1b, 0xfb, 0xb7, 0xe7, 0xe5, 0x24, 0xc9, 0xa5, 0x4e, 0x83, 0x9b, 0x86, 0x31,
	0xe3, 0xa9, 0x4c, 0x9d, 0x05, 0x71, 0xeb, 0x42, 0xdc, 0x2d, 0x2d, 0x6e, 0x21, 0x55, 0x6d, 0x43,
	0xb1, 0xa5, 0x85, 0x1d, 0xa0, 0xba, 0x88, 0x22, 0x48, 0x92, 0x71, 0x60, 0x8d, 0x92, 0xf0, 0xaf,
	0xb1, 0x28, 0x48, 0x86, 0xc4, 0xde, 0x04, 0x8e, 0x78, 0xc9, 0x74, 0x69, 0x17, 0x05, 0xb1, 0xdb,
	0x19, 0xe8, 0x7d, 0xd6, 0x97, 0xf1, 0x07, 0xa8, 0xaa, 0xb3, 0x47, 0x34, 0x38, 0x59, 0x68, 0x37,
	0x14, 0x4c, 0x4f, 0x11, 0xa9, 0x1a, 0x99, 0x9f, 0xab, 0x91, 0xe6, 0x3f, 0x72, 0xb1, 0x06, 0xe7,
	0xff, 0xa2, 0x01, 0x24, 0x44, 0x94, 0xcf, 0xa2, 0x40, 0xb5, 0x68, 0x79, 0xa0, 0x36, 0x24, 0x4c,
	0x36, 0xe9, 0x8f, 0xa0, 0x43, 0x81, 0xc3, 0xd8, 0xf7, 0x18, 0x57, 0x49, 0x60, 0xe8, 0x20, 0x25,
	0x3d, 0x05, 0xba, 0x16, 0x7c, 0x1f, 0x79, 0x8c, 0xa7, 0x4a, 0x10, 0x9c, 0x09, 0x3d, 0x19, 0x17,
	0xe3, 0x12, 0x04, 0x50, 0xcb, 0x35, 0xbf, 0x40, 0xdf, 0xcb, 0x44, 0xf0, 0xc8, 0x3a, 0xeb, 0xf4,
	0x3b, 0x8e, 0xa3, 0x1d, 0x14, 0x53, 0xbd, 0xd0, 0x9d, 0x9e, 0xea, 0x85, 0x46, 0xd7, 0x1c, 0xc7,
	0xcc, 0xce, 0x52, 0xe6, 0x9b, 0x68, 0x5d, 0xf6, 0x51, 0xc5, 0xa9, 0x56, 0xf3, 0x0e, 0xe5, 0x5f,
	0xc7, 0x21, 0xf3, 0x0b, 0x79, 0x73, 0x10, 0x96, 0xda, 0x1d, 0x27, 0xd9, 0x8b, 0xd7, 0xd8, 0x04,
	0xf3, 0x6f, 0xb9, 0x98, 0xdb, 0xf9, 0xce, 0xdc, 0x29, 0x3f, 0xf2, 0x19, 0x3f, 0x96, 0x96, 0x93,
	0xc2, 0xff, 0x5c, 0x4e, 0xd6, 0xbe, 0x43, 0x39, 0x31, 0x3f, 0x47, 0x8d, 0xcc, 0x06, 0x3e, 0xeb,
	0x74, 0x9e, 0xea, 0xf8, 0x5f, 0xdf, 0xa5, 0xcc, 0x2f, 0x63, 0x56, 0x67, 0x81, 0x75, 0xd5, 0xd6,
	0x65, 0x45, 0xe6, 0xe7, 0x45, 0xde, 0x4d, 0xd2, 0x09, 0xe6, 0xfc, 0xd6, 0x13, 0xab, 0x73, 0xd6,
	0xe9, 0x75, 0xfa, 0x03, 0x3c, 0xb0, 0x06, 0x47, 0x1d, 0x73, 0x92, 0x64, 0x0c, 0xcc, 0xcd, 0xf3,
	0x78, 0xb8, 0xfc, 0x70, 0x8f, 0xfb, 0x34, 0xb9, 0x16, 0x95, 0xc4, 0xda, 0x72, 0x8d, 0x7d, 0xb4,
	0x4b, 0xa2, 0x08, 0x93, 0xe1, 0x85, 0x47, 0x2f, 0xe9, 0x44, 0xbc, 0x0c, 0x00, 0x4a, 0xa4, 0x4f,
	0xcd, 0xbe, 0x41, 0xa2, 0xa8, 0x99, 0xe0, 0x06, 0x80, 0x32, 0x6d, 0xf4, 0x56, 0x66, 0x0a, 0x1e,
	0xe0, 0xe3, 0xfe, 0x12, 0xad, 0xdf, 0x47, 0xdb, 0x8b, 0x62, 0xa5, 0xfa, 0x3a, 0x99, 0x97, 0xc9,
	0x62, 0x99, 0x72, 0x48, 0x5d, 0x21, 0xf3, 0x95, 0xd7, 0xca, 0xa5, 0x4a, 0xf3, 0x2b, 0x94, 0x9e,
	0xa3, 0xed, 0x78, 0x97, 0x9d, 0xf6, 0x53, 0x7c, 0x60, 0xf5, 0xaf, 0x79, 0x6b, 0xd8, 0x45, 0xeb,
	0xcc, 0x1d, 0xeb, 0x0d, 0xaa, 0xda, 0x45, 0xe6, 0x8e, 0xe5, 0x33, 0x98, 0x1f, 0x8e, 0xbc, 0x20,
	0x3d, 0xa7, 0x57, 0x04, 0x44, 0x9c, 0x91, 0x8f, 0x63, 0x1d, 0x4e, 0xa2, 0xe3, 0x55, 0x6e, 0x98,
	0xbf, 0xce, 0xc9, 0x9b, 0x2d, 0x09, 0xc6, 0xaa, 0x6f, 0x19, 0x68, 0x2d, 0x22, 0xc1, 0x58, 0x25,
	0x8e, 0xf8, 0x86, 0x32, 0x22, 0x2e, 0xb5, 0xa9, 0xb7, 0x0f, 0x71, 0xcb, 0x15, 0xc7, 0x2b, 0x75,
	0x15, 0x2e, 0xac, 0xbc, 0x0a, 0xcb, 0x11, 0x51, 0x5f, 0x85, 0x01, 0x05, 0x13, 0x87, 0x50, 0x24,
	0x0b, 0x5b, 0x89, 0x06, 0x2e, 0x58, 0x61, 0x9e, 0x8a, 0xd9, 0xbe, 0x19, 0xd1, 0x80, 0xc0, 0x7a,
	0x95, 0x3d, 0xc9, 0x8c, 0x25, 0x83, 0x54, 0x0e, 0xf4, 0x74, 0xb5, 0x83, 0x8a, 0x72, 0xc0, 0x94,
	0xb5, 0x58, 0x2e, 0xcc, 0xbb, 0x08, 0x89, 0x61, 0xba, 0x87, 0x5b, 0xbd, 0xb6, 0x51, 0x47, 0x85,
	0xe1, 0xc4, 0x55, 0x37, 0x2d, 0xf8, 0x34, 0x1f, 0xa2, 0xad, 0x04, 0x0f, 0x35, 0xe6, 0x04, 0x34,
	0x73, 0xfa, 0x92, 0x2b, 0x2a, 0xf1, 0x6d, 0x36, 0x64, 0x21, 0x6a, 0xe1, 0xd6, 0x93, 0xe6, 0x00,
	0x3b, 0x1d, 0xfb, 0xac, 0x63, 0x63, 0xab, 0x7f, 0x78, 0x0c, 0x77, 0x4d, 0x39, 0x1b, 0x2d, 0xa0,
	0x40, 0xd0, 0x34, 0x8c, 0xb8, 0x0a, 0xbf, 0xf8, 0x06, 0x18, 0x71, 0xdd, 0x48, 0x58, 0x5f, 0xb1,
	0xc5, 0xb7, 0x7c, 0x7e, 0x18, 0xd3, 0x40, 0x58, 0x5e, 0xb1, 0xe5, 0x42, 0x05, 0x40, 0x4f, 0xd9,
	0xe2, 0x1b, 0x28, 0xe1, 0xef, 0xbe, 0x08, 0xde, 0x9a, 0x2d, 0x17, 0xe6, 0x2d, 0xb4, 0x27, 0x8d,
	0x3b, 0x3a, 0x6d, 0x3d, 0xfd, 0x0a, 0xf7, 0x4f, 0x7b, 0x07, 0xda, 0xba, 0x0b, 0x89, 0x72, 0x16,
	0x51, 0xe2, 0x79, 0x95, 0x93, 0x88, 0xcb, 0xf9, 0x28, 0xa7, 0x9e, 0x57, 0x01, 0x02, 0xe3, 0x11,
	0x64, 0xa3, 0xc7, 0xf0, 0x28, 0xe4, 0xea, 0x95, 0xa2, 0xe8, 0xb1, 0x6e, 0xc8, 0x61, 0xd7, 0x87,
	0xb3, 0x08, 0xbb, 0xe4, 0x4a, 0xef, 0xfa, 0x70, 0x16, 0xb5, 0xc9, 0x95, 0xf9, 0x19, 0x7a, 0x5b,
	0x1a, 0x21, 0x5a, 0x4a, 0x5a, 0xdb, 0xa0, 0xe9, 0x3c, 0xc5, 0x27, 0xf6, 0x71, 0xd7, 0xee, 0x38,
	0x0e, 0x6c, 0x01, 0x30, 0xcb, 0x98, 0xc0, 0xa7, 0xf9, 0x6d, 0x0e, 0x6d, 0x1d, 0xcd, 0x86, 0xe3,
	0xab, 0xbe, 0xb8, 0x41, 0x0e, 0x08, 0x1b, 0x1b, 0x9b, 0x28, 0x1f, 0x9f, 0x8f, 0xbc, 0xb7, 0x38,
	0xf5, 0xd4, 0x52, 0x53, 0xcf, 0x47, 0x99, 0xa9, 0x67, 0x73, 0xff, 0x8e, 0x28, 0xc1, 0x73, 0x12,
	0x1f, 0x3b, 0x82, 0x24, 0x7e, 0x9f, 0xbb, 0x83, 0x2a, 0x3e, 0x50, 0xa4, 0xb2, 0xb4, 0xec, 0x2b,
	0x16, 0xf3, 0x07, 0x68, 0x5d, 0x92, 0x1b, 0x08, 0xad, 0x9f, 0x06, 0x6e, 0x18, 0xd0, 0xfa, 0x1b,
	0x46, 0x19, 0xad, 0xb5, 0xe1, 0x2b, 0x67, 0xd4, 0x50, 0xa5, 0x4b, 0xd5, 0x75, 0xa6, 0x9e, 0x37,
	0x5d, 0xe9, 0xba, 0xf3, 0x9d, 0x5d, 0x37, 0xde, 0x47, 0x45, 0x4e, 0xd8, 0x58, 0xdf, 0x45, 0x77,
	0x96, 0x59, 0x6e, 0x4b, 0x12, 0xf3, 0xc7, 0xc8, 0xbc, 0x2e, 0xc0, 0xc9, 0x4b, 0x26, 0x90, 0xa7,
	0xaa, 0x0b, 0x2c, 0x2d, 0xd7, 0xfc, 0x4d, 0x5e, 0xf2, 0x3b, 0xff, 0x1d, 0xbf, 0x71, 0x98, 0xe9,
	0xa6, 0x9b, 0xfb, 0x8f, 0x85, 0xad, 0xaf, 0x96, 0xf8, 0xd8, 0x16, 0x5c, 0x71, 0x2b, 0xca, 0xd4,
	0x94, 0xc2, 0xea, 0x9a, 0xb2, 0xb6, 0xb2, 0xa6, 0x14, 0xb3, 0x35, 0x25, 0xb3, 0x93, 0xeb, 0x73,
	0x3b, 0xf9, 0x00, 0xad, 0x4b, 0xfd, 0xc6, 0x06, 0x2a, 0x39, 0xb3, 0xe1, 0x90, 0x32, 0x56, 0x7f,
	0x03, 0xb6, 0xf5, 0x90, 0x78, 0x3e, 0x75, 0xeb, 0x39, 0xf3, 0x0e, 0xba, 0xa5, 0x4e, 0xcf, 0xf1,
	0xf1, 0xd3, 0xd3, 0x93, 0x8c, 0x23, 0xe6, 0xb9, 0x44, 0x3a, 0xcb, 0x90, 0x70, 0x42, 0x83, 0xd9,
	0x44, 0x8e, 0x22, 0x45, 0x5b, 0x7c, 0x67, 0xad, 0xc9, 0x67, 0xad, 0x81, 0xe3, 0x3b, 0x0c, 0x67,
	0x01, 0x57, 0x7e, 0xcb, 0x85, 0x79, 0x0f, 0xbd, 0xb9, 0x62, 0x63, 0x65, 0x04, 0xcd, 0xbf, 0xe7,
	0x24, 0x85, 0xb3, 0x8a, 0xc2, 0x68, 0x66, 0xfa, 0xfe, 0xe6, 0xfe, 0x7b, 0xd7, 0x6d, 0xce, 0xf2,
	0x7d, 0x49, 0x85, 0x3e, 0xbf, 0x32, 0xf4, 0x85, 0x4c, 0xe8, 0xcd, 0xce, 0x2b, 0xa3, 0x0b, 0x88,
	0x7e, 0xc8, 0x3f, 0x6d, 0x93, 0xab, 0x7a, 0xde, 0xa8, 0xa2, 0x72, 0x3f, 0x54, 0xc7, 0xa6, 0x60,
	0x94, 0x50, 0xa1, 0x1b, 0xf2, 0xfa, 0x9a, 0x79, 0x8a, 0xee, 0xca, 0x00, 0xd8, 0x9d, 0xd6, 0x93,
	0xa6, 0xdd, 0xed, 0x60, 0xab, 0x9f, 0x8d, 0xf4, 0xca, 0xac, 0xbc, 0x8d, 0xca, 0xfa, 0x31, 0x5a,
	0x47, 0x5b, 0xaf, 0xcd, 0x0f, 0xd0, 0x8e, 0x14, 0xdb, 0xef, 0x3c, 0x3b, 0x39, 0x6a, 0x7e, 0xa5,
	0x0b, 0xdf, 0xaa, 0x06, 0x6c, 0x7e, 0x9b, 0x97, 0x1c, 0xce, 0x3c, 0x47, 0xdc, 0x82, 0x5d, 0x72,
	0xc5, 0xf4, 0x8d, 0x4c, 0x40, 0xda, 0xe4, 0x8a, 0x19, 0x1f, 0xa0, 0x1d, 0x28, 0x95, 0xde, 0x25,
	0xc5, 0x92, 0x2c, 0xf5, 0x7a, 0x50, 0xb6, 0xb7, 0x3d, 0xd6, 0xf5, 0x2e, 0xe9, 0x11, 0x60, 0x54,
	0xaf, 0x7d, 0x07, 0x6d, 0xf9, 0xf4, 0x39, 0xc7, 0x29, 0xa1, 0xb2, 0x69, 0xd5, 0x00, 0x7c, 0x14,
	0x0b, 0x7e, 0x84, 0xea, 0xe7, 0x61, 0x30, 0x63, 0x38, 0x35, 0x8a, 0xc8, 0xf9, 0x7b, 0x53, 0xc0,
	0x7b, 0xf1, 0x3c, 0xf2, 0x31, 0xba, 0x99, 0xa5, 0x8c, 0xab, 0xa5, 0x6c, 0xb3, 0x3b, 0x69, 0xfa,
	0x13, 0x5d, 0x39, 0xd5, 0xcf, 0x5c, 0x60, 0xb8, 0xc0, 0xab, 0xb7, 0xd6, 0x0d, 0x69, 0xf1, 0x01,
	0x80, 0x8c, 0xf7, 0xd1, 0xb6, 0xb0, 0x55, 0x0b, 0x16, 0xd6, 0x96, 0x84, 0x50, 0xe1, 0x84, 0x92,
	0x09, 0xf6, 0x9a, 0x9f, 0xa0, 0xdb, 0x32, 0xe2, 0xa7, 0x4e, 0xc7, 0xc6, 0x47, 0xc7, 0x5d, 0xab,
	0xdf, 0x6e, 0x7e, 0xf5, 0xaa, 0x1f, 0x59, 0xcc, 0x3f, 0xe5, 0x24, 0x9f, 0xb3, 0x9c, 0x6f, 0xd5,
	0xa5, 0xf6, 0x0e, 0xaa, 0x24, 0x6f, 0xd7, 0xea, 0x29, 0xec, 0x52, 0x3f, 0x5a, 0xdf, 0x8b, 0x87,
	0x95, 0xb8, 0xd0, 0x14, 0xf5, 0x60, 0x92, 0xfc, 0xb8, 0x21, 0x08, 0xd8, 0xec, 0x5c, 0xd0, 0xc8,
	0xc8, 0xd6, 0x24, 0xd4, 0x91, 0x40, 0x39, 0xe8, 0x09, 0x32, 0x39, 0xe8, 0x15, 0xf5, 0xa0, 0x07,
	0x30, 0xf9, 0xfb, 0xc7, 0x0f, 0xe5, 0xb0, 0xd9, 0xc2, 0xad, 0xa6, 0xdd, 0xb7, 0xce, 0x9a, 0x47,
	0xf8, 0x59, 0xe7, 0xe8, 0xb0, 0x69, 0x77, 0x5e, 0x91, 0x6e, 0x7f, 0x51, 0x53, 0xaa, 0xb3, 0x82,
	0xf1, 0x16, 0xe4, 0xf6, 0x28, 0xdd, 0x9e, 0x4b, 0x11, 0x1d, 0x89, 0xe6, 0x2c, 0xe6, 0x3b, 0x46,
	0x39, 0x9e, 0xc4, 0x4f, 0x40, 0x65, 0x01, 0xe8, 0xc9, 0x4b, 0x96, 0x6a, 0xd1, 0x3a, 0xad, 0x4a,
	0xb2, 0x47, 0x33, 0xe3, 0x6d, 0xb4, 0xa9, 0x37, 0x5c, 0xe5, 0xe8, 0x9a, 0xd8, 0xf1, 0xaa, 0xdc,
	0x71, 0x95, 0x9e, 0x73, 0xb1, 0x2b, 0x2e, 0xc4, 0x4e, 0x17, 0x3e, 0xf9, 0x66, 0x2d, 0xbe, 0xaf,
	0x89, 0x42, 0xdb, 0x6e, 0x3e, 0x5b, 0x1d, 0x85, 0x5f, 0xae, 0x8e, 0x82, 0x60, 0xbc, 0x66, 0xf7,
	0x57, 0x87, 0x60, 0x0f, 0x95, 0x02, 0xfa, 0x22, 0x2e, 0x59, 0x45, 0x7b, 0x3d, 0xa0, 0x2f, 0xfa,
	0x73, 0xb1, 0x59, 0xcb, 0xc4, 0xc6, 0xfc, 0x4c, 0x97, 0xe1, 0x05, 0x3b, 0x5e, 0x95, 0xbf, 0x3f,
	0xd7, 0xe5, 0x79, 0x15, 0xe7, 0x2a, 0x1f, 0xe6, 0x02, 0x9d, 0x5f, 0x08, 0xf4, 0x7c, 0xf6, 0x15,
	0x16, 0xb3, 0xcf, 0x92, 0xaf, 0x66, 0x2d, 0xec, 0x74, 0x9a, 0xdd, 0xe3, 0x36, 0xee, 0x5a, 0x87,
	0x03, 0xa8, 0xf9, 0xab, 0xe7, 0x8c, 0x3d, 0x54, 0x1a, 0x79, 0xcf, 0x79, 0xaa, 0xd2, 0xc3, 0xd2,
	0x72, 0xcd, 0xdf, 0xab, 0xdf, 0x47, 0x9d, 0x05, 0x59, 0xab, 0x1c, 0x48, 0xe9, 0xc8, 0xaf, 0xd2,
	0x51, 0x48, 0xeb, 0x80, 0x6d, 0x23, 0xae, 0xab, 0x7e, 0x0a, 0x52, 0xf7, 0x2e, 0xe2, 0xba, 0xf1,
	0x4f, 0xfa, 0x80, 0xd4, 0xaf, 0x94, 0xea, 0x47, 0x5e, 0xe2, 0xba, 0x6d, 0x09, 0x31, 0x31, 0xba,
	0x21, 0x0d, 0x6c, 0xf6, 0x07, 0x56, 0xb3, 0xdd, 0xb6, 0x5a, 0x03, 0xeb, 0xb8, 0x0f, 0x7c, 0x61,
	0xe0, 0x7b, 0x01, 0x4d, 0x0e, 0x4b, 0xcd, 0x46, 0x12, 0x24, 0xce, 0xcb, 0xbb, 0x68, 0x8b, 0xb8,
	0xae, 0x37, 0xe4, 0xea, 0x01, 0x99, 0xeb, 0x6e, 0xb1, 0x19, 0x83, 0xe5, 0xb3, 0xed, 0x3b, 0xf2,
	0x3f, 0x28, 0x1c, 0xec, 0xf4, 0x06, 0xf8, 0xe4, 0xf8, 0x04, 0x9f, 0x2e, 0x9f, 0x07, 0xfe, 0x9c,
	0xd3, 0xa5, 0xae, 0x3b, 0xa3, 0x8c, 0xdb, 0x74, 0xe4, 0x31, 0x4e, 0xa3, 0xe6, 0x50, 0xb4, 0xf4,
	0xd5, 0xb1, 0xbf, 0x8d, 0xca, 0x44, 0xd2, 0x30, 0x3d, 0xc0, 0xe8, 0xb5, 0xea, 0x32, 0x50, 0xbb,
	0x09, 0x63, 0xea, 0xb7, 0x90, 0x8a, 0x80, 0x9c, 0x10, 0x26, 0xd0, 0x13, 0x98, 0x30, 0x83, 0xf8,
	0xd7, 0xf1, 0xaa, 0x5d, 0x51, 0x10, 0xf5, 0xbb, 0x00, 0x61, 0x4c, 0x0c, 0x1c, 0xf2, 0x07, 0xa6,
	0x78, 0x2d, 0xce, 0x2b, 0x8c, 0x4c, 0xeb, 0xd2, 0x03, 0xf8, 0x36, 0x7f, 0x9b, 0x43, 0x0f, 0xd4,
	0x05, 0x61, 0x89, 0x07, 0xd8, 0x4e, 0x65, 0x68, 0x76, 0x90, 0x2c, 0x66, 0xe6, 0xe1, 0x6b, 0x47,
	0xb2, 0xdb, 0xa8, 0xec, 0x52, 0x36, 0x8c, 0xbc, 0x73, 0xaa, 0xfc, 0x89, 0xd7, 0x46, 0x03, 0x95,
	0x2c, 0xd6, 0x74, 0x21, 0xa7, 0x64, 0x0d, 0xd2, 0xcb, 0x83, 0xfc, 0x93, 0xc2, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x94, 0xc4, 0xf9, 0x36, 0xc8, 0x22, 0x00, 0x00,
}
