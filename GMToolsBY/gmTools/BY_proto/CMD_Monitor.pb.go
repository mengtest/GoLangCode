// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CMD_Monitor.proto

/*
Package CMD is a generated protocol buffer package.

Namespace: MESSAGE

It is generated from these files:
	CMD_Monitor.proto

It has these top-level messages:
	CMD_MONITOR_CLIENT_REG
	CMD_MONITOR_SERVER_REG
	TagMonitorItem
	CMD_MONITOR_ITEM_LST
	CMD_MONITOR_NEW_ITEM
	CMD_MONITOR_DEL_ITEM
	CMD_MONITOR_ITEM_STATE
	CMD_MONITOR_LOG
	CMD_MONITOR_CMD
	CMD_MONITOR_CMD_RESP
*/
package CMD

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CMD_MONITOR_CLIENT_REG struct {
}

func (m *CMD_MONITOR_CLIENT_REG) Reset()                    { *m = CMD_MONITOR_CLIENT_REG{} }
func (m *CMD_MONITOR_CLIENT_REG) String() string            { return proto.CompactTextString(m) }
func (*CMD_MONITOR_CLIENT_REG) ProtoMessage()               {}
func (*CMD_MONITOR_CLIENT_REG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CMD_MONITOR_SERVER_REG struct {
	ServerId   int32  `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerName []byte `protobuf:"bytes,2,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	StartTime  int32  `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	RoomState  int32  `protobuf:"varint,4,opt,name=room_state,json=roomState" json:"room_state,omitempty"`
}

func (m *CMD_MONITOR_SERVER_REG) Reset()                    { *m = CMD_MONITOR_SERVER_REG{} }
func (m *CMD_MONITOR_SERVER_REG) String() string            { return proto.CompactTextString(m) }
func (*CMD_MONITOR_SERVER_REG) ProtoMessage()               {}
func (*CMD_MONITOR_SERVER_REG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CMD_MONITOR_SERVER_REG) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *CMD_MONITOR_SERVER_REG) GetServerName() []byte {
	if m != nil {
		return m.ServerName
	}
	return nil
}

func (m *CMD_MONITOR_SERVER_REG) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *CMD_MONITOR_SERVER_REG) GetRoomState() int32 {
	if m != nil {
		return m.RoomState
	}
	return 0
}

type TagMonitorItem struct {
	ServerId   int32  `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerName []byte `protobuf:"bytes,2,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	StartTime  int32  `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	RoomState  int32  `protobuf:"varint,4,opt,name=room_state,json=roomState" json:"room_state,omitempty"`
	Ipaddr     []byte `protobuf:"bytes,5,opt,name=ipaddr,proto3" json:"ipaddr,omitempty"`
	SshPort    int32  `protobuf:"varint,6,opt,name=ssh_port,json=sshPort" json:"ssh_port,omitempty"`
	SshUser    []byte `protobuf:"bytes,7,opt,name=ssh_user,json=sshUser,proto3" json:"ssh_user,omitempty"`
	SshPasswd  []byte `protobuf:"bytes,8,opt,name=ssh_passwd,json=sshPasswd,proto3" json:"ssh_passwd,omitempty"`
	ShortName  []byte `protobuf:"bytes,9,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
}

func (m *TagMonitorItem) Reset()                    { *m = TagMonitorItem{} }
func (m *TagMonitorItem) String() string            { return proto.CompactTextString(m) }
func (*TagMonitorItem) ProtoMessage()               {}
func (*TagMonitorItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TagMonitorItem) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *TagMonitorItem) GetServerName() []byte {
	if m != nil {
		return m.ServerName
	}
	return nil
}

func (m *TagMonitorItem) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *TagMonitorItem) GetRoomState() int32 {
	if m != nil {
		return m.RoomState
	}
	return 0
}

func (m *TagMonitorItem) GetIpaddr() []byte {
	if m != nil {
		return m.Ipaddr
	}
	return nil
}

func (m *TagMonitorItem) GetSshPort() int32 {
	if m != nil {
		return m.SshPort
	}
	return 0
}

func (m *TagMonitorItem) GetSshUser() []byte {
	if m != nil {
		return m.SshUser
	}
	return nil
}

func (m *TagMonitorItem) GetSshPasswd() []byte {
	if m != nil {
		return m.SshPasswd
	}
	return nil
}

func (m *TagMonitorItem) GetShortName() []byte {
	if m != nil {
		return m.ShortName
	}
	return nil
}

type CMD_MONITOR_ITEM_LST struct {
	Items []*TagMonitorItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *CMD_MONITOR_ITEM_LST) Reset()                    { *m = CMD_MONITOR_ITEM_LST{} }
func (m *CMD_MONITOR_ITEM_LST) String() string            { return proto.CompactTextString(m) }
func (*CMD_MONITOR_ITEM_LST) ProtoMessage()               {}
func (*CMD_MONITOR_ITEM_LST) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CMD_MONITOR_ITEM_LST) GetItems() []*TagMonitorItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type CMD_MONITOR_NEW_ITEM struct {
	Item *TagMonitorItem `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *CMD_MONITOR_NEW_ITEM) Reset()                    { *m = CMD_MONITOR_NEW_ITEM{} }
func (m *CMD_MONITOR_NEW_ITEM) String() string            { return proto.CompactTextString(m) }
func (*CMD_MONITOR_NEW_ITEM) ProtoMessage()               {}
func (*CMD_MONITOR_NEW_ITEM) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CMD_MONITOR_NEW_ITEM) GetItem() *TagMonitorItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type CMD_MONITOR_DEL_ITEM struct {
	ServerId int32 `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
}

func (m *CMD_MONITOR_DEL_ITEM) Reset()                    { *m = CMD_MONITOR_DEL_ITEM{} }
func (m *CMD_MONITOR_DEL_ITEM) String() string            { return proto.CompactTextString(m) }
func (*CMD_MONITOR_DEL_ITEM) ProtoMessage()               {}
func (*CMD_MONITOR_DEL_ITEM) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CMD_MONITOR_DEL_ITEM) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

type CMD_MONITOR_ITEM_STATE struct {
	ServerId  int32 `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	Memory    int64 `protobuf:"varint,2,opt,name=memory" json:"memory,omitempty"`
	Cpu       int32 `protobuf:"varint,3,opt,name=cpu" json:"cpu,omitempty"`
	IoRead    int64 `protobuf:"varint,4,opt,name=io_read,json=ioRead" json:"io_read,omitempty"`
	IoWrite   int64 `protobuf:"varint,5,opt,name=io_write,json=ioWrite" json:"io_write,omitempty"`
	Online    int32 `protobuf:"varint,6,opt,name=online" json:"online,omitempty"`
	RoomState int32 `protobuf:"varint,7,opt,name=room_state,json=roomState" json:"room_state,omitempty"`
}

func (m *CMD_MONITOR_ITEM_STATE) Reset()                    { *m = CMD_MONITOR_ITEM_STATE{} }
func (m *CMD_MONITOR_ITEM_STATE) String() string            { return proto.CompactTextString(m) }
func (*CMD_MONITOR_ITEM_STATE) ProtoMessage()               {}
func (*CMD_MONITOR_ITEM_STATE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CMD_MONITOR_ITEM_STATE) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *CMD_MONITOR_ITEM_STATE) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *CMD_MONITOR_ITEM_STATE) GetCpu() int32 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *CMD_MONITOR_ITEM_STATE) GetIoRead() int64 {
	if m != nil {
		return m.IoRead
	}
	return 0
}

func (m *CMD_MONITOR_ITEM_STATE) GetIoWrite() int64 {
	if m != nil {
		return m.IoWrite
	}
	return 0
}

func (m *CMD_MONITOR_ITEM_STATE) GetOnline() int32 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *CMD_MONITOR_ITEM_STATE) GetRoomState() int32 {
	if m != nil {
		return m.RoomState
	}
	return 0
}

type CMD_MONITOR_LOG struct {
	ServerId int32  `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	LogLevel int32  `protobuf:"varint,2,opt,name=log_level,json=logLevel" json:"log_level,omitempty"`
	LogTime  int64  `protobuf:"varint,3,opt,name=log_time,json=logTime" json:"log_time,omitempty"`
	LogText  []byte `protobuf:"bytes,4,opt,name=log_text,json=logText,proto3" json:"log_text,omitempty"`
}

func (m *CMD_MONITOR_LOG) Reset()                    { *m = CMD_MONITOR_LOG{} }
func (m *CMD_MONITOR_LOG) String() string            { return proto.CompactTextString(m) }
func (*CMD_MONITOR_LOG) ProtoMessage()               {}
func (*CMD_MONITOR_LOG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CMD_MONITOR_LOG) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *CMD_MONITOR_LOG) GetLogLevel() int32 {
	if m != nil {
		return m.LogLevel
	}
	return 0
}

func (m *CMD_MONITOR_LOG) GetLogTime() int64 {
	if m != nil {
		return m.LogTime
	}
	return 0
}

func (m *CMD_MONITOR_LOG) GetLogText() []byte {
	if m != nil {
		return m.LogText
	}
	return nil
}

type CMD_MONITOR_CMD struct {
	ServerId int32  `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ClientId int32  `protobuf:"varint,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Cmd      []byte `protobuf:"bytes,3,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (m *CMD_MONITOR_CMD) Reset()                    { *m = CMD_MONITOR_CMD{} }
func (m *CMD_MONITOR_CMD) String() string            { return proto.CompactTextString(m) }
func (*CMD_MONITOR_CMD) ProtoMessage()               {}
func (*CMD_MONITOR_CMD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CMD_MONITOR_CMD) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *CMD_MONITOR_CMD) GetClientId() int32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *CMD_MONITOR_CMD) GetCmd() []byte {
	if m != nil {
		return m.Cmd
	}
	return nil
}

type CMD_MONITOR_CMD_RESP struct {
	ServerId int32  `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ClientId int32  `protobuf:"varint,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Result   []byte `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *CMD_MONITOR_CMD_RESP) Reset()                    { *m = CMD_MONITOR_CMD_RESP{} }
func (m *CMD_MONITOR_CMD_RESP) String() string            { return proto.CompactTextString(m) }
func (*CMD_MONITOR_CMD_RESP) ProtoMessage()               {}
func (*CMD_MONITOR_CMD_RESP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CMD_MONITOR_CMD_RESP) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *CMD_MONITOR_CMD_RESP) GetClientId() int32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *CMD_MONITOR_CMD_RESP) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*CMD_MONITOR_CLIENT_REG)(nil), "CMD.CMD_MONITOR_CLIENT_REG")
	proto.RegisterType((*CMD_MONITOR_SERVER_REG)(nil), "CMD.CMD_MONITOR_SERVER_REG")
	proto.RegisterType((*TagMonitorItem)(nil), "CMD.tagMonitorItem")
	proto.RegisterType((*CMD_MONITOR_ITEM_LST)(nil), "CMD.CMD_MONITOR_ITEM_LST")
	proto.RegisterType((*CMD_MONITOR_NEW_ITEM)(nil), "CMD.CMD_MONITOR_NEW_ITEM")
	proto.RegisterType((*CMD_MONITOR_DEL_ITEM)(nil), "CMD.CMD_MONITOR_DEL_ITEM")
	proto.RegisterType((*CMD_MONITOR_ITEM_STATE)(nil), "CMD.CMD_MONITOR_ITEM_STATE")
	proto.RegisterType((*CMD_MONITOR_LOG)(nil), "CMD.CMD_MONITOR_LOG")
	proto.RegisterType((*CMD_MONITOR_CMD)(nil), "CMD.CMD_MONITOR_CMD")
	proto.RegisterType((*CMD_MONITOR_CMD_RESP)(nil), "CMD.CMD_MONITOR_CMD_RESP")
}

func init() { proto.RegisterFile("CMD_Monitor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0xe5, 0xba, 0xb1, 0x93, 0x6d, 0xf4, 0x7d, 0x60, 0x50, 0x58, 0x54, 0x21, 0x22, 0x5f,
	0x08, 0x97, 0x1c, 0xe8, 0x03, 0xa0, 0x2a, 0xb1, 0x90, 0xa5, 0x38, 0xa9, 0x36, 0x86, 0x9e, 0xd0,
	0xca, 0xd4, 0xa3, 0x64, 0x25, 0xdb, 0x1b, 0xed, 0x6e, 0xda, 0x72, 0xe4, 0x1d, 0x38, 0xf0, 0x4c,
	0x3c, 0x15, 0xda, 0xf1, 0x16, 0xd5, 0x91, 0x68, 0x0f, 0x1c, 0xb8, 0x79, 0xfe, 0xbf, 0x9d, 0xd9,
	0x99, 0xfd, 0x4f, 0x42, 0x9e, 0xce, 0xb2, 0x39, 0xcf, 0x64, 0x23, 0x8c, 0x54, 0xd3, 0x9d, 0x92,
	0x46, 0x46, 0xfe, 0x2c, 0x9b, 0xc7, 0x94, 0x8c, 0x90, 0xac, 0x96, 0x69, 0xbe, 0x62, 0x7c, 0xb6,
	0x48, 0x93, 0x65, 0xce, 0x59, 0xf2, 0x21, 0xfe, 0xee, 0x75, 0xd1, 0x3a, 0x61, 0x9f, 0x12, 0x66,
	0x51, 0x74, 0x4a, 0x06, 0x1a, 0xd4, 0x35, 0x28, 0x2e, 0x4a, 0xea, 0x8d, 0xbd, 0x49, 0x8f, 0xf5,
	0x5b, 0x21, 0x2d, 0xa3, 0xd7, 0xe4, 0xc4, 0xc1, 0xa6, 0xa8, 0x81, 0x1e, 0x8d, 0xbd, 0xc9, 0x90,
	0x91, 0x56, 0x5a, 0x16, 0x35, 0x44, 0xaf, 0x08, 0xd1, 0xa6, 0x50, 0x86, 0x1b, 0x51, 0x03, 0xf5,
	0x31, 0x7d, 0x80, 0x4a, 0x2e, 0x5a, 0xac, 0xa4, 0xac, 0xb9, 0x36, 0x85, 0x01, 0x7a, 0xdc, 0x62,
	0xab, 0xac, 0xad, 0x10, 0xff, 0x38, 0x22, 0xff, 0x99, 0x62, 0xe3, 0x46, 0x49, 0x0d, 0xd4, 0xff,
	0xb2, 0x9d, 0x68, 0x44, 0x02, 0xb1, 0x2b, 0xca, 0x52, 0xd1, 0x1e, 0x56, 0x76, 0x51, 0xf4, 0x92,
	0xf4, 0xb5, 0xde, 0xf2, 0x9d, 0x54, 0x86, 0x06, 0x98, 0x14, 0x6a, 0xbd, 0xbd, 0x90, 0xca, 0xdc,
	0xa1, 0xbd, 0x06, 0x45, 0x43, 0x4c, 0xb2, 0xe8, 0xa3, 0x06, 0x85, 0xbd, 0xd8, 0xac, 0x42, 0xeb,
	0x9b, 0x92, 0xf6, 0x11, 0x0e, 0x6c, 0x1e, 0x0a, 0x88, 0xb7, 0x52, 0x99, 0x76, 0x94, 0x81, 0xc3,
	0x56, 0xb1, 0x93, 0xc4, 0xe7, 0xe4, 0xf9, 0x7d, 0xc3, 0xd2, 0x3c, 0xc9, 0xf8, 0x62, 0x9d, 0x47,
	0x6f, 0x49, 0x4f, 0x18, 0xa8, 0x35, 0xf5, 0xc6, 0xfe, 0xe4, 0xe4, 0xdd, 0xb3, 0xe9, 0x2c, 0x9b,
	0x4f, 0xbb, 0x6f, 0xc8, 0xda, 0x13, 0xf1, 0xfb, 0x6e, 0x89, 0x65, 0x72, 0x89, 0x65, 0xa2, 0x37,
	0xe4, 0xd8, 0x1e, 0xc0, 0xd7, 0xfd, 0x43, 0x05, 0x3c, 0x10, 0x9f, 0x75, 0x0b, 0xcc, 0x93, 0x45,
	0x5b, 0xe0, 0x21, 0x8f, 0xe2, 0x9f, 0x07, 0xab, 0x86, 0x9d, 0xaf, 0xf3, 0xf3, 0x3c, 0x79, 0xd8,
	0xdb, 0x11, 0x09, 0x6a, 0xa8, 0xa5, 0xfa, 0x8a, 0xb6, 0xfa, 0xcc, 0x45, 0xd1, 0x13, 0xe2, 0x5f,
	0xed, 0xf6, 0xce, 0x4b, 0xfb, 0x19, 0xbd, 0x20, 0xa1, 0x90, 0x5c, 0x41, 0x51, 0xa2, 0x85, 0x3e,
	0x0b, 0x84, 0x64, 0x50, 0x94, 0xd6, 0x0c, 0x21, 0xf9, 0x8d, 0x12, 0x06, 0xd0, 0x41, 0x9f, 0x85,
	0x42, 0x5e, 0xda, 0xd0, 0x56, 0x97, 0x4d, 0x25, 0x1a, 0x70, 0x06, 0xba, 0xe8, 0x60, 0x23, 0xc2,
	0xc3, 0x05, 0xfd, 0xe6, 0x91, 0xff, 0xef, 0x0f, 0xb3, 0x58, 0x3d, 0xf2, 0x83, 0x39, 0x25, 0x83,
	0x4a, 0x6e, 0x78, 0x05, 0xd7, 0x50, 0xe1, 0x20, 0x3d, 0xd6, 0xaf, 0xe4, 0x66, 0x61, 0x63, 0xdb,
	0x9f, 0x85, 0xbf, 0x77, 0xd3, 0x67, 0x61, 0x25, 0x37, 0xb8, 0x99, 0x77, 0x08, 0x6e, 0x0d, 0x0e,
	0x35, 0x6c, 0x11, 0xdc, 0x9a, 0xf8, 0x73, 0xb7, 0x85, 0x59, 0x36, 0x7f, 0xb4, 0x85, 0xab, 0x4a,
	0x40, 0x63, 0x2c, 0x74, 0x2d, 0xb4, 0x42, 0x5a, 0xe2, 0x6b, 0xd6, 0x25, 0xde, 0x3e, 0x64, 0xf6,
	0x33, 0xde, 0x76, 0x4d, 0xb6, 0xdf, 0x2c, 0x59, 0x5f, 0xfc, 0xc5, 0x1d, 0x23, 0x12, 0x28, 0xd0,
	0xfb, 0xca, 0xb8, 0x6b, 0x5c, 0xf4, 0x25, 0xc0, 0xbf, 0xaa, 0xb3, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x9a, 0x6f, 0xd4, 0x50, 0xbf, 0x04, 0x00, 0x00,
}
